<?php

require 'Slim/Slim.php';
require 'Db.class.php';
require_once 'variavel.php';

error_reporting(E_ALL);
ini_set('display_errors', 'On');

error_reporting(E_ERROR);

\Slim\Slim::registerAutoloader();

$app = new \Slim\Slim();
// $db = new Db;

session_start();

date_default_timezone_set("America/Fortaleza");

header("Content-Type: application/json");
header("Access-Control-Allow-Origin: *");

// --------------------------------------------------------------------
function asDollars($value)
{
    $value = floatval($value);
    return 'R$' . number_format($value, 2);
}

class item
{

}

function sanitizeString($str)
{
    $str = preg_replace('/[áàãâä]/ui', 'a', $str);
    $str = preg_replace('/[éèêë]/ui', 'e', $str);
    $str = preg_replace('/[íìîï]/ui', 'i', $str);
    $str = preg_replace('/[óòõôö]/ui', 'o', $str);
    $str = preg_replace('/[úùûü]/ui', 'u', $str);
    $str = preg_replace('/[ç]/ui', 'c', $str);
    // $str = preg_replace('/[,(),;:|!"#$%&/=?~^><ªº-]/', '_', $str);

    return $str;
}

class criarConexao
{

    private $con = null;

    public $param;

    public function __construct($param)
    {
        $this->param = $param;
    }

    public function con()
    {

        try {
            if ($this->con == null) {
                //   $this->param = "ones_" . $this->param;
                $this->con = new PDO(
                    \sprintf("mysql:host=%s;dbname=%s;", "localhost", $this->param),
                    $this->param,
                    "denis14031988",
                    array(
                        PDO::ATTR_EMULATE_PREPARES => false,
                        PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4",
                    )
                );
                $this->con->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                $this->con->exec("set names utf8mb4");
            }

            return $this->con;
        } catch (PDOException $e) {
            return null;
        }

    }
}
$bancoDeDados = "";
$idEmpresa = $app->request()->params('idEmpresa');
$db = new criarConexao(retornarBancoDeDados($idEmpresa));
$GLOBALS['bancoDeDados'] = $bancoDeDados;
$app->post(
    '/atualizarBD',
    function () use ($app, $db, $bancoDeDados) {
        $data = json_decode($app->request()->getBody());

        update('parcial_pedido', "tipo_pagamento", "VARCHAR(100) DEFAULT ''", $db);

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set id_referencia = id where id_referencia is null or id_referencia = ''");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set referencia_nfc = '' where referencia_nfc is null");
        $consulta->execute();

        update('produto', "impressao_individual", "VARCHAR(20) DEFAULT 'false'", $db);
        update('adicional', "impressao_individual", "VARCHAR(20) DEFAULT 'false'", $db);
        update('parametro', "codigo_verificador_ifood_v2", "LONGTEXT DEFAULT ''", $db);
        update('parametro', "user_code_ifood_v2", "VARCHAR(255) DEFAULT ''", $db);
        update('parametro', "id_client_ifood_v2", "VARCHAR(255) DEFAULT ''", $db);
        update('parametro', "id_secret_ifood_v2", "VARCHAR(255) DEFAULT ''", $db);
        update('parametro', "refresh_token_ifood_v2", "LONGTEXT DEFAULT ''", $db);
        update('parametro', "id_merchant_ifood_v2", "VARCHAR(255) DEFAULT ''", $db);
        update('produto_estoque', "classificacao", "VARCHAR(100) DEFAULT ''", $db);
        update('pedido', "cpf", "VARCHAR(20) DEFAULT ''", $db);
        update('parametro', "versao_api_ifood", "VARCHAR(10) DEFAULT 'v1'", $db);
        update('produto', "codigo_saipos", "VARCHAR(100) DEFAULT ''", $db);
        update('adicional', "codigo_saipos", "VARCHAR(100) DEFAULT ''", $db);
        update('parametro', "primeira_coluna_impressao_web", "VARCHAR(20) DEFAULT '35'", $db);
        update('parametro', "segunda_coluna_impressao_web", "VARCHAR(20) DEFAULT '45'", $db);
        update('parametro', "fonte_impressao_web", "VARCHAR(20) DEFAULT '13'", $db);
        update('parametro', "margin_primeira_coluna", "VARCHAR(20) DEFAULT '0'", $db);
        update('parametro', "margin_segunda_coluna", "VARCHAR(20) DEFAULT '0'", $db);
        update('parametro', "margin_segunda_coluna_valores", "VARCHAR(20) DEFAULT '0'", $db);
        update('parametro', "abrir_whats_status_pedido_online", "VARCHAR(20) DEFAULT 'false'", $db);
        criarTabela("vendedor", $db);
        update('vendedor', "nome", "VARCHAR(150) DEFAULT ''", $db);
        update('vendedor', "porcentagem", "DOUBLE(18,2) DEFAULT '0'", $db);
        update('vendedor', "ativo", "VARCHAR(20) DEFAULT 'true'", $db);
        update('vendedor', "cpf", "VARCHAR(30) DEFAULT '0'", $db);
        update('parametro', "sistema_vendedor_pedido", "VARCHAR(20) DEFAULT 'false'", $db);
        update('pedido', "vendedor", "VARCHAR(100) DEFAULT ''", $db);
        update('pedido', "cpf_vendedor", "VARCHAR(30) DEFAULT ''", $db);
        update('pedido', "porcentagem_vendedor", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido', "data_confirmacao_pix", "DATETIME", $db);
        criarTabela("historico_pedido", $db);
        update('historico_pedido', "data_evento", "DATETIME", $db);
        update('historico_pedido', "evento", "VARCHAR(255) DEFAULT ''", $db);
        update('historico_pedido', "usuario", "VARCHAR(100) DEFAULT ''", $db);
        update('historico_pedido', "id_pedido", "INT(11) DEFAULT 0", $db);
        update('historico_pedido', "tipo", "VARCHAR(15) DEFAULT ''", $db);
        update('cliente', "observacao", "VARCHAR(255) DEFAULT ''", $db);
        update('parametro', "notificacao_whatsapp", "VARCHAR(10) DEFAULT 'false'", $db);
        update('forma_pagamento', "mostrar_app", "VARCHAR(10) DEFAULT 'true'", $db);
        update('empresa', "tolerancia_pagamento", "INT(11) DEFAULT 5", $db);
        update('empresa', "certificado_notificacao_ios", "DATE DEFAULT null", $db);
        update('empresa', "data_desligamento", "DATE DEFAULT null", $db);
        update('empresa', "contato_financeiro", "VARCHAR(20) DEFAULT ''", $db);
        update('empresa', "contato_contabil", "VARCHAR(20) DEFAULT ''", $db);
        update('empresa', "contato_suporte", "VARCHAR(20) DEFAULT ''", $db);
        modificarColuna('produto_estoque', "qt_estoque", "DOUBLE(18,3)", $db);
        modificarColuna('movimentacao_estoque', "quantidade", "DOUBLE(18,3)", $db);
        update('produto', "bebida_alcoolica", "VARCHAR(20) DEFAULT 'false'", $db);
        update('parametro', "verificar_bebida_alcoolica", "VARCHAR(10) DEFAULT 'false'", $db);
        modificarColuna('pedido', "shortReference", "VARCHAR(20)", $db);
        update('parametro', "id_pixel", "VARCHAR(100) DEFAULT ''", $db);
        criarTabela("contas", $db);
        update('contas', "descricao", "VARCHAR(255) DEFAULT ''", $db);
        update('contas', "data_criacao", "DATETIME DEFAULT null", $db);
        update('contas', "data_vencimento", "DATE DEFAULT null", $db);
        update('contas', "data_pagamento", "DATE DEFAULT null", $db);
        update('contas', "valor_bruto", "DOUBLE(18,2) DEFAULT 0", $db);
        update('contas', "desconto", "DOUBLE(18,2) DEFAULT 0", $db);
        update('contas', "valor_liquido", "DOUBLE(18,2) DEFAULT 0", $db);
        update('contas', "recorrente", "VARCHAR(10) DEFAULT 'false'", $db);
        update('contas', "tipo", "VARCHAR(10) DEFAULT ''", $db);
        update('parametro', "data_inicio_financeiro", "DATE", $db);
        criarTabela("categoria_financeiro", $db);
        update('categoria_financeiro', "descricao", "VARCHAR(255) DEFAULT ''", $db);
        criarTabela("categoria_conta", $db);
        update('categoria_conta', "id_conta", "INT(11) DEFAULT null", $db);
        update('categoria_conta', "id_categoria", "INT(11) DEFAULT null", $db);
        update('contas', "forma_pagamento", "VARCHAR(30) DEFAULT ''", $db);
        update('contas', "cancelado", "VARCHAR(10) DEFAULT 'false'", $db);
        update('contas', "id_pai", "INT(11) DEFAULT null", $db);
        modificarColuna('contas', "data_vencimento", "DATE", $db);
        modificarColuna('contas', "data_pagamento", "DATE", $db);
        update('caixa', "importado_financeiro", "VARCHAR(10) DEFAULT 'false'", $db);
        update('contas', "id_caixa", "INT(11) DEFAULT null", $db);
        update('parametro', "puxar_pedido_retira_entregador", "VARCHAR(10) DEFAULT 'false'", $db);
        update('parametro', "abrir_tela_nfce_automatico", "VARCHAR(10) DEFAULT 'true'", $db);
        update('contas', "taxa_desconto", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido', "custo_adicional", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido_produto', "desconto", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido', "tipo_desconto", "VARCHAR(15) DEFAULT null", $db);
        update('contas', "parcelas", "VARCHAR(15) DEFAULT ''", $db);
        update('contas', "numero_parcela", "VARCHAR(15) DEFAULT ''", $db);
        update('parametro', "emitir_nfce_automatico_pdv", "VARCHAR(10) DEFAULT 'false'", $db);
        update('parametro', "imprimir_danfe_automatico_pdv", "VARCHAR(10) DEFAULT 'false'", $db);
        update('pedido', "cod_influencer", "VARCHAR(50) DEFAULT ''", $db);
        criarTabela("filiado", $db);
        update('filiado', "nome", "VARCHAR(100) DEFAULT ''", $db);
        update('filiado', "telefone", "VARCHAR(100) DEFAULT ''", $db);
        update('filiado', "data_cadastro", "DATETIME DEFAULT null", $db);
        update('filiado', "codigo", "VARCHAR(50) DEFAULT ''", $db);
        update('parametro', "liberar_nfce_mes", "VARCHAR(10) DEFAULT 'false'", $db);
        update('cliente', "instagram", "VARCHAR(50) DEFAULT ''", $db);
        update('parametro', "instagram_cliente_obrigatorio", "VARCHAR(10) DEFAULT 'false'", $db);
        update('empresa', "id_cobranca_one", "INT(11) DEFAULT 104", $db);
        update('pedido_produto', "valor_pago", "DOUBLE(18,2) DEFAULT 0", $db);
        update('parametro', "permitir_troca_mesa_aa", "VARCHAR(10) DEFAULT 'false'", $db);
        update('parcial_pedido', "data_pagamento", "DATETIME DEFAULT null", $db);
        update('whatsapp_cadastro', "mensagem2", "VARCHAR(255) DEFAULT ''", $db);
        update('whatsapp_cadastro', "mensagem3", "VARCHAR(255) DEFAULT ''", $db);
        update('whatsapp_cadastro', "arquivo", "LONGTEXT DEFAULT ''", $db);
        update('whatsapp_cadastro', "numero_lembrete", "VARCHAR(20) DEFAULT ''", $db);
        update('whatsapp_cadastro', "tipo_arquivo", "VARCHAR(20) DEFAULT ''", $db);
        update('whatsapp_mensagem_enviar', "mensagem2", "VARCHAR(255) DEFAULT ''", $db);
        update('whatsapp_mensagem_enviar', "mensagem3", "VARCHAR(255) DEFAULT ''", $db);
        update('whatsapp_mensagem_enviar', "arquivo", "LONGTEXT DEFAULT ''", $db);
        update('whatsapp_mensagem_enviar', "tipo_arquivo", "VARCHAR(20) DEFAULT ''", $db);
        update('pedido', "entrada_paga", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido', "data_aguardando_entregador_retira", "DATETIME DEFAULT null", $db);
        update('pedido', "data_preparo", "DATETIME DEFAULT null", $db);
        update('parametro', "adicionar_nove_whatsapp", "VARCHAR(10) DEFAULT 'false'", $db);
        update('pedido', "sub_total", "DOUBLE(18,2) DEFAULT 0", $db);
        update('pedido', "porcentagem_garcom_pago", "DOUBLE(18,2) DEFAULT 0", $db);
        update('parametro', "tela_principal", "VARCHAR(30) DEFAULT 'Pedidos em Aberto'", $db);
        update('parametro', "tempo_preparo", "INT(11) DEFAULT 0", $db);
        update('parametro', "tempo_aguardando_entregador", "INT(11) DEFAULT 0", $db);
        update('parametro', "tempo_sair_entrega", "INT(11) DEFAULT 0", $db);
        update('parametro', "versao_gestao_delivery", "VARCHAR(10) DEFAULT 'v2'", $db);
        criarTabela("log_acesso", $db);
        update('log_acesso', "id_maquina", "VARCHAR(50) DEFAULT ''", $db);
        update('log_acesso', "ip_servidor", "VARCHAR(50) DEFAULT ''", $db);
        update('log_acesso', "empresa", "VARCHAR(50) DEFAULT ''", $db);
        update('log_acesso', "ip", "VARCHAR(20) DEFAULT ''", $db);
        update('parametro', "barrar_produto_sem_estoque", "VARCHAR(10) DEFAULT 'false'", $db);
        update('log_acesso', "data_registro", "DATETIME DEFAULT null", $db);
        update('log_acesso', "usuario", "VARCHAR(30) DEFAULT ''", $db);
        update('log_acesso', "versao_sistema", "VARCHAR(10) DEFAULT ''", $db);
        criarTabela("etapa_kds", $db);
        update('etapa_kds', "descricao", "VARCHAR(100) DEFAULT ''", $db);
        update('etapa_kds', "ordem", "INT(11) DEFAULT null", $db);
        update('etapa_kds', "tempo_duracao", "INT(11) DEFAULT 0", $db);
        update('pedido_produto', "etapa_kds", "VARCHAR(30) DEFAULT 'aguardando'", $db);
        update('pedido_produto', "ordem_kds", "INT(11) DEFAULT '0'", $db);
        update('pedido_produto', "ordem_lista_kds", "INT(11) DEFAULT '0'", $db);
        update('etapa_kds', "usuario", "VARCHAR(100) DEFAULT ''", $db);
        update('pedido_produto', "data_concluido_producao_kds", "DATETIME DEFAULT null", $db);
        update('pedido_produto', "data_etapa_kds_1", "DATETIME DEFAULT null", $db);
        update('pedido_produto', "data_etapa_kds_2", "DATETIME DEFAULT null", $db);
        update('pedido_produto', "data_etapa_kds_3", "DATETIME DEFAULT null", $db);
        update('pedido_produto', "data_entrega_kds", "DATETIME DEFAULT null", $db);
        update('sabor', "media_valor", "VARCHAR(10) DEFAULT 'false'", $db);
        update('sabor', "quantidade_unica", "VARCHAR(10) DEFAULT 'false'", $db);
        update('pedido', "mensagem_recuperador", "VARCHAR(10) DEFAULT 'false'", $db);
        update('empresa', "valor_representante", "DOUBLE(18,2) DEFAULT 0", $db);
        update('parametro', "imprimir_grupo_delivery", "VARCHAR(10) DEFAULT 'false'", $db);
        update('parametro', "imprimir_delivery_despacho", "VARCHAR(10) DEFAULT 'false'", $db);
        criarTabela("caixa_conferencia", $db);
        update('caixa_conferencia', "id_caixa", "INT(11) DEFAULT null", $db);
        update('caixa_conferencia', "forma_pagamento", "VARCHAR(100) DEFAULT null", $db);
        update('caixa_conferencia', "valor_sistema", "DOUBLE(18,2) DEFAULT 0", $db);
        update('caixa_conferencia', "valor_conferido", "DOUBLE(18,2) DEFAULT 0", $db);
        update('caixa_conferencia', "valor_resultado", "DOUBLE(18,2) DEFAULT 0", $db);
        update('caixa_conferencia', "id_usuario", "INT(11) DEFAULT null", $db);
        update('caixa_conferencia', "data_conferencia", "DATETIME DEFAULT null", $db);
        update('adicional_produto_pedido', "ordem_adicionado", "INT(11) DEFAULT 0", $db);
        update('sabor', "ordem_exibicao", "INT(11) DEFAULT 0", $db);
        update('nfce', "emissao", "VARCHAR(10) DEFAULT '1'", $db);
        update('parametro', "public_key_mp", "VARCHAR(255) DEFAULT null", $db);
        update('parametro', "token_mp", "VARCHAR(255) DEFAULT null", $db);
        update('parametro', "enviar_msg_whats_finalizado", "VARCHAR(20) DEFAULT 'false'", $db);
        update('parametro', "taxa_fixa_entregador", "DOUBLE(18,2) DEFAULT null", $db);
        update('parametro', "impressao_fonte", "VARCHAR(30) DEFAULT 'Courier New'", $db);
        update('parametro', "impressao_tamanho_fonte", "INT(11) DEFAULT 38", $db);
        update('parametro', "impressao_segunda_posicao", "INT(11) DEFAULT 210", $db);
        update('parametro', "impressao_terceira_posicao", "INT(11) DEFAULT 430", $db);
        update('parametro', "impressao_quebra_linha", "INT(11) DEFAULT 23", $db);
        update('parametro', "impressao_peso_fonte_primeira_coluna", "INT(11) DEFAULT 600", $db);
        update('parametro', "impressao_peso_fonte_segunda_coluna", "INT(11) DEFAULT 800", $db);
        update('parametro', "impressao_peso_fonte_produto", "INT(11) DEFAULT 800", $db);
        update('parametro', "impressao_peso_fonte_adicional", "INT(11) DEFAULT 800", $db);
        update('parametro', "impressao_quebra_linha_produto", "INT(11) DEFAULT 23", $db);
        update('parametro', "impressao_imprimir_valor_producao", "VARCHAR(10) DEFAULT 'true'", $db);
        update('parametro', "imprimir_externo_interno", "VARCHAR(10) DEFAULT 'false'", $db);
        update('parametro', "impressao_quebra_linha_produto_producao", "INT(11) DEFAULT 23", $db);
        update('usuario', "tela_principal", "VARCHAR(30) DEFAULT null", $db);
        update('empresa', "situacao_comercial", "VARCHAR(40) DEFAULT 'produção'", $db);
        update('adicional', "imagem", "VARCHAR(255) DEFAULT ''", $db);
        criarTabela("conta_banco", $db);
        update('conta_banco', "descricao", "VARCHAR(255) DEFAULT ''", $db);
        update('conta_banco', "agencia", "VARCHAR(50) DEFAULT ''", $db);
        update('conta_banco', "conta", "VARCHAR(50) DEFAULT ''", $db);
        update('conta_banco', "tipo", "VARCHAR(50) DEFAULT ''", $db);
        update('conta_banco', "banco", "VARCHAR(50) DEFAULT ''", $db);
        update('conta_banco', "ativo", "VARCHAR(10) DEFAULT 'true'", $db);
        update('contas', "id_conta_banco", "INT(11) DEFAULT 0", $db);
        update('contas', "id_transferencia_bancaria", "INT(11) DEFAULT null", $db);
        criarTabela("transferencia_bancaria", $db);
        update('transferencia_bancaria', "id_conta_origem", "INT(11) DEFAULT 0", $db);
        update('transferencia_bancaria', "id_conta_destino", "INT(11) DEFAULT 0", $db);
        update('transferencia_bancaria', "data_transferencia", "DATE DEFAULT null", $db);
        update('transferencia_bancaria', "valor", "DOUBLE(18,2) DEFAULT 0", $db);
        update('transferencia_bancaria', "cancelado", "VARCHAR(10) DEFAULT 'false'", $db);
        update('empresa', "cardapio_digital", "VARCHAR(10) DEFAULT 'false'", $db);
        update('usuario', "tocar_imprimir_pedido_online", "VARCHAR(10) DEFAULT 'true'", $db);
        update('pedido', "embalar_viagem", "tinyint(1) DEFAULT 0", $db);
        update('pedido', "responsavel_pedido", "INT(11) DEFAULT 0", $db);
        update('parametro', "controle_responsavel_comanda", "VARCHAR(10) DEFAULT 'false'", $db);
        update('empresa', "versao_sistema", "VARCHAR(15) DEFAULT ''", $db);
        update('pedido', "telefone", "VARCHAR(30) DEFAULT ''", $db);
        update('produto', "codigo_barras", "VARCHAR(255) DEFAULT ''", $db);
        update('parametro', "comanda_pre_pago", "VARCHAR(20) DEFAULT 'false'", $db);
        update('produto', "placeholder_observacao", "VARCHAR(255) DEFAULT ''", $db);
        update('pedido', "auto_atendimento", "VARCHAR(10) DEFAULT 'false'", $db);
        echo json_encode("ok");

    }
);

function criarTabela($nome, $db)
{
    $consulta = "CREATE TABLE IF NOT EXISTS `" . $nome . "` (id INT NOT NULL AUTO_INCREMENT,  PRIMARY KEY (id) )";
    $stmt = $db->con()->prepare($consulta);
    $stmt->execute();

}

function update($tabela, $coluna, $definicao, $db)
{
    try {
        $nomeBanco = $db->param;
        $consulta = "SELECT * FROM information_schema.COLUMNS WHERE table_name = '$tabela' AND column_name = '$coluna' and TABLE_SCHEMA = '$nomeBanco'  ";

        $stmt = $db->con()->prepare($consulta);

        $stmt->execute();
        $list = $stmt->fetchAll(\PDO::FETCH_ASSOC);

        if (count($list) == 0) {
            $stmt = $db->con()->prepare("ALTER TABLE " . $tabela . " ADD COLUMN " . $coluna . " " . $definicao . " ");
            $stmt->execute();
        }
    } catch (PDOException $e) {

    }
}

function modificarColuna($tabela, $coluna, $definicao, $db)
{
    try {
        $stmt = $db->con()->prepare("ALTER TABLE " . $tabela . " MODIFY COLUMN " . $coluna . " " . $definicao);
        $stmt->execute();

    } catch (PDOException $e) {

    }
}

$app->get(
    '/ifood',
    function () use ($app, $db) {
        $data = new stdClass();
        $data->client_id = 'onesolucoes';
        $data->client_secret = '0n&$olu98sS';
        $data->grant_type = 'password';
        $data->username = 'POS-16514564';
        $data->password = 'POS-16514564';
        $url = "https://pos-api.ifood.com.br/oauth/token";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // curl_setopt($ch,CURLOPT_HEADER, 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW');
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            "Content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
        )
        );
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        echo json_encode($list->access_token);

        echo "<br>";

        $url = "https://pos-api.ifood.com.br/v1.0/events%3Apolling";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            "Content-Type','application/json",
            "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJhZTIwZGJkOC1kMWNjLTRlNDEtOGQ5Yi1lYTk5NTQyZmQxMmIiLCJ1c2VyX25hbWUiOiJQT1MtMTY1MTQ1NjQiLCJwcm9maWxlcyI6Ilt7XCJpZFwiOlwiMjFcIixcIm5hbWVcIjpcIlBPU1wifV0iLCJpc3MiOiJpRm9vZCIsImNsaWVudF9pZCI6Im9uZXNvbHVjb2VzIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9DTElFTlQiLCJST0xFX1RSVVNURURfQ0xJRU5UIl0sIm11c3RfY2hhbmdlX3Bhc3N3b3JkIjp0cnVlLCJhdWQiOlsia2l0Y2hlbiIsIm9hdXRoLXNlcnZlciJdLCJ1c2VyX21ldGFkYXRhIjo3NTg5MTMsImJhY2tvZmZpY2VzIjoiW3tcImlkXCI6XCIxXCIsXCJuYW1lXCI6XCJPUEJSXCIsXCJkb21haW5cIjpcImlmb29kLmNvbS5iclwifV0iLCJwZXJtaXNzaW9ucyI6W10sInNjb3BlIjpbInRydXN0IiwicmVhZCIsIndyaXRlIl0sInRlbmFudElkIjoiNThkOTIyMTAtNDc2Mi0xMWU2LWJlYjgtOWU3MTEyOGNhZTc3IiwibWVyY2hhbnRzIjoiW3tcIm1lcmNoYW50VXVpZFwiOlwiZTc1OWUyNjAtODQ0Yi00MTQ0LTk0ZmMtOGVhOTVjYTA2OGQ4XCIsXCJtZXJjaGFudElkXCI6MzI5MTg1fV0iLCJleHAiOjE1NzAxNDczMzgsImlhdCI6MTU3MDE0MzczOH0.ex4x2hT8jzoggj-frk5ubHn5Cl5TyLIV2Kpuf9EUZK85tVnEZF4dlyg5rIxS66GohaLP-z4K4k1taDBzIzw28FAGJB2elX7e1yt929tPTXSYiWdnZkNPx-oyZH2OfvLJZwq7iYUWY8xqJ-BDEPkV0_984tgI-z8lzzpocBYmxWs",
        )
        );
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        echo json_encode($list);

    }
);

$app->post(
    '/getDadosXmlNfe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $xml = (isset($data->xml)) ? $data->xml : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        if ($xml) {
            if (!file_exists('arquivos/')) {
                mkdir('arquivos/', 0777, true);
            }

            define('UPLOAD_DIR', 'arquivos/');
            $data = base64_decode($xml);
            $file = UPLOAD_DIR . $nome;
            $success = file_put_contents($file, $data);
        }
        $dados = new stdClass();

        $chave = str_replace(".xml", "", $nome);
        if ($chave) {
            if ($chave == '') {
                echo json_encode("<h4>Informe a chave de acesso!</h4>");
                exit;
            }
            $arquivo = "arquivos/" . $chave . ".xml";
            if (file_exists($arquivo)) {
                $arquivo = $arquivo;
                $xml = simplexml_load_file($arquivo);
                //    echo json_encode($xml);
                // imprime os atributos do objeto criado

                if (empty($xml->protNFe->infProt->nProt)) {
                    echo json_encode("Arquivo sem dados de autorização.");
                    exit;
                }

                /*   $arquivo = fopen('xml.txt', 'w');
                if ($arquivo == false) {
                die('Não foi possível criar o arquivo.');
                }
                fwrite($arquivo, json_encode($xml));
                fclose($arquivo);
                echo file_get_contents( "xml.txt" ); */

                $dados->chave = $xml->NFe->infNFe->attributes()->Id;
                $dados->chave = strtr(strtoupper($dados->chave), array("NFE" => null));
                //===============================================================================================================================================
                //<ide>
                $dados->cUF = $xml->NFe->infNFe->ide->cUF; //<cUF>41</cUF>  C�digo do Estado do Fator gerador
                $dados->cNF = $xml->NFe->infNFe->ide->cNF; //<cNF>21284519</cNF>   C�digo n�mero da nfe
                $dados->natOp = $xml->NFe->infNFe->ide->natOp; //<natOp>V E N D A</natOp>  Resumo da Natureza de opera��o
                $dados->indPag = $xml->NFe->infNFe->ide->indPag; //<indPag>2</indPag> 0 � pagamento � vista; 1 � pagamento � prazo; 2 - outros
                $dados->mod = $xml->NFe->infNFe->ide->mod; //<mod>55</mod> Modelo do documento Fiscal
                $dados->serie = $xml->NFe->infNFe->ide->serie; //<serie>2</serie>
                $dados->nNF = $xml->NFe->infNFe->ide->nNF; //<nNF>19685</nNF> N�mero da Nota Fiscal
                $dados->dEmi = $xml->NFe->infNFe->ide->dhEmi;
                $dados->dEmi = new DateTime($dados->dEmi);
                $dados->dEmi = $dados->dEmi->format('Y-m-d h:i:s'); //<dEmi>2011-09-06</dEmi> Data de emiss�o da Nota Fiscal
                if (isset($xml->NFe->infNFe->ide->dSaiEnt)) {
                    $dados->dSaiEnt = $xml->NFe->infNFe->ide->dSaiEnt; //<dSaiEnt>2011-09-06</dSaiEnt> Data de entrada ou saida da Nota Fiscal
                    $dados->dSaiEnt = new DateTime($dEmi);
                    $dados->dSaiEnt = $dEmi->format('d/m/Y h:i:s');
                }

                $dados->tpNF = $xml->NFe->infNFe->ide->tpNF; //<tpNF>1</tpNF>  0-entrada / 1-sa�da
                $dados->cMunFG = $xml->NFe->infNFe->ide->cMunFG; //<cMunFG>4106407</cMunFG> C�digo do municipio Tabela do IBGE
                $dados->tpImp = $xml->NFe->infNFe->ide->tpImp; //<tpImp>1</tpImp>
                $dados->tpEmis = $xml->NFe->infNFe->ide->tpEmis; //<tpEmis>1</tpEmis>
                $dados->cDV = $xml->NFe->infNFe->ide->cDV; //<cDV>0</cDV>
                $dados->tpAmb = $xml->NFe->infNFe->ide->tpAmb; //<tpAmb>1</tpAmb>
                if ($dados->tpAmb != 1) {
                    echo json_encode("Documento emitido em ambiente de homologação");
                    exit;
                }
                $dados->finNFe = $xml->NFe->infNFe->ide->finNFe; //<finNFe>1</finNFe>
                $dados->procEmi = $xml->NFe->infNFe->ide->procEmi; //<procEmi>0</procEmi>
                $dados->verProc = $xml->NFe->infNFe->ide->verProc; //<verProc>2.0.0</verProc>
                //</ide>
                $dados->xMotivo = $xml->protNFe->infProt->xMotivo;
                $dados->nProt = $xml->protNFe->infProt->nProt;

                //===============================================================================================================================================
                // <emit> Emitente
                $dados->emit_CPF = $xml->NFe->infNFe->emit->CPF;
                $dados->emit_CNPJ = $xml->NFe->infNFe->emit->CNPJ;
                $dados->emit_xNome = $xml->NFe->infNFe->emit->xNome;
                $dados->emit_xFant = $xml->NFe->infNFe->emit->xFant;
                //<enderEmit>
                $dados->emit_xLgr = $xml->NFe->infNFe->emit->enderEmit->xLgr; //<xLgr>AV. AGOSTINHO DUCCI , 409</xLgr>
                $dados->emit_nro = $xml->NFe->infNFe->emit->enderEmit->nro; //<nro>.</nro>
                $dados->emit_xBairro = $xml->NFe->infNFe->emit->enderEmit->xBairro; //<xBairro>PARQUE INDUSTRIAL</xBairro>
                $dados->emit_cMun = $xml->NFe->infNFe->emit->enderEmit->cMun; //<cMun>4106407</cMun>
                $dados->emit_xMun = $xml->NFe->infNFe->emit->enderEmit->xMun; //<xMun>CORNELIO PROCOPIO</xMun>
                $dados->emit_UF = $xml->NFe->infNFe->emit->enderEmit->UF; //<UF>PR</UF>
                $dados->emit_CEP = $xml->NFe->infNFe->emit->enderEmit->CEP; //<CEP>86300000</CEP>
                $dados->emit_cPais = $xml->NFe->infNFe->emit->enderEmit->cPais; //<cPais>1058</cPais>
                $dados->emit_xPais = $xml->NFe->infNFe->emit->enderEmit->xPais; //<xPais>BRASIL</xPais>
                $dados->emit_fone = $xml->NFe->infNFe->emit->enderEmit->fone; //<fone>4335242165</fone>
                //</enderEmit>
                $dados->emit_IE = $xml->NFe->infNFe->emit->IE; //<IE>9014134104</IE>
                $dados->emit_IM = $xml->NFe->infNFe->emit->IM; //<IM>8636</IM>
                $dados->emit_CNAE = $xml->NFe->infNFe->emit->CNAE; //<CNAE>4789099</CNAE>
                $dados->emit_CRT = $xml->NFe->infNFe->emit->CRT; //<CRT>3</CRT>
                //</emit>
                //===============================================================================================================================================
                //<dest>
                $dados->dest_cnpj = $xml->NFe->infNFe->dest->CNPJ; //<CNPJ>01153928000179</CNPJ>
                //<CPF></CPF>
                $dados->dest_xNome = $xml->NFe->infNFe->dest->xNome; //<xNome>AGROVENETO S.A.- INDUSTRIA DE ALIMENTOS  -002825</xNome>

                //***********************************************************************************************************************************************

                //<enderDest>
                $dados->dest_xLgr = $xml->NFe->infNFe->dest->enderDest->xLgr; //<xLgr>ALFREDO PESSI, 2.000</xLgr>
                $dados->dest_nro = $xml->NFe->infNFe->dest->enderDest->nro; //<nro>.</nro>
                $dados->dest_xBairro = $xml->NFe->infNFe->dest->enderDest->xBairro; //<xBairro>PARQUE INDUSTRIAL</xBairro>
                $dados->dest_cMun = $xml->NFe->infNFe->dest->enderDest->cMun; //<cMun>4211603</cMun>
                $dados->dest_xMun = $xml->NFe->infNFe->dest->enderDest->xMun; //<xMun>NOVA VENEZA</xMun>
                $dados->dest_UF = $xml->NFe->infNFe->dest->enderDest->UF; //<UF>SC</UF>
                $dados->dest_CEP = $xml->NFe->infNFe->dest->enderDest->CEP; //<CEP>88865000</CEP>
                $dados->dest_cPais = $xml->NFe->infNFe->dest->enderDest->cPais; //<cPais>1058</cPais>
                $dados->dest_xPais = $xml->NFe->infNFe->dest->enderDest->xPais; //<xPais>BRASIL</xPais>
                //</enderDest>
                $dados->dest_IE = $xml->NFe->infNFe->dest->IE; //<IE>253323029</IE>
                //</dest>
                //===============================================================================================================================================
                //Totais
                /*
                <total>
                <ICMSTot>
                <vBC>0.00</vBC>
                <vICMS>0.00</vICMS>
                <vBCST>0.00</vBCST>
                <vST>0.00</vST>
                <vProd>555.00</vProd>
                <vFrete>0.00</vFrete>
                <vSeg>0.00</vSeg>
                <vDesc>0.00</vDesc>
                <vII>0.00</vII>
                <vIPI>0.00</vIPI>
                <vPIS>3.62</vPIS>
                <vCOFINS>16.66</vCOFINS>
                <vOutro>0.00</vOutro>
                <vNF>555.00</vNF>
                </ICMSTot>
                </total>
                 */

                $dados->vBC = $xml->NFe->infNFe->total->ICMSTot->vBC;
                $dados->vBC = number_format((double) $dados->vBC, 2, ",", ".");
                $dados->vICMS = $xml->NFe->infNFe->total->ICMSTot->vICMS;
                $dados->vICMS = number_format((double) $dados->vICMS, 2, ",", ".");
                $dados->vBCST = $xml->NFe->infNFe->total->ICMSTot->vBCST;
                $dados->vBCST = number_format((double) $dados->vBCST, 2, ",", ".");
                $dados->vST = $xml->NFe->infNFe->total->ICMSTot->vST;
                $dados->vST = number_format((double) $dados->vST, 2, ",", ".");
                $dados->vProd = $xml->NFe->infNFe->total->ICMSTot->vProd;
                $dados->vProd = number_format((double) $dados->vProd, 2, ",", ".");
                $dados->vNF = $xml->NFe->infNFe->total->ICMSTot->vNF;
                $dados->vNF = number_format((double) $dados->vNF, 2, ",", ".");
                $dados->vFrete = number_format((double) $xml->NFe->infNFe->total->ICMSTot->vFrete, 2, ",", ".");
                $dados->vSeg = number_format((double) $xml->NFe->infNFe->total->ICMSTot->vSeg, 2, ",", ".");
                $dados->vDesc = number_format((double) $xml->NFe->infNFe->total->ICMSTot->vDesc, 2, ",", ".");
                $dados->vIPI = number_format((double) $xml->NFe->infNFe->total->ICMSTot->vIPI, 2, ",", ".");

                $id = 0;
                $contador = 0;
                if (!empty($xml->NFe->infNFe->cobr->dup)) {
                    $dados->duplicatas = array();
                    foreach ($xml->NFe->infNFe->cobr->dup as $dup) {
                        $duplicatas[$contador] = new stdClass();
                        $id++;
                        $duplicatas[$contador]->titulo = $dup->nDup;
                        $duplicatas[$contador]->vencimento = $dup->dVenc;
                        $duplicatas[$contador]->vencimento = explode('-', $duplicatas[$contador]->vencimento);
                        $duplicatas[$contador]->vencimento = $duplicatas[$contador]->vencimento[2] . "/" . $duplicatas[$contador]->vencimento[1] . "/" . $duplicatas[$contador]->vencimento[0];
                        $duplicatas[$contador]->vlr_parcela = number_format((double) $dup->vDup, 2, ",", ".");
                        if ($id % 2 == 0) {
                            $class = "class='cor2'";
                        } else {
                            $class = "class='cor1'";
                        }

                    }
                }

                //===============================================================================================================================================
                //Dados dos itens

                $seq = 0;
                $dados->produtos = array();
                foreach ($xml->NFe->infNFe->det as $item) {

                    $seq++;
                    $produto = new stdClass();
                    $produto = new stdClass();
                    $produto->codigo = $item->prod->cProd;
                    $produto->xProd = $item->prod->xProd;
                    $produto->NCM = $item->prod->NCM;
                    $produto->CFOP = $item->prod->CFOP;
                    $produto->uCom = $item->prod->uCom;
                    $produto->qCom = $item->prod->qCom;
                    $produto->qCom = number_format((double) $produto->qCom, 2, ",", ".");
                    $produto->vUnCom = $item->prod->vUnCom;
                    $produto->vUnCom = number_format((double) $produto->vUnCom, 2, ",", ".");
                    $produto->vProd = $item->prod->vProd;
                    $produto->vProd = number_format((double) $produto->vProd, 2, ",", ".");
                    $vBC_item = $item->imposto->ICMS->ICMS00->vBC;
                    $produto->icms00 = $item->imposto->ICMS->ICMS00;
                    $produto->icms10 = $item->imposto->ICMS->ICMS10;
                    $produto->icms20 = $item->imposto->ICMS->ICMS20;
                    $produto->icms30 = $item->imposto->ICMS->ICMS30;
                    $produto->icms40 = $item->imposto->ICMS->ICMS40;
                    $produto->icms50 = $item->imposto->ICMS->ICMS50;
                    $produto->icms51 = $item->imposto->ICMS->ICMS51;
                    $produto->icms60 = $item->imposto->ICMS->ICMS60;
                    $produto->ICMSSN102 = $item->imposto->ICMS->ICMSSN102;
                    if (!empty($produto->ICMSSN102)) {
                        $produto->bc_icms = "0.00";
                        $produto->pICMS = "0	";
                        $produto->vlr_icms = "0.00";
                    }

                    if (!empty($produto->icms00)) {
                        $produto->bc_icms = $item->imposto->ICMS->ICMS00->vBC;
                        $produto->bc_icms = number_format((double) $produto->bc_icms, 2, ",", ".");
                        $produto->pICMS = $item->imposto->ICMS->ICMS00->pICMS;
                        $produto->pICMS = round($produto->pICMS, 0);
                        $produto->vlr_icms = $item->imposto->ICMS->ICMS00->vICMS;
                        $produto->vlr_icms = number_format((double) $produto->vlr_icms, 2, ",", ".");
                    }
                    if (!empty($produto->icms20)) {
                        $produto->bc_icms = $item->imposto->ICMS->ICMS20->vBC;
                        $produto->bc_icms = number_format((double) $produto->bc_icms, 2, ",", ".");
                        $produto->pICMS = $item->imposto->ICMS->ICMS20->pICMS;
                        $produto->pICMS = round($pICMS, 0);
                        $produto->vlr_icms = $item->imposto->ICMS->ICMS20->vICMS;
                        $produto->vlr_icms = number_format((double) $produto->vlr_icms, 2, ",", ".");
                    }
                    if (!empty($produto->icms30)) {
                        $produto->bc_icms = "0.00";
                        $produto->pICMS = "0	";
                        $produto->vlr_icms = "0.00";
                    }
                    if (!empty($produto->icms40)) {
                        $produto->bc_icms = "0.00";
                        $produto->pICMS = "0	";
                        $produto->vlr_icms = "0.00";
                    }
                    if (!empty($produto->icms50)) {
                        $produto->bc_icms = "0.00";
                        $produto->pICMS = "0	";
                        $produto->vlr_icms = "0.00";
                    }
                    if (!empty($produto->icms51)) {
                        $produto->bc_icms = $item->imposto->ICMS->ICMS51->vBC;
                        $produto->pICMS = $item->imposto->ICMS->ICMS51->pICMS;
                        $produto->pICMS = round($pICMS, 0);
                        $produto->vlr_icms = $item->imposto->ICMS->ICMS51->vICMS;
                    }
                    if (!empty($produto->icms60)) {
                        $produto->bc_icms = "0,00";
                        $produto->pICMS = "0	";
                        $produto->vlr_icms = "0,00";
                    }
                    $produto->IPITrib = $item->imposto->IPI->IPITrib;
                    if (!empty($produto->IPITrib)) {
                        $produto->bc_ipi = $item->imposto->IPI->IPITrib->vBC;
                        $produto->bc_ipi = number_format((double) $produto->bc_ipi, 2, ",", ".");
                        $produto->perc_ipi = $item->imposto->IPI->IPITrib->pIPI;
                        $produto->perc_ipi = round($produto->perc_ipi, 0);
                        $produto->vlr_ipi = $item->imposto->IPI->IPITrib->vIPI;
                        $produto->vlr_ipi = number_format((double) $produto->vlr_ipi, 2, ",", ".");
                    }
                    $IPINT = $item->imposto->IPI->IPINT;{
                        $produto->bc_ipi = "0,00";
                        $produto->perc_ipi = "0";
                        $produto->vlr_ipi = "0,00";
                    }

                    $dados->produtos[] = $produto;
                }

                // transporte

                if (!empty($xml->NFe->infNFe->transp)) {
                    $dados->modFrete = $xml->NFe->infNFe->transp->modFrete;
                    $dados->transportadora_cnpj = $xml->NFe->infNFe->transp->transporta->CNPJ;
                    $dados->transportadora_nome = $xml->NFe->infNFe->transp->transporta->xNome;
                    $dados->transportadora_ie = $xml->NFe->infNFe->transp->transporta->IE;
                    $dados->transportadora_endereco = $xml->NFe->infNFe->transp->transporta->xEnder;
                    $dados->transportadora_cidade = $xml->NFe->infNFe->transp->transporta->xMun;
                    $dados->transportadora_uf = $xml->NFe->infNFe->transp->transporta->UF;
                    $dados->volume_quantidade = $xml->NFe->infNFe->transp->vol->qVol;
                    $dados->volume_esp = $xml->NFe->infNFe->transp->vol->esp;
                    $dados->volume_peso_liquido = $xml->NFe->infNFe->transp->vol->pesoL;
                    $dados->volume_peso_bruto = $xml->NFe->infNFe->transp->vol->pesoB;
                }

                //===============================================================================================================================================
                //Autoriza��o
                $dados->xMotivo = $xml->protNFe->infProt->xMotivo;
                $dados->nProt = $xml->protNFe->infProt->nProt;
            } else {
                echo json_encode("Não existe o arquivo com a chave " . $chave . " informada!");
            }

        }
        echo json_encode($dados);

    }
);

$app->get(
    '/getDadosCnpj/:cnpj',
    function ($cnpj) use ($app, $db) {
        $url = "https://www.receitaws.com.br/v1/cnpj/" . $cnpj;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        //   curl_setopt($ch, CURLOPT_POST, true);
        //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/saidaEstoquePedidoOnline',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $id_usuario = (isset($dados->id_usuario)) ? $dados->id_usuario : "";
        $id_empresa = (isset($dados->id_empresa)) ? $dados->id_empresa : "";

        $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getProdutoPedido/" . $id . "?idEmpresa=" . $id_empresa;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        //   curl_setopt($ch, CURLOPT_POST, true);
        //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);

        foreach ($list->list as $item) {
            $item->listAdicional = $item->adicional;
            $item->id_usuario = $id_usuario;
            $item->id_empresa = $id_empresa;
            $item->origem_pedido = "app";
            $item->id_pedido = $id;
            movimentacaoEstoqueSaida($item, $db, 'saida');
        }
    }
);

$app->get(
    '/getProdutoIagem/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto_imagem where id_produto = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getEtapasKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $usuario = (isset($data->usuario_busca)) ? $data->usuario_busca : "";
        $consulta = $db->con()->prepare("SELECT * from etapa_kds where
        usuario = :usuario or descricao = 'aguardando' order by ordem");
        $consulta->bindValue(':usuario', $usuario);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO etapa_kds (descricao, ordem, tempo_duracao,usuario)
            VALUES (:descricao, :ordem, :tempo_duracao,:usuario)");

            $consulta->bindValue(':descricao', 'aguardando');
            $consulta->bindValue(':ordem', '0');
            $consulta->bindValue(':tempo_duracao', '0');
            $consulta->bindValue(':usuario', $usuario);
            $consulta->execute();
            $consulta = $db->con()->prepare("SELECT * from etapa_kds where
        usuario = :usuario or descricao = 'aguardando' order by ordem");
            $consulta->bindValue(':usuario', $usuario);
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        echo json_encode($list);
    }
);

$app->post(
    '/getEtapasCadastroKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $usuario = (isset($data->usuario_busca)) ? $data->usuario_busca : "";

        $consulta = $db->con()->prepare("SELECT * from etapa_kds where
        descricao = 'aguardando' order by ordem");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO etapa_kds (descricao, ordem, tempo_duracao,usuario)
            VALUES (:descricao, :ordem, :tempo_duracao,:usuario)");

            $consulta->bindValue(':descricao', 'aguardando');
            $consulta->bindValue(':ordem', '0');
            $consulta->bindValue(':tempo_duracao', '0');
            $consulta->bindValue(':usuario', '');
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT * from etapa_kds order by ordem");
        $consulta->execute();
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getTamanhoListaEtapaKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $consulta = $db->con()->prepare("SELECT COUNT(id) as quantidade from pedido_produto where
        etapa_kds = :descricao");
        $consulta->bindValue(':descricao', $descricao);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/atualizarResponsavel',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $responsavel_pedido = (isset($data->responsavel_pedido)) ? $data->responsavel_pedido : "";
        $consulta = $db->con()->prepare("UPDATE pedido set responsavel_pedido = :responsavel_pedido
        where id = :id");
        $consulta->bindValue(':responsavel_pedido', $responsavel_pedido);
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/alterarOrdemKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);

        foreach ($lista as $item) {
            $id = $item['id'];
            $ordem_lista_kds = $item['ordem_lista_kds'];
            $consulta = $db->con()->prepare("UPDATE pedido_produto SET
        ordem_lista_kds = :ordem_lista_kds where id = :id");
            $consulta->bindValue(':ordem_lista_kds', $ordem_lista_kds);
            $consulta->bindValue(':id', $id);
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/copiarProdutoV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $banco = $db->param;

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'produto'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto where id = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);
        $sql = "INSERT INTO produto (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list[0] as $key => $value) {
            if ($key != "id") {
                $consulta->bindValue(':' . $key, $value);
            }
        }
        $consulta->execute();
        $id_produto = $db->con()->lastInsertId();

        $consulta = $db->con()->prepare("UPDATE produto set valor = :valor, descricao = :descricao,
        nome = :nome where id = :id");
        $consulta->bindValue(':valor', $valor);
        $consulta->bindValue(':descricao', $descricao);
        $consulta->bindValue(':nome', $nome);
        $consulta->bindValue(':id', $id_produto);
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'adicional_produto'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from adicional_produto where id_produto = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);

        $sql = "INSERT INTO adicional_produto (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list as $item) {
            foreach ($item as $key => $value) {
                if ($key != "id" && $key != 'id_produto') {
                    $consulta->bindValue(':' . $key, $value);
                }
            }
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'sabor'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from sabor where id_produto = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);

        $sql = "INSERT INTO sabor (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list as $item) {
            foreach ($item as $key => $value) {
                if ($key != "id" && $key != 'id_produto') {
                    $consulta->bindValue(':' . $key, $value);
                }
            }
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'produto_fiscal'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto_fiscal where id_produto = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);

        $sql = "INSERT INTO produto_fiscal (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list as $item) {
            foreach ($item as $key => $value) {
                if ($key != "id" && $key != 'id_produto') {
                    $consulta->bindValue(':' . $key, $value);
                }
            }
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'produto_imagem'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto_imagem where id_produto = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);

        $sql = "INSERT INTO produto_imagem (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list as $item) {
            foreach ($item as $key => $value) {
                if ($key != "id" && $key != 'id_produto') {
                    $consulta->bindValue(':' . $key, $value);
                }
            }
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT *
        from information_schema.columns
       where table_schema = '$banco'
         and table_name = 'produtos_composicao'");
        $consulta->execute();
        $colunas = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produtos_composicao where id_produto = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_CLASS);

        $sql = "INSERT INTO produtos_composicao (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }
        $sql = $sql . ") VALUES (";
        $contador = 0;
        foreach ($colunas as $item) {
            if ($item['COLUMN_NAME'] != "id") {
                $sql = $sql . ":" . $item['COLUMN_NAME'];
            }
            $contador++;
            if ($contador < count($colunas) && $item['COLUMN_NAME'] != "id") {
                $sql = $sql . ",";
            }
        }

        $sql = $sql . ")";
        $consulta = $db->con()->prepare($sql);
        foreach ($list as $item) {
            foreach ($item as $key => $value) {
                if ($key != "id" && $key != 'id_produto') {
                    $consulta->bindValue(':' . $key, $value);
                }
            }
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/alterarOrdemSabor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        try {

            $db->con()->beginTransaction();
            foreach ($lista as $item) {
                $id = $item['id'];
                $numero = $item['numero'];
                $consulta = $db->con()->prepare("UPDATE sabor SET
        numero = :numero where id = :id");
                $consulta->bindValue(':numero', $numero);
                $consulta->bindValue(':id', $id);
                $consulta->execute();
            }
            $db->con()->commit();
            echo json_encode("ok");
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }

    }
);

$app->post(
    '/getConferenciaCaixa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT * from caixa_conferencia where id_caixa = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode($list);
    }
);

$app->post(
    '/salvarConferenciaCaixa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $datetime = date_create()->format('Y/m/d H:i:s');
        foreach ($lista as $item) {

            $consulta = $db->con()->prepare("INSERT INTO caixa_conferencia
        (id_caixa, forma_pagamento, valor_sistema, valor_conferido, valor_resultado, id_usuario, data_conferencia)
        VALUES
        (:id_caixa, :forma_pagamento, :valor_sistema, :valor_conferido, :valor_resultado, :id_usuario, :data_conferencia)");

            $consulta->bindValue(':id_caixa', $item['id_caixa']);
            $consulta->bindValue(':forma_pagamento', $item['forma_pagamento']);
            $consulta->bindValue(':valor_sistema', $item['valor_sistema']);
            $consulta->bindValue(':valor_conferido', $item['valor_conferido']);
            $consulta->bindValue(':valor_resultado', $item['valor_resultado']);
            $consulta->bindValue(':id_usuario', $item['id_usuario']);
            $consulta->bindValue(':data_conferencia', $datetime);
            $consulta->execute();
        }
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarContaBancaria',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $descricao = (isset($dados->descricao)) ? $dados->descricao : "";
        $agencia = (isset($dados->agencia)) ? $dados->agencia : "";
        $conta = (isset($dados->conta)) ? $dados->conta : "";
        $tipo = (isset($dados->tipo)) ? $dados->tipo : "";
        $banco = (isset($dados->banco)) ? $dados->banco : "";

            $consulta = $db->con()->prepare("INSERT INTO conta_banco
        (descricao, agencia, conta, tipo, banco)
        VALUES
        (:descricao, :agencia, :conta, :tipo, :banco)");

            $consulta->bindValue(':descricao', $descricao);
            $consulta->bindValue(':agencia', $agencia);
            $consulta->bindValue(':conta', $conta);
            $consulta->bindValue(':tipo', $tipo);
            $consulta->bindValue(':banco', $banco);
            $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/setAtivoContaBancaria',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $ativo = (isset($dados->ativo)) ? $dados->ativo : "";

            $consulta = $db->con()->prepare("UPDATE conta_banco set ativo = :ativo
            where id = :id");

            $consulta->bindValue(':ativo', $ativo);
            $consulta->bindValue(':id', $id);
            $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/cancelarTransferencia',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";


            $consulta = $db->con()->prepare("UPDATE transferencia_bancaria set cancelado = 'true'
            where id = :id");
            $consulta->bindValue(':id', $id);
            $consulta->execute();

            $consulta = $db->con()->prepare("DELETE from contas where id_transferencia_bancaria = :id");
            $consulta->bindValue(':id', $id);
            $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/salvarNovaTransferencia',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id_conta_origem = (isset($dados->id_conta_origem)) ? $dados->id_conta_origem : "";
        $id_conta_destino = (isset($dados->id_conta_destino)) ? $dados->id_conta_destino : "";
        $data_transferencia = (isset($dados->data_transferencia)) ? $dados->data_transferencia : "";
        $valor = (isset($dados->valor)) ? $dados->valor : "";
        $datetime = date_create()->format('Y/m/d H:i:s');

            $consulta = $db->con()->prepare("INSERT INTO transferencia_bancaria set id_conta_origem = :id_conta_origem,
            id_conta_destino = :id_conta_destino, data_transferencia = :data_transferencia, valor = :valor");

            $consulta->bindValue(':id_conta_origem', $id_conta_origem);
            $consulta->bindValue(':id_conta_destino', $id_conta_destino);
            $consulta->bindValue(':data_transferencia', $data_transferencia);
            $consulta->bindValue(':valor', $valor);
            $consulta->execute();
            $id_transferencia = $db->con()->lastInsertId();

            $consulta = $db->con()->prepare("INSERT INTO contas (descricao, data_vencimento, data_pagamento, valor_bruto, desconto, recorrente, tipo,
             data_criacao, valor_liquido, forma_pagamento, taxa_desconto, parcelas, numero_parcela, id_conta_banco, id_transferencia_bancaria)
            VALUES ('Transferência Bancária', :data_vencimento, :data_pagamento, :valor_bruto, 0, 'false',
             'despesa', :data_criacao, :valor_liquido, 'dinheiro', 0, 1, '1/1', :id_conta_banco,
             :id_transferencia_bancaria) ");
        $consulta->bindValue(':data_vencimento', $data_transferencia);
        $consulta->bindValue(':data_pagamento', $data_transferencia);
        $consulta->bindValue(':valor_bruto', $valor);
        $consulta->bindValue(':data_criacao', $datetime);
        $consulta->bindValue(':valor_liquido', $valor);
        $consulta->bindValue(':id_conta_banco', $id_conta_origem);
        $consulta->bindValue(':id_transferencia_bancaria', $id_transferencia);
        $consulta->execute();
        $id_conta1 = $db->con()->lastInsertId();

        $consulta = $db->con()->prepare("INSERT INTO contas (descricao, data_vencimento, data_pagamento, valor_bruto, desconto, recorrente, tipo,
             data_criacao, valor_liquido, forma_pagamento, taxa_desconto, parcelas, numero_parcela, id_conta_banco, id_transferencia_bancaria)
            VALUES ('Transferência Bancária', :data_vencimento, :data_pagamento, :valor_bruto, 0, 'false',
             'receita', :data_criacao, :valor_liquido, 'dinheiro', 0, 1, '1/1', :id_conta_banco,
             :id_transferencia_bancaria) ");
        $consulta->bindValue(':data_vencimento', $data_transferencia);
        $consulta->bindValue(':data_pagamento', $data_transferencia);
        $consulta->bindValue(':valor_bruto', $valor);
        $consulta->bindValue(':data_criacao', $datetime);
        $consulta->bindValue(':valor_liquido', $valor);
        $consulta->bindValue(':id_conta_banco', $id_conta_destino);
        $consulta->bindValue(':id_transferencia_bancaria', $id_transferencia);
        $consulta->execute();
        $id_conta2 = $db->con()->lastInsertId();

        $consulta = $db->con()->prepare("SELECT id from categoria_financeiro where
         descricao = 'TRANSFERÊNCIA BANCÁRIA'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if(count($list) == 0){
            $consulta = $db->con()->prepare("INSERT INTO categoria_financeiro (descricao)
             VALUES ('TRANSFERÊNCIA BANCÁRIA')");
           $consulta->execute();
           $id_categoria = $db->con()->lastInsertId();
        }else{
            $id_categoria = $list[0]['id'];
        }

        $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria) VALUES (:id_conta, :id_categoria) ");
        $consulta->bindValue(':id_conta', $id_conta1);
        $consulta->bindValue(':id_categoria', $id_categoria);
        $consulta->execute();

        $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria) VALUES (:id_conta, :id_categoria) ");
        $consulta->bindValue(':id_conta', $id_conta2);
        $consulta->bindValue(':id_categoria', $id_categoria);
        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/salvarEtapaKDS',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $descricao = (isset($dados->descricao)) ? $dados->descricao : "";
        $ordem = (isset($dados->ordem)) ? $dados->ordem : "";
        $tempo_duracao = (isset($dados->tempo_duracao)) ? $dados->tempo_duracao : "";
        $usuario = (isset($dados->usuario_salvar)) ? $dados->usuario_salvar : "";

        if ($id == "-1") {
            $consulta = $db->con()->prepare("INSERT INTO etapa_kds (descricao, ordem, tempo_duracao,usuario)
            VALUES (:descricao, :ordem, :tempo_duracao,:usuario)");
        } else {
            $consulta = $db->con()->prepare("UPDATE etapa_kds SET descricao = :descricao,
            ordem = :ordem, tempo_duracao = :tempo_duracao, usuario = :usuario where id = :id");
            $consulta->bindValue(':id', $id);
        }
        $consulta->bindValue(':descricao', $descricao);
        $consulta->bindValue(':ordem', $ordem);
        $consulta->bindValue(':tempo_duracao', $tempo_duracao);
        $consulta->bindValue(':usuario', $usuario);
        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/apgarEtapaKDS',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";

        $consulta = $db->con()->prepare("DELETE from etapa_kds where id = :id");
        $consulta->bindValue(':id', $id);

        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/setPedidoOnlineUsuario',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $tocar_imprimir_pedido_online = (isset($dados->tocar_imprimir_pedido_online)) ? $dados->tocar_imprimir_pedido_online : "";


        $consulta = $db->con()->prepare("UPDATE usuario set
        tocar_imprimir_pedido_online = :tocar_imprimir_pedido_online WHERE id = :id");
        $consulta->bindValue(':tocar_imprimir_pedido_online', $tocar_imprimir_pedido_online);
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarEtapaPedidoProdutoKDS',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $etapa_kds = (isset($dados->etapa_kds)) ? $dados->etapa_kds : "";
        $ordem_kds = (isset($dados->ordem_kds)) ? $dados->ordem_kds : "";
        $ordem_lista_kds = (isset($dados->ordem_lista_kds)) ? $dados->ordem_lista_kds : "";
        $tempo_producao = new StdClass();
        $datetime = date_create()->format('Y/m/d H:i:s');

        $consulta = $db->con()->prepare("UPDATE pedido_produto SET
        etapa_kds = :etapa_kds, ordem_kds = :ordem_kds, ordem_lista_kds = :ordem_lista_kds,
        " . "data_etapa_kds_" . $ordem_kds . " = :data_etapa_kds_ WHERE id = :id");
        $consulta->bindValue(':etapa_kds', $etapa_kds);
        $consulta->bindValue(':ordem_kds', $ordem_kds);
        $consulta->bindValue(':ordem_lista_kds', $ordem_lista_kds);
        $consulta->bindValue(':data_etapa_kds_', $datetime);
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarTelaPrincipalUsuario',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $tela_principal = (isset($dados->tela_principal)) ? $dados->tela_principal : "";

        $consulta = $db->con()->prepare("UPDATE usuario SET tela_principal = :tela_principal
         WHERE id = :id");
        $consulta->bindValue(':tela_principal', $tela_principal);
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/aguardandoEntregaEtapaPedidoProdutoListaKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $ordem_kds = (isset($data->ordem_kds)) ? $data->ordem_kds : "";
        $datetime = date_create()->format('Y/m/d H:i:s');

        foreach ($lista as $item) {
            $consulta = $db->con()->prepare("UPDATE pedido_produto SET
            etapa_kds = :etapa_kds, ordem_kds = :ordem_kds, ordem_lista_kds = :ordem_lista_kds,
            data_concluido_producao_kds = :data_concluido_producao_kds WHERE id = :id");
            $consulta->bindValue(':etapa_kds', $item['etapa_kds']);
            $consulta->bindValue(':ordem_kds', $item['ordem_kds']);
            $consulta->bindValue(':ordem_lista_kds', $item['ordem_lista_kds']);
            $consulta->bindValue(':data_concluido_producao_kds', $datetime);
            $consulta->bindValue(':id', $item['id']);
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/concluirEtapaKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $ordem_kds = (isset($data->ordem_kds)) ? $data->ordem_kds : "";
        $datetime = date_create()->format('Y/m/d H:i:s');

        foreach ($lista as $item) {
            $consulta = $db->con()->prepare("UPDATE pedido_produto SET
            etapa_kds = :etapa_kds, ordem_kds = :ordem_kds, ordem_lista_kds = :ordem_lista_kds,
            data_entrega_kds = :data_entrega_kds WHERE id = :id");
            $consulta->bindValue(':etapa_kds', $item['etapa_kds']);
            $consulta->bindValue(':ordem_kds', $item['ordem_kds']);
            $consulta->bindValue(':ordem_lista_kds', $item['ordem_lista_kds']);
            $consulta->bindValue(':data_entrega_kds', $datetime);
            $consulta->bindValue(':id', $item['id']);
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarEtapaPedidoProdutoListaKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $ordem_kds = (isset($data->ordem_kds)) ? $data->ordem_kds : "";
        $datetime = date_create()->format('Y/m/d H:i:s');

        foreach ($lista as $item) {
            $consulta = $db->con()->prepare("UPDATE pedido_produto SET
            etapa_kds = :etapa_kds, ordem_kds = :ordem_kds, ordem_lista_kds = :ordem_lista_kds,
            " . "data_etapa_kds_" . $ordem_kds . " = :data_etapa_kds_ WHERE id = :id");
            $consulta->bindValue(':etapa_kds', $item['etapa_kds']);
            $consulta->bindValue(':ordem_kds', $item['ordem_kds']);
            $consulta->bindValue(':ordem_lista_kds', $item['ordem_lista_kds']);
            $consulta->bindValue(':data_etapa_kds_', $datetime);
            $consulta->bindValue(':id', $item['id']);
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/getProdutosKDS',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";

        $consulta = $db->con()->prepare("SELECT produto.nome, pedido_produto.quantidade, pedido_produto.etapa_kds,
        pedido.retira_local, pedido.id as id_pedido, delivery, pedido.nome_mesa, pedido.nome_mesa2,
        pedido_produto.ordem_kds, pedido_produto.ordem_lista_kds, pedido_produto.observacao, pedido_produto.data_etapa_kds_1,
        pedido_produto.data_etapa_kds_2, pedido_produto.data_etapa_kds_3, pedido.data_pedido,
        pedido_produto.data_concluido_producao_kds, pedido.tipo,
        pedido_produto.valor_total, pedido_produto.id, pedido_produto.sequencia, pedido_produto.id_pedido,
        pedido_produto.id_produto from pedido_produto inner join
        produto on pedido_produto.id_produto = produto.id
        inner join pedido on pedido_produto.id_pedido = pedido.id where data_cadastro >= :data_abertura and
        produto.tipo_produto = 'PA'
        and (pedido.status = 'Visualizado' or (pedido.status = 'Orçamento' and
        pedido.delivery <> true and pedido.delivery <> 'true'))
        order by ordem_lista_kds, data_cadastro ");
        $consulta->bindValue(':data_abertura', $data_abertura);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id_produto'];
            $id_pedido = $item['id_pedido'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional_produto_pedido.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
        adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
        from adicional, produto, pedido, adicional_produto_pedido where
        adicional_produto_pedido.id_adicional = adicional.id and
        adicional_produto_pedido.id_produto = produto.id and
        adicional_produto_pedido.id_pedido = pedido.id and
        adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id_pedido' and
        adicional_produto_pedido.sequencia = '$sequencia_produto'
        ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }
        echo json_encode($list);
    }
);

$app->post(
    '/getProdutosFornecedores',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";

        $consulta = $db->con()->prepare("SELECT produto.*, produto_fornecedor.id as id_produto_fornecedor, produto.id as id_produto_certo, produto_fornecedor.* from produto
        left join produto_fornecedor on produto_fornecedor.id_produto = produto.id and  produto_fornecedor.id_fornecedor = '$id'
        left join fornecedor on produto_fornecedor.id_fornecedor = fornecedor.id
        where produto.cancelado = 'false' and produto.disponivel = 'true'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getListaTransferenciaBancaria',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());


        $consulta = $db->con()->prepare("SELECT tb.id, cb_origem.descricao AS banco_origem, cb_destino.descricao AS banco_destino, tb.data_transferencia, tb.valor
        FROM transferencia_bancaria as tb
        INNER JOIN conta_banco as cb_origem ON cb_origem.id  = tb.id_conta_origem
        INNER JOIN conta_banco as cb_destino ON cb_destino.id = tb.id_conta_destino
        where cancelado = 'false'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode($list);
    }
);


$app->post(
    '/getContasBancarias',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("SELECT * from conta_banco ORDER BY ativo DESC");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if(count($list) == 0){
            $consulta = $db->con()->prepare("INSERT INTO conta_banco (descricao, ativo) VALUES ('Dinheiro', 'true')");
            $consulta->execute();

            $consulta = $db->con()->prepare("SELECT * from conta_banco ORDER BY ativo DESC");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }

        echo json_encode($list);
    }
);

$app->post(
    '/salvarIdPixel',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id_pixel = (isset($dados->id_pixel)) ? $dados->id_pixel : "";
        $codigo_analytcs = (isset($dados->codigo_analytcs)) ? $dados->codigo_analytcs : "";

        $consulta = $db->con()->prepare("UPDATE parametro set id_pixel = '$id_pixel',
        codigo_analytcs = '$codigo_analytcs'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarParametrosPDV',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $emitir_nfce_automatico_pdv = (isset($dados->emitir_nfce_automatico_pdv)) ? $dados->emitir_nfce_automatico_pdv : "";
        $imprimir_danfe_automatico_pdv = (isset($dados->imprimir_danfe_automatico_pdv)) ? $dados->imprimir_danfe_automatico_pdv : "";

        $consulta = $db->con()->prepare("UPDATE parametro set emitir_nfce_automatico_pdv = '$emitir_nfce_automatico_pdv',
        imprimir_danfe_automatico_pdv = '$imprimir_danfe_automatico_pdv'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarDataInicioFinanceiro',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $data_inicio_financeiro = (isset($dados->data_inicio_financeiro)) ? $dados->data_inicio_financeiro : "";

        $consulta = $db->con()->prepare("UPDATE parametro set data_inicio_financeiro = '$data_inicio_financeiro'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/getTodosProdutoFiscal',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("SELECT produto_fiscal.*, produto.nome,
        categoria_produto.descricao as categoria from
        produto_fiscal inner join produto on produto_fiscal.id_produto = produto.id
        left join categoria_produto on produto.id_categoria = categoria_produto.id
        where disponivel = 'true' and cancelado = 'false'
        order by produto.nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getTodosAdicionalFiscal',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("SELECT produto_fiscal.*, adicional.descricao as nome from
        produto_fiscal inner join adicional on produto_fiscal.id_adicional = adicional.id
        where ativo = 'true'
        order by adicional.descricao");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/atualizarProdutoFiscalMuitos',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $codigo_ncm = (isset($data->codigo_ncm)) ? $data->codigo_ncm : "";
        $cfop = (isset($data->cfop)) ? $data->cfop : "";
        $icms_origem = (isset($data->icms_origem)) ? $data->icms_origem : "";
        $icms_situacao_tributaria = (isset($data->icms_situacao_tributaria)) ? $data->icms_situacao_tributaria : "";
        $cest = (isset($data->cest)) ? $data->cest : "";
        $pis = (isset($data->pis)) ? $data->pis : "";
        $cofins = (isset($data->cofins)) ? $data->cofins : "";
        $lista = json_decode(json_encode($data->lista), true);

        foreach ($lista as $item) {
            $id = $item['id'];
            $consulta = $db->con()->prepare("UPDATE produto_fiscal SET
        codigo_ncm = '$codigo_ncm', cfop = '$cfop', icms_origem = '$icms_origem',
        icms_situacao_tributaria = '$icms_situacao_tributaria', cest = '$cest',
        pis = '$pis', cofins = '$cofins'
        where id = '$id'");
            $consulta->execute();
        }

        echo json_encode($codigo_ncm);
    }
);

$app->post(
    '/apagarMovimentoEstoquePedidoApp',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";

        $consulta = $db->con()->prepare("DELETE from movimentacao_estoque where
        id_pedido = '$id' and origem_pedido = 'app'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/getProdutosFornecedoresTelaXml',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";

        $consulta = $db->con()->prepare("SELECT produto.*, produto_fornecedor.id as id_produto_fornecedor, produto.id as id_produto_certo, produto_fornecedor.* from produto
        left join produto_fornecedor on produto_fornecedor.id_produto = produto.id and  produto_fornecedor.id_fornecedor = '$id'
        left join fornecedor on produto_fornecedor.id_fornecedor = fornecedor.id
        where produto.cancelado = 'false' and produto.disponivel = 'true' and produto_fornecedor.codigo is not null and produto_fornecedor.codigo <> '' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/duplicarAdicionais',
    function () use ($app, $db) {
        $consulta = $db->con()->prepare("select * from
       adicional where id_empresa = '28'
       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        foreach ($list as $item) {
            $descricao = "1/2 " . $item['descricao'];
            $texto = $item['texto'];
            $valor = round(floatval($item['valor']) / 2, 2);
            $consulta = $db->con()->prepare("INSERT INTO adicional (valor, descricao, id_empresa, texto)
        VALUES('$valor', '$descricao', 28,  '$texto')");
            $consulta->execute();
        }
    }
);

function addProdutoPedidoAgrupar($row, $array)
{
    $existe = false;
    foreach ($array as $item) {
        if ($item['nome'] == $row['nome'] && $row['observacao_produto'] == "" && count($row['adicional']) == 0) {
            $existe = true;
            $item['valor_total'] += floatval($row['valor_total']);
            $item['quantidade'] += floatval($row['quantidade']);
        }
    }

    if ($existe == false) {

        $array[] = $row;
    }
}

$GLOBALS['nomeFonte'] = "Courier New";
$GLOBALS['fontNormal'] = 800;
$GLOBALS['fontBold'] = 600;
$app->post(
    '/imprimirPedido',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $tipo = (isset($dados->tipo)) ? $dados->tipo : "";
        $id_empresa = (isset($dados->id_empresa)) ? $dados->id_empresa : "";
        $modelo = (isset($dados->modelo)) ? $dados->modelo : "";
        $impressora = (isset($dados->impressora)) ? $dados->impressora : "";
        $tamanho_papel = (isset($dados->tamanho_papel)) ? $dados->tamanho_papel : "";
        $imprimirCabecalho = (isset($dados->imprimirCabecalho)) ? $dados->imprimirCabecalho : "";

        
    

        $impressaoProducao = array();
        if ($modelo == "online" || $tipo == "app") {
            $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getDadosImpressao/" . $id . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $list = json_decode($output);

            $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getParcialPedido/" . $id . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $listaFormas = json_decode($output);
            $listaFormas = $listaFormas->list;

            $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getEmpresaSimples/" . $id_empresa . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $dadosEmpresa = json_decode($output);
            $dadosEmpresa = $dadosEmpresa->list;

            $url = "https://www.onesolucoes.com.br/beta/api/index.php/" . "getParametro/" . $id_empresa . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $parametro = json_decode($output, true);
            $parametro = $parametro['list'];

            
            

        } else {
            $consulta = $db->con()->prepare("SELECT * from empresa");
            $consulta->execute();
            $dadosEmpresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'");
            $consulta->execute();
            $listaFormas = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("SELECT pedido.data_pedido, pedido.numero_pedido, pedido.cpf,
         cliente.nome as cliente_nome, pedido.desconto, empresa.nome as empresa, pedido.senha_atendimento as senha_atendimento_pedido,
         pedido.endereco, pedido.numero, pedido.complemento, pedido.bairro, pedido.nome_mesa, pedido.nome_mesa2,
         pedido.forma_pagamento, pedido.troco, pedido.retira_local, pedido.tipo, pedido.consumacao, pedido.data_agendamento,
         pedido.taxa_entrega, pedido.valor_total, pedido.observacao, pedido.porcentagem_garcom, pedido.entrada,
         produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem, pedido.porcentagem_garcom_pago,
         pedido_produto.observacao as observacao_produto, pedido.referencia, cliente.telefone, pedido_produto.senha_atendimento,
         pedido_produto.valor_produto as valor, pedido_produto.quantidade, pedido.data_finalizacao, produto.ordem,
         pedido.delivery, embalar_viagem
         from pedido left join cliente on pedido.id_cliente = cliente.id,
         pedido_produto,  empresa, categoria_produto,
         produto where pedido.id_empresa = empresa.id and
         pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id and
         produto.id_categoria = categoria_produto.id
         and pedido_produto.id_pedido = '$id'    order by  produto.ordem, pedido_produto.data_cadastro,categoria_produto.ordem

         ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i = 0;
            foreach ($list as $item) {
                $id_produto = $item['id'];
                $sequencia_produto = $item['sequencia'];
                $consulta = $db->con()->prepare("SELECT adicional.descricao,
     adicional_produto_pedido.valor_adicional as valor, adicional_produto_pedido.quantidade as quantidade,
     adicional_produto_pedido.texto_observacao
     from adicional, produto, pedido, adicional_produto_pedido where
     adicional_produto_pedido.id_adicional = adicional.id and
     adicional_produto_pedido.id_produto = produto.id and
     adicional_produto_pedido.id_pedido = pedido.id and
     adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
     adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem, adicional_produto_pedido.ordem_adicionado
     ");
                $consulta->execute();
                $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $i++;
            }

            $consulta = $db->con()->prepare("SELECT * from parametro");
            $consulta->execute();
            $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);


        }

        

        if ($modelo == "online" || $tipo == "app") {
            $data = $list[0]->data_pedido;
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $id;
            $empresa = $list[0]->empresa;
            $tipo_pedido = $list[0]->origem_pedido;
            $nome = $list[0]->cliente_nome;
            $consumacao = 0;
            $entrada = 0;
            $nome = $list[0]->cliente_nome;
            $nome_mesa = $list[0]->nome_mesa;
            $nome_mesa2 = $list[0]->nome_mesa2;
            $telefone = $list[0]->telefone;
            $retira_local = $list[0]->retira_local;
            $endereco = $list[0]->endereco;
            $endereco = sanitizeString($endereco);
            $numero = $list[0]->numero;
            $complemento = $list[0]->complemento;
            $bairro = $list[0]->bairro;
            $bairro = sanitizeString($bairro);
            $forma_pagamento = $list[0]->forma_pagamento;
            $forma_pagamento = sanitizeString($forma_pagamento);
            $troco = $list[0]->troco;
            $referencia = $list[0]->referencia;
            $desconto = $list[0]->desconto;
            $desconto_texto = asDollars($desconto);
            $taxa_entrega = $list[0]->taxa_entrega;
            $taxa_entrega = asDollars($taxa_entrega);
            $valor_total = $list[0]->valor_total;
            $observacao = $list[0]->observacao;
            $porcentagem_garcom = $list[0]->porcentagem_garcom;
            $porcentagem_garcom_pago = $list[0]->porcentagem_garcom_pago;
            $observacao = sanitizeString($observacao);
            $senha_atendimento_pedido = "";
            $fidelidade_fisico = $list[0]->fidelidade_fisico;
            $ifood = $list[0]->ifood;
            $nome_empresa = $dadosEmpresa[0]->nome;
            $nome_empresa = utf8_decode($nome_empresa);
            $cnpj_empresa = $dadosEmpresa[0]->cnpj;
            $telefone_empresa = $dadosEmpresa[0]->fone;
            $endereco_empresa = utf8_decode($dadosEmpresa[0]->endereco) . ' ' . $dadosEmpresa[0]->numero . ' ' . utf8_decode($dadosEmpresa[0]->bairro) . ' ' . utf8_decode($dadosEmpresa[0]->cidade) . ' - ' . $dadosEmpresa[0]->estado;
            $localizador_ifood = $list[0]->localizador_ifood;
            $data_agendamento = $list[0]->data_agendamento;
            $shortReference = $list[0]->shortReference;
            $cpf = $list[0]->cpf;
            $data_finalizacao = $list[0]->data_finalizacao;
            $ordem = $list[0]->ordem;
            $delivery = $list[0]->delivery;
            $embalar_viagem = false;
        } else {
            $data = $list[0]['data_pedido'];
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $id;
            $tipo_pedido = $list[0]['tipo'];
            $consumacao = $list[0]['consumacao'];
            $entrada = $list[0]['entrada'];
            $nome = $list[0]['cliente_nome'];
            $nome_mesa = $list[0]['nome_mesa'];
            $nome_mesa2 = $list[0]['nome_mesa2'];
            $empresa = $list[0]['empresa'];
            $telefone = $list[0]['telefone'];
            $retira_local = $list[0]['retira_local'];
            $endereco = $list[0]['endereco'];
            $endereco = sanitizeString($endereco);
            $numero = $list[0]['numero'];
            $complemento = utf8_decode($list[0]['complemento']);
            $bairro = $list[0]['bairro'];
            $bairro = sanitizeString($bairro);
            $forma_pagamento = $list[0]['forma_pagamento'];
            $forma_pagamento = sanitizeString($forma_pagamento);
            $troco = $list[0]['troco'];
            $desconto = $list[0]['desconto'];
            $porcentagem_garcom = $list[0]['porcentagem_garcom'];
            $porcentagem_garcom_pago = $list[0]['porcentagem_garcom_pago'];
            $referencia = $list[0]['referencia'];
            $referencia = sanitizeString($referencia);
            $desconto_texto = asDollars($desconto);
            $taxa_entrega = $list[0]['taxa_entrega'];
            $taxa_entrega = asDollars($taxa_entrega);
            $valor_total = $list[0]['valor_total'];
            $observacao = $list[0]['observacao'];
            $observacao = sanitizeString($observacao);
            $senha_atendimento_pedido = $list[0]['senha_atendimento_pedido'];
            $fidelidade_fisico = "";
            $ifood = "false";
            $nome_empresa = $dadosEmpresa[0]['nome'];
            $nome_empresa = utf8_decode($nome_empresa);
            $cnpj_empresa = $dadosEmpresa[0]['cnpj'];
            $telefone_empresa = $dadosEmpresa[0]['fone'];
            $endereco_empresa = utf8_decode($dadosEmpresa[0]['endereco']) . ' ' . $dadosEmpresa[0]['numero'] . ' ' . utf8_decode($dadosEmpresa[0]['bairro']) . ' ' . utf8_decode($dadosEmpresa[0]['cidade']) . ' - ' . $dadosEmpresa[0]['estado'];
            $localizador_ifood = "";
            $data_agendamento = $list[0]['data_agendamento'];
            $shortReference = "";
            $cpf = $list[0]['cpf'];
            $data_finalizacao = $list[0]['data_finalizacao'];
            $ordem = $list[0]['ordem'];
            $delivery = $list[0]['delivery'];
            $embalar_viagem = $list[0]['embalar_viagem'];
        }

        if ($data_agendamento != "" && $data_agendamento != '0000-00-00 00:00:00') {
            $data_agendamento = date_create($data_agendamento);
            $data_agendamento = date_format($data_agendamento, "d/m/Y H:i:s");
        }

        $nome_impressora = $impressora;
        $espacoLinhas = 40;
        $GLOBALS['nomeFonte'] = $parametro[0]['impressao_fonte'];
        $GLOBALS['fontNormal'] = $parametro[0]['impressao_peso_fonte_segunda_coluna'];
        $GLOBALS['fontBold'] = $parametro[0]['impressao_peso_fonte_primeira_coluna'];

        $fonte = $parametro[0]['impressao_tamanho_fonte'];
        $segunda_fonte = 16;
        $primeira_posicao = 150;
        $segunda_posicao = $parametro[0]['impressao_segunda_posicao'];
        $terceira_posicao = $parametro[0]['impressao_terceira_posicao'];
        $quebra_linha = $parametro[0]['impressao_quebra_linha'];
        $posicao_centro = $quebra_linha + 5;
        $peso_fonte_produto = $parametro[0]['impressao_peso_fonte_produto'];
        $peso_fonte_adicional = $parametro[0]['impressao_peso_fonte_adicional'];
        $quebra_linha_produto = $parametro[0]['impressao_quebra_linha_produto'];

        $posicao = 25;
        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "text");
        printer_set_option($handle, PRINTER_SCALE, 75);
        printer_start_doc($handle, "Print");
        printer_start_page($handle);

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($espaco_vazio . "DOCUMENTO NÃO FISCAL"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Data:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "$data", $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        if ($data_finalizacao != "" && $data_finalizacao != '0000-00-00 00:00:00') {
            $data_finalizacao = date_create($data_finalizacao);
            $data_finalizacao = date_format($data_finalizacao, "d/m/Y H:i:s");
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Data Fech:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "$data_finalizacao", $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if ($data_agendamento != "" && $data_agendamento != '0000-00-00 00:00:00') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Data Agend:", 10, $posicao);
            printer_draw_text($handle, "$data_agendamento", $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if ($parametro[0]['imprimir_cabecalho_empresa'] == 'true') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Empresa:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($nome_empresa) > $quebra_linha) {
                $temp = str_split($nome_empresa, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, $nome_empresa, $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "CNPJ:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($cnpj_empresa) > $quebra_linha) {
                $temp = str_split($cnpj_empresa, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($cnpj_empresa), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Telefone:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($telefone_empresa), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte + 5, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
            //  $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            //   printer_select_font($handle, $font);
            if (strlen($endereco_empresa) > $quebra_linha) {
                $temp = str_split($endereco_empresa, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, $endereco_empresa, $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }

        if (isset($senha_atendimento_pedido) && $senha_atendimento_pedido != '') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "SENHA:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $senha_atendimento_pedido, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Pedido:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        if (strlen("$numero_pedido - $nome") > $quebra_linha) {
            $temp = str_split("$numero_pedido - $nome", $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, utf8_decode("$numero_pedido - $nome"), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if (isset($nome_mesa)) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Mesa:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($nome_mesa), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if (isset($nome_mesa2)) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Comanda:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($nome_mesa2), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if (isset($shortReference) && !empty($shortReference)) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "ID IFOOD:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $shortReference, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if (isset($cpf) && !empty($cpf)) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "CPF:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $cpf, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if ($tipo_pedido == 'app') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Origem:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if ($ifood == 'true') {
                printer_draw_text($handle, "IFOOD", $segunda_posicao, $posicao);
            } else {
                printer_draw_text($handle, "Aplicativo", $segunda_posicao, $posicao);
            }

            $posicao = $posicao + $espacoLinhas;
        }

        if($parametro[0]['imprimir_externo_interno'] == 'true'){
          $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Tipo:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);


            if ($delivery === 'true' || $delivery === true || $delivery === 1) {
                printer_draw_text($handle, "EXTERNO", $segunda_posicao, $posicao);
            } else {
                printer_draw_text($handle, "INTERNO", $segunda_posicao, $posicao);
            }
            $posicao = $posicao + $espacoLinhas;
        }

        if ($localizador_ifood != null && $localizador_ifood != '') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Localizador:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $localizador_ifood, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $endereco_temp = "";
        if ($telefone != null && $telefone != '') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Telefone:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "$telefone", $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if ($embalar_viagem == '1' || $embalar_viagem == true) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen("EMBALAR PEDIDO PARA VIAGEM") > $quebra_linha) {
                $temp = str_split("EMBALAR PEDIDO PARA VIAGEM", $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode("EMBALAR PEDIDO PARA VIAGEM"), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        if ($retira_local == '1' || $retira_local == 'true') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen("PEDIDO SERA RETIRADO NO LOCAL") > $quebra_linha) {
                $temp = str_split("PEDIDO SERA RETIRADO NO LOCAL", $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode("PEDIDO SERA RETIRADO NO LOCAL"), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            $endereco = utf8_decode($endereco . " " . $numero);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($endereco) > $quebra_linha) {
                $temp = str_split($endereco, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($endereco), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($complemento != '' && $complemento != null && $complemento != 'null') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Compl:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($complemento) > $quebra_linha) {
                    $temp = str_split($complemento, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($complemento), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Bairro:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($bairro) > $quebra_linha) {
                $temp = str_split($bairro, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($bairro), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Referencia:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($referencia) > $quebra_linha) {
                $temp = str_split($referencia, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($referencia), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        if (count($listaFormas) == 0) {
            if ($modelo == "online" || $tipo == "app") {
                $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getParcialPedido/" . $id . "?idEmpresa=" . $id_empresa;
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_HEADER, false);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                $output = curl_exec($ch);
                curl_close($ch);
                $listaFormas = json_decode($output);
                $listaFormas = $listaFormas->list;
            } else {
                $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'");
                $consulta->execute();
                $listaFormas = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }

        }
        $totalPago = 0;
        foreach ($listaFormas as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }

            if ($modelo == "online" || $tipo == "app") {
                $nomeFormaPagamento = $item->forma_pagamento;
                $valorFormaPagamento = $item->valor;
                $troco = $item->troco;
            } else {
                $nomeFormaPagamento = $item['forma_pagamento'];
                $valorFormaPagamento = $item['valor'];
                $troco = $item['troco'];
            }
            $nomeFormaPagamento = utf8_decode($nomeFormaPagamento);
            if ($nomeFormaPagamento == "Voucher IFOOD") {
                $desconto = floatval($desconto) + floatval($valorFormaPagamento);
                $desconto_texto = asDollars($desconto);
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($nomeFormaPagamento) > $quebra_linha) {
                $temp = str_split($nomeFormaPagamento, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, $temp[$a], 10, $posicao);
                    if ($a == count($temp) - 1) {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                        printer_select_font($handle, $font);
                        printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                    }
                    $posicao = $posicao + $espacoLinhas;
                }

            } else {
                printer_draw_text($handle, $nomeFormaPagamento, 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if (strtolower($nomeFormaPagamento) == "dinheiro") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "TROCO: ", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if ($troco > 0) {
                    printer_draw_text($handle, utf8_decode(asDollars($troco)), $terceira_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                    printer_draw_text($handle, "TROCO PARA: ", 10, $posicao);
                    $trocoPara = floatval($valorFormaPagamento) + floatval($troco);
                    printer_draw_text($handle, utf8_decode(asDollars($trocoPara)), $terceira_posicao, $posicao);
                } else {
                    printer_draw_text($handle, "SEM TROCO", $terceira_posicao, $posicao);
                }

                $posicao = $posicao + $espacoLinhas;
            }
            $totalPago = floatval($totalPago) + floatval($valorFormaPagamento);
        }
        if (!isset($porcentagem_garcom)) {
            $porcentagem_garcom = 0;
        }
        $valorTotalV = $valor_total;
        $sub_total = asDollars($valor_total);
        $valor_total = asDollars($valor_total - $desconto);

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Taxa Ent:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $taxa_entrega, $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        if ($desconto != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Desconto:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($desconto_texto), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($fidelidade_fisico == 'true') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("FIDELIDADE:"), 10, $posicao);
            printer_draw_text($handle, "RECOLHER (CUPONS, SELOS, ETC)", $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($consumacao != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Consum:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($consumacao), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($entrada != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Entrada:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($entrada), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($porcentagem_garcom_pago != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("% Garçom:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode(asDollars($porcentagem_garcom_pago)), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($sub_total != $valor_total) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Sub-Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($sub_total), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($valor_total), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $valorRestante = floatval($valorTotalV) - floatval($totalPago) - floatval($desconto);

       /* $arquivo = fopen('valorRestante.txt', 'a+');
        fwrite($arquivo, $valorRestante);
        fclose($arquivo); */

        if(asDollars($valorRestante) != "R$0.00"){
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor Restante:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($valorRestante), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }


        if ($observacao != '' && $observacao != null) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            $observacao = strtoupper($observacao);
            if (strlen($observacao) > $quebra_linha) {
                $temp = str_split($observacao, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        printer_draw_text($handle, utf8_decode("Qt - Descrição"), 10, $posicao);
        printer_draw_text($handle, utf8_decode("Valor"), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $listaTemp = array();

        for ($i = 0; $i < count($list); $i++) {
            $existe = false;
            if ($tipo == "app" || $modelo == "online") {
                for ($i2 = 0; $i2 < count($listaTemp); $i2++) {
                    if (
                        $list[$i]->nome == $listaTemp[$i2]->nome && count($list[$i]->adicional) == 0 && count($listaTemp[$i2]->adicional) == 0
                        && $list[$i]->observacao_produto == '' && $listaTemp[$i2]->observacao_produto == ''
                    ) {
                        $existe = true;
                        $listaTemp[$i2]->quantidade = floatval($listaTemp[$i2]->quantidade) + floatval($list[$i]->quantidade);
                    }
                }
            } else {
                for ($i2 = 0; $i2 < count($listaTemp); $i2++) {
                    if (
                        $list[$i]['nome'] == $listaTemp[$i2]['nome'] && count($list[$i]['adicional']) == 0 && count($listaTemp[$i2]['adicional']) == 0
                        && $list[$i]['observacao_produto'] == '' && $listaTemp[$i2]['observacao_produto'] == ''
                    ) {
                        $existe = true;
                        $listaTemp[$i2]['quantidade'] = floatval($listaTemp[$i2]['quantidade']) + floatval($list[$i]['quantidade']);
                    }
                }
            }
            if (count($listaTemp) == 0 || $existe == false) {
                $listaTemp[] = $list[$i];
            }

        }
        $list = $listaTemp;
        foreach ($list as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
            if ($tipo == "app" || $modelo == "online") {
                $quantidade = $item->quantidade;
                $nome_produto = $item->nome;
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item->valor;
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item->observacao_produto;
                $senha_atendimento = "";
                $ordem = $item->ordem;
            } else {
                $quantidade = $item['quantidade'];
                $nome_produto = $item['nome'];
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item['valor'];
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item['observacao_produto'];
                $senha_atendimento = $item['senha_atendimento'];
                $ordem = $item['ordem'];
            }

            if ($id_empresa == "52") {
                $nome_produto = $nome_produto . ' (' . $ordem . ')';
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $peso_fonte_produto, false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($quantidade . "-" . $nome_produto) > $quebra_linha_produto) {
                $temp = str_split($quantidade . " - " . $nome_produto, $quebra_linha_produto - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                    if ($a == count($temp) - 1) {
                        printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                    }
                    $posicao = $posicao + $espacoLinhas;
                }

            } else {
                printer_draw_text($handle, utf8_decode($quantidade . " - " . $nome_produto), 10, $posicao);
                printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if (isset($senha_atendimento) && $senha_atendimento != '') {
                printer_draw_text($handle, utf8_decode("Senha:"), 10, $posicao);
                printer_draw_text($handle, utf8_decode($senha_atendimento), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($tipo == "app" || $modelo == "online") {
                foreach ($item->adicional as $item2) {
                    $descricao = $item2->descricao;
                    $quantidade_adicional = $item2->quantidade;
                    $descricao = sanitizeString($descricao);
                    if ($item2->valor != '0') {
                        $valor_adicional = $item2->valor;
                        $valor_total_adicional = $valor_adicional;
                        $valor_adicional = asDollars(floatval($valor_adicional) * floatval($quantidade));
                        $valor_total_adicional = asDollars($valor_total_adicional);
                    }

                    for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $$peso_fonte_adicional, false, false, false, 0);
                        printer_select_font($handle, $font);
                        if (strlen("-" . $descricao) > $quebra_linha_produto) {
                            $temp = str_split("-" . $descricao, $quebra_linha_produto - 1);
                            for ($a = 0; $a < count($temp); $a++) {
                                printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                $posicao = $posicao + $espacoLinhas;
                            }
                        } else {
                            printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                            if ($item2->valor != '0') {
                                printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                            }
                            $posicao = $posicao + $espacoLinhas;
                        }
                    }
                    if ($posicao >= 1400) {
                        printer_end_page($handle);
                        printer_start_page($handle);
                        $posicao = 0;
                    }
                }

                if ($observacao_produto != "") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($observacao_produto) > $quebra_linha) {
                        $temp = str_split($observacao_produto, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
                $posicao = $posicao + $espacoLinhas;
            } else {
                foreach ($item['adicional'] as $item2) {
                    $descricao = $item2['descricao'];
                    $quantidade_adicional = $item2['quantidade'];
                    $descricao = sanitizeString($descricao);
                    if ($item2['valor'] != '0') {
                        $valor_adicional = $item2['valor'];
                        $valor_total_adicional = $valor_adicional;
                        $valor_adicional = asDollars(floatval($valor_adicional) * floatval($quantidade));
                        $valor_total_adicional = asDollars($valor_total_adicional);
                    }
                    for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $peso_fonte_adicional, false, false, false, 0);
                        printer_select_font($handle, $font);
                        if (strlen("-" . $descricao) > $quebra_linha_produto) {
                            $temp = str_split("-" . $descricao, $quebra_linha_produto - 1);
                            $posicao_produto = $posicao;
                            for ($a = 0; $a < count($temp); $a++) {
                                printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                $posicao = $posicao + $espacoLinhas;
                            }
                            if ($item2['valor'] != '0') {
                                printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao_produto);
                            }
                        } else {
                            printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                            if ($item2['valor'] != '0') {
                                printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                            }
                            $posicao = $posicao + $espacoLinhas;
                        }
                    }
                    if ($posicao >= 1400) {
                        printer_end_page($handle);
                        printer_start_page($handle);
                        $posicao = 0;
                    }
                }

                if ($observacao_produto != "") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($observacao_produto) > $quebra_linha) {
                        $temp = str_split($observacao_produto, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        if ($id_empresa != 10) {
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("www.onesolucoes.com.br"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }

        // IMPRESSÂO SEGUNDA VIA
        if ($id_empresa == '10' || $id_empresa == '157') {
            printer_delete_font($font);
            printer_end_page($handle);
            printer_end_doc($handle);
            printer_close($handle);
            $posicao = 10;
            $handle = printer_open($nome_impressora);
            printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);
            printer_start_doc($handle, "Print");
            printer_start_page($handle);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            $centro_linha = ($posicao_centro) - strlen("2º VIA");
            $centro_linha = $centro_linha;
            $espaco_vazio = "";
            for ($ii = 0; $ii < $centro_linha; $ii++) {
                $espaco_vazio = " " . $espaco_vazio;
            }

            printer_draw_text($handle, utf8_decode($espaco_vazio . "2º VIA"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($parametro[0]['imprimir_cabecalho_empresa'] == 'true') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Empresa:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($nome_empresa) > $quebra_linha) {
                    $temp = str_split($nome_empresa, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, $nome_empresa, $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "CNPJ:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($cnpj_empresa) > $quebra_linha) {
                    $temp = str_split($cnpj_empresa, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($cnpj_empresa), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Telefone:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($telefone_empresa), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($endereco_empresa) > $quebra_linha) {
                    $temp = str_split($endereco_empresa, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, $endereco_empresa, $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
                $posicao = $posicao + $espacoLinhas;

            }

            printer_draw_text($handle, "Data:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "$data", $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Pedido:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen("$numero_pedido - $nome") > $quebra_linha) {
                $temp = str_split("$numero_pedido - $nome", $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode("$numero_pedido - $nome"), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if (isset($nome_mesa)) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Mesa:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($nome_mesa), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if (isset($nome_mesa2)) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Comanda:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($nome_mesa2), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($tipo_pedido == 'app') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Origem:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if ($ifood == 'true') {
                    printer_draw_text($handle, "IFOOD", $segunda_posicao, $posicao);
                } else {
                    printer_draw_text($handle, "Aplicativo", $segunda_posicao, $posicao);
                }

                $posicao = $posicao + $espacoLinhas;
            }

            if (isset($shortReference)) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "ID IFOOD:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, $shortReference, $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($localizador_ifood != null && $localizador_ifood != '') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Localizador:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, $localizador_ifood, $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($delivery == 'true' || $delivery == true || $delivery == 1) {
                printer_draw_text($handle, "EXTERNO", $segunda_posicao, $posicao);
            } else {
                printer_draw_text($handle, "INTERNO", $segunda_posicao, $posicao);
            }
            $posicao = $posicao + $espacoLinhas;

            $endereco_temp = "";
            if ($telefone != null && $telefone != '') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Telefone:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "$telefone", $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($retira_local == 1 || $retira_local == '1' || $retira_local == 'true') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen("Pedido sera retirado no local") > $quebra_linha) {
                    $temp = str_split("Pedido sera retirado no local", $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode("Pedido sera retirado no local"), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {

                $endereco = utf8_decode($endereco . " " . $numero);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($endereco) > $quebra_linha) {
                    $temp = str_split($endereco, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($endereco), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                if ($complemento != '' && $complemento != null && $complemento != 'null') {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Compl:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($complemento) > $quebra_linha) {
                        $temp = str_split($complemento, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($complemento), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Bairro:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($bairro) > $quebra_linha) {
                    $temp = str_split($bairro, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($bairro), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Referencia:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($referencia) > $quebra_linha) {
                    $temp = str_split($referencia, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($referencia), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            foreach ($listaFormas as $item) {
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }

                if ($modelo == "online" || $tipo == "app") {
                    $nomeFormaPagamento = $item->forma_pagamento;
                    $valorFormaPagamento = $item->valor;
                    $troco = $item->troco;
                } else {
                    $nomeFormaPagamento = $item['forma_pagamento'];
                    $valorFormaPagamento = $item['valor'];
                    $troco = $item['troco'];
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($nomeFormaPagamento) > $quebra_linha) {
                    $temp = str_split($nomeFormaPagamento, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                        if ($a == count($temp) - 1) {
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                            printer_select_font($handle, $font);
                            printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }

                } else {
                    printer_draw_text($handle, utf8_decode($nomeFormaPagamento), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                if (strtolower($nomeFormaPagamento) == "dinheiro") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, "TROCO: ", 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if ($troco > 0) {
                        printer_draw_text($handle, utf8_decode(asDollars($troco)), $terceira_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                        printer_draw_text($handle, "TROCO PARA: ", 10, $posicao);
                        $trocoPara = floatval($valorFormaPagamento) + floatval($troco);
                        printer_draw_text($handle, utf8_decode(asDollars($trocoPara)), $terceira_posicao, $posicao);
                    } else {
                        printer_draw_text($handle, "SEM TROCO", $terceira_posicao, $posicao);
                    }

                    $posicao = $posicao + $espacoLinhas;
                }
            }
            if (!isset($porcentagem_garcom)) {
                $porcentagem_garcom = 0;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Taxa Ent:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $taxa_entrega, $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($desconto != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Desconto:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($desconto_texto), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($fidelidade_fisico == 'true') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("FIDELIDADE:"), 10, $posicao);
                printer_draw_text($handle, "RECOLHER (CUPONS, SELOS, ETC)", $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($porcentagem_garcom != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("% Garçom:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode(asDollars($porcentagem_garcom)), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($sub_total != $valor_total) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Sub-Total:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($sub_total), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($observacao != '' && $observacao != null) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao) > $quebra_linha) {
                    $temp = str_split($observacao, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }

            printer_delete_font($font);
            printer_end_page($handle);
            printer_end_doc($handle);
            printer_close($handle);
            echo json_encode("ok");

        } else {

            if ($tipo == "app" || $modelo == "online") {
            $resultado = array();
            }else{
            $consulta = $db->con()->prepare("select id from parametro where usar_senha_atendimento = 'true'");
            $consulta->execute();
            $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }

            if (count($resultado) > 0) {

                foreach ($list as $item) {
                    printer_end_page($handle);
                    printer_end_doc($handle);
                    printer_start_doc($handle, "Print");
                    printer_start_page($handle);
                    $quantidade = $item['quantidade'];
                    $nome_produto = $item['nome'];
                    $nome_produto = sanitizeString($nome_produto);
                    $valor_produto = $item['valor'];
                    $valor_total_produto = $valor_produto * $quantidade;
                    $valor_total_produto = asDollars($valor_total_produto);
                    $valor_produto = asDollars($valor_produto);
                    $observacao_produto = $item['observacao_produto'];
                    $senha_atendimento = $item['senha_atendimento'];
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($quantidade . "-" . $nome_produto) > $quebra_linha) {
                        $temp = str_split($quantidade . " - " . $nome_produto, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                            if ($a == count($temp) - 1) {
                                printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                            }
                            $posicao = $posicao + $espacoLinhas;
                        }

                    } else {
                        printer_draw_text($handle, utf8_decode($quantidade . " - " . $nome_produto), 10, $posicao);
                        printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                    if (isset($senha_atendimento)) {
                        printer_draw_text($handle, utf8_decode("Senha:"), 10, $posicao);
                        printer_draw_text($handle, utf8_decode($senha_atendimento), $terceira_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                    foreach ($item['adicional'] as $item2) {
                        $descricao = $item2['descricao'];
                        $quantidade_adicional = $item2['quantidade'];
                        $descricao = sanitizeString($descricao);
                        if ($item2['valor'] != '0') {
                            $valor_adicional = $item2['valor'];
                            $valor_total_adicional = $valor_adicional;
                            $valor_adicional = asDollars($valor_adicional);
                            $valor_total_adicional = asDollars($valor_total_adicional);
                        }
                        for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                            printer_select_font($handle, $font);
                            if (strlen("-" . $descricao) > $quebra_linha) {
                                $temp = str_split("-" . $descricao, $quebra_linha - 1);
                                $posicao_produto = $posicao;
                                for ($a = 0; $a < count($temp); $a++) {
                                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                    $posicao = $posicao + $espacoLinhas;
                                }
                                if ($item2['valor'] != '0') {
                                    printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao_produto);
                                }
                            } else {
                                printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                                if ($item2['valor'] != '0') {
                                    printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                                }
                                $posicao = $posicao + $espacoLinhas;
                            }
                        }
                        if ($posicao >= 1400) {
                            printer_end_page($handle);
                            printer_start_page($handle);
                            $posicao = 0;
                        }
                    }

                    if ($observacao_produto != "") {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                        printer_select_font($handle, $font);
                        printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                        printer_select_font($handle, $font);
                        if (strlen($observacao_produto) > $quebra_linha) {
                            $temp = str_split($observacao_produto, $quebra_linha - 1);
                            for ($a = 0; $a < count($temp); $a++) {
                                printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                                $posicao = $posicao + $espacoLinhas;
                            }
                        } else {
                            printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    }

                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
                    $posicao = $posicao + $espacoLinhas;

                }
            } else {


                if ($tipo == "app" || $modelo == "online") {
                    $resultado = array();
                    }else{
                    $consulta = $db->con()->prepare("select id from parametro where usar_senha_atendimento = 'true'");
                    $consulta->execute();
                    $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
                    }                

                if (count($resultado) > 0) {
                    printer_end_page($handle);
                    printer_end_doc($handle);
                    printer_start_doc($handle, "Print");
                    printer_start_page($handle);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("SENHA: "), 10, $posicao);
                    printer_draw_text($handle, $senha_atendimento_pedido, $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                    printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }
            printer_delete_font($font);
            printer_end_page($handle);
            printer_end_doc($handle);
            printer_close($handle);

            echo json_encode("ok");
        }

    }

);

function agruparLista($list, $campo)
{
    foreach ($list as $item) {
        $item['nome'] = "123";
    }
    return $list;
}

$app->post(
    '/imprimirPedidoSemBanco',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $id_empresa = (isset($dados->id_empresa)) ? $dados->id_empresa : "";
        $impressora = (isset($dados->impressora)) ? $dados->impressora : "";
        $tamanho_papel = (isset($dados->tamanho_papel)) ? $dados->tamanho_papel : "";
        $consumacao = (isset($dados->consumacao)) ? $dados->consumacao : "";
        $entrada = (isset($dados->entrada)) ? $dados->entrada : "";
        $empresa = (isset($dados->empresa)) ? $dados->empresa : "";
        $troco = (isset($dados->troco)) ? $dados->troco : "";
        $desconto = (isset($dados->desconto)) ? $dados->desconto : "";
        $porcentagem_garcom = (isset($dados->porcentagem_garcom)) ? $dados->porcentagem_garcom : "";
        $desconto_texto = asDollars($desconto);
        $valor_total = (isset($dados->valor_total)) ? $dados->valor_total : "";
        $observacao = (isset($dados->observacao)) ? $dados->observacao : "";
        $comandas = (isset($dados->comandas)) ? $dados->comandas : "";
        $mesas = (isset($dados->mesas)) ? $dados->mesas : "";
        $observacao = sanitizeString($observacao);
        $porcentagem_garcom = floatval($valor_total) * floatval($porcentagem_garcom) / 100;
        $produtos = json_decode(json_encode($dados->produtos), true);
        $listaFormas = json_decode(json_encode($dados->parcial), true);

        $tamanho_impressora = $tamanho_papel;
        $nome_impressora = $impressora;

        $espacoLinhas = 40;
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $posicao = 10;
        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);
        printer_start_doc($handle, "Print");
        printer_start_page($handle);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        $centro_linha = ($posicao_centro) - strlen("DOCUMENTO NÃO FISCAL");
        $centro_linha = $centro_linha;
        $espaco_vazio = "";
        for ($ii = 0; $ii < $centro_linha; $ii++) {
            $espaco_vazio = " " . $espaco_vazio;
        }

        printer_draw_text($handle, utf8_decode($espaco_vazio . "DOCUMENTO NÃO FISCAL"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $centro_linha = ($posicao_centro) - strlen($empresa);
        $centro_linha = $centro_linha;
        $espaco_vazio = "";
        for ($ii = 0; $ii < $centro_linha; $ii++) {
            $espaco_vazio = " " . $espaco_vazio;
        }
        printer_draw_text($handle, strtoupper(utf8_decode($espaco_vazio . $empresa)), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaFormas as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
            $nomeFormaPagamento = $item['forma_pagamento'];
            $valorFormaPagamento = $item['valor'];

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($nomeFormaPagamento) > $quebra_linha) {
                $temp = str_split($nomeFormaPagamento, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                    if ($a == count($temp) - 1) {
                        printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                    }
                    $posicao = $posicao + $espacoLinhas;
                }

            } else {
                printer_draw_text($handle, utf8_decode($nomeFormaPagamento), 10, $posicao);
                printer_draw_text($handle, utf8_decode(asDollars($valorFormaPagamento)), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        if ($troco != '') {
            $troco_para = asDollars($troco);
            $troco = $troco - $valor_total + $desconto;
            $troco = asDollars($troco);
            $sub_total = asDollars($valor_total);
            if (!isset($porcentagem_garcom)) {
                $porcentagem_garcom = 0;
            }
            $valor_total = asDollars($valor_total - $desconto + $porcentagem_garcom);
            if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Troco para:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($troco_para) > $quebra_linha) {
                    $temp = str_split($troco_para, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($troco_para), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }
        } else {
            if (!isset($porcentagem_garcom)) {
                $porcentagem_garcom = 0;
            }
            $sub_total = asDollars($valor_total);
            $valor_total = asDollars($valor_total - $desconto + $porcentagem_garcom);
        }

        if ($desconto != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Desconto:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($desconto_texto), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($consumacao != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Consum:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($consumacao), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($entrada != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Entrada:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($entrada), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($porcentagem_garcom != '0') {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("% Garçom:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($porcentagem_garcom), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        if ($sub_total != $valor_total) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Sub-Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($sub_total), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($valor_total), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;
        if ($troco != '') {
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor troco:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($troco), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        } else {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor troco:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("SEM TROCO"), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }
        if ($observacao != '' && $observacao != null) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($observacao) > $quebra_linha) {
                $temp = str_split($observacao, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Comanda(s):"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $comandas, $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Mesa(s):"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $mesas, $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        foreach ($produtos as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }

            $quantidade = $item['quantidade'];
            $nome_produto = $item['nome'];
            $nome_produto = sanitizeString($nome_produto);
            $valor_produto = $item['valor'];
            $valor_total_produto = $valor_produto * $quantidade;
            $valor_total_produto = asDollars($valor_total_produto);
            $valor_produto = asDollars($valor_produto);
            $observacao_produto = $item['observacao'];

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($quantidade . "-" . $nome_produto) > $quebra_linha) {
                $temp = str_split($quantidade . " - " . $nome_produto, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                    if ($a == count($temp) - 1) {
                        printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                    }
                    $posicao = $posicao + $espacoLinhas;
                }

            } else {
                printer_draw_text($handle, utf8_decode($quantidade . " - " . $nome_produto), 10, $posicao);
                printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            foreach ($item['listAdicional'] as $item2) {
                $descricao = $item2['descricao'];
                $quantidade_adicional = $item2['quantidade'];
                $descricao = sanitizeString($descricao);
                if ($item2['valor'] != '0') {
                    $valor_adicional = $item2['valor'];
                    $valor_total_adicional = $valor_adicional;
                    $valor_adicional = asDollars(floatval($valor_adicional) * floatval($quantidade));
                    $valor_total_adicional = asDollars($valor_total_adicional);
                }
                for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen("-" . $descricao) > $quebra_linha) {
                        $temp = str_split("-" . $descricao, $quebra_linha - 1);
                        $posicao_produto = $posicao;
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                        if ($item2['valor'] != '0') {
                            printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao_produto);
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                        if ($item2['valor'] != '0') {
                            printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }
                }
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
            }

            if ($observacao_produto != "") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao_produto) > $quebra_linha) {
                    $temp = str_split($observacao_produto, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }
        if ($id_empresa != 10) {
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }

        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);

        echo json_encode("ok");

    }

);

$app->post(
    '/imprimirProducaoNovo',
    function () use ($app, $db) {
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $tipo = (isset($dados->tipo)) ? $dados->tipo : "";
        $id_empresa = (isset($dados->id_empresa)) ? $dados->id_empresa : "";
        $modelo = (isset($dados->modelo)) ? $dados->modelo : "";
        $impressora = (isset($dados->impressora)) ? $dados->impressora : "";
        $tamanho_papel = (isset($dados->tamanho_papel)) ? $dados->tamanho_papel : "";
        $imprimirCabecalho = (isset($dados->imprimirCabecalho)) ? $dados->imprimirCabecalho : "";
        $retira_local = (isset($dados->retira_local)) ? $dados->retira_local : false;
        if ($tamanho_papel == 80 || $tamanho_papel == 70) {
            $quebra_linha = 25;
        } else if ($tamanho_papel == 58) {
            $quebra_linha = 36;
        } else if ($tamanho_papel == 60) {
            $quebra_linha = 48;
        }

        $impressaoProducao = array();
        if ($modelo == "online" || $tipo == "app") {
            $url = "https://www.onesolucoes.com.br/gestaoapp/api/index.php/" . "getDadosImpressao/" . $id . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $list = json_decode($output);

        } else {
            $consulta = $db->con()->prepare("select * from pedido where id = '$id'");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("SELECT pedido.data_pedido, pedido.numero_pedido,
         cliente.nome as cliente_nome, pedido.desconto, empresa.nome as empresa,
         pedido.endereco, pedido.numero, pedido.complemento, pedido.bairro, pedido.nome_mesa,
         pedido.forma_pagamento, pedido.troco, pedido.retira_local, pedido.tipo, produto.ordem,
         pedido.taxa_entrega, pedido.valor_total, pedido.observacao, pedido.porcentagem_garcom,
         produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
         pedido_produto.observacao as observacao_produto, pedido.referencia, cliente.telefone,
         pedido_produto.valor_produto as valor, pedido_produto.quantidade from pedido left join cliente on pedido.id_cliente = cliente.id,
         pedido_produto,  empresa,
         produto where pedido.id_empresa = empresa.id and
         pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id
         and pedido_produto.id_pedido = '$id'    order by produto.ordem

         ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i = 0;
            foreach ($list as $item) {

                $id_produto = $item['id'];
                $sequencia_produto = $item['sequencia'];
                $consulta = $db->con()->prepare("SELECT adicional.descricao,
           adicional_produto_pedido.valor_adicional as valor, adicional_produto_pedido.quantidade as quantidade,
           adicional_produto_pedido.texto_observacao
           from adicional, produto, pedido, adicional_produto_pedido where
           adicional_produto_pedido.id_adicional = adicional.id and
           adicional_produto_pedido.id_produto = produto.id and
           adicional_produto_pedido.id_pedido = pedido.id and
           adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
           adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem
           ");
                $consulta->execute();
                $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $i++;
            }
        }

        $consulta = $db->con()->prepare("select * from parametro");
        $consulta->execute();
        $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);

        if ($modelo == "online" || $tipo == "app") {
            $data = $list[0]->data_pedido;
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $list[0]->numero_pedido;
            $empresa = $list[0]->empresa;
            $tipo_pedido = $list[0]->tipo;
            $nome = $list[0]->cliente_nome;
            if (isset($list[0]->nome_mesa)) {
                $nome = $list[0]->nome_mesa . ' ' . $list[0]->cliente_nome;
            }
            $observacao = $list[0]->observacao;
            $observacao = sanitizeString($observacao);
        } else {
            $data = $list[0]['data_pedido'];
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $list[0]['numero_pedido'];
            $tipo_pedido = $list[0]['tipo'];
            $nome = $list[0]['cliente_nome'] . " " . $list[0]['nome_mesa'];
            if ($nome == "local") {
                $nome = $list[0]['nome_mesa'];
            }
            $empresa = $list[0]['empresa'];
            $observacao = $list[0]['observacao'];
            $observacao = sanitizeString($observacao);
        }

        $tamanho_impressora = $tamanho_papel;
        $nome_impressora = $impressora;
        $espacoLinhas = 40;
        $GLOBALS['nomeFonte'] = $parametro[0]['impressao_fonte'];
        $GLOBALS['fontNormal'] = $parametro[0]['impressao_peso_fonte_segunda_coluna'];
        $GLOBALS['fontBold'] = $parametro[0]['impressao_peso_fonte_primeira_coluna'];

        $fonte = $parametro[0]['impressao_tamanho_fonte'];
        $segunda_fonte = 16;
        $primeira_posicao = 150;
        $segunda_posicao = $parametro[0]['impressao_segunda_posicao'];
        $terceira_posicao = $parametro[0]['impressao_terceira_posicao'];
        $quebra_linha = $parametro[0]['impressao_quebra_linha'];
        $posicao_centro = $quebra_linha + 5;
        $peso_fonte_produto = $parametro[0]['impressao_peso_fonte_produto'];
        $peso_fonte_adicional = $parametro[0]['impressao_peso_fonte_adicional'];
        $quebra_linha_produto = $parametro[0]['impressao_quebra_linha_produto_producao'];
        $impressao_imprimir_valor_producao = $parametro[0]['impressao_imprimir_valor_producao'];

        $posicao = 25;
        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "text");
        printer_set_option($handle, PRINTER_SCALE, 75);
        printer_start_doc($handle, "Print");
        printer_start_page($handle);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        $centro_linha = ($posicao_centro) - strlen("PRODUÇÃO");
        $centro_linha = $centro_linha;
        $espaco_vazio = "";
        for ($ii = 0; $ii < $centro_linha; $ii++) {
            $espaco_vazio = " " . $espaco_vazio;
        }

        printer_draw_text($handle, utf8_decode($espaco_vazio . "PRODUÇÃO"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, "Data:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "$data", $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Pedido:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        if (strlen("$id - $nome") > $quebra_linha) {
            $temp = str_split("$id - $nome", $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, utf8_decode("$id - $nome"), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if ($observacao != '' && $observacao != null) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($observacao) > $quebra_linha) {
                $temp = str_split($observacao, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        if ($retira_local == true) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
            printer_draw_text($handle, utf8_decode("Pedido para retira no local"), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        foreach ($list as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
            if ($tipo == "app" || $modelo == "online") {
                $quantidade = $item->quantidade;
                $nome_produto = $item->nome;
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item->valor;
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item->observacao_produto;
                $ordem = $item->ordem;
            } else {
                $quantidade = $item['quantidade'];
                $nome_produto = $item['nome'];
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item['valor'];
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item['observacao_produto'];
                $ordem = $item['ordem'];
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            if ($parametro[0]['imprimir_ordem_produto'] == 'false') {
                $textoProduto = $quantidade . "-" . $nome_produto;
            } else {
                $textoProduto = $quantidade . "-" . $nome_produto . ' (' . $ordem . ')';
            }

            if (strlen($textoProduto) > $quebra_linha_produto) {
                $temp = str_split($textoProduto, $quebra_linha_produto - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode($textoProduto), 10, $posicao);
                if($impressao_imprimir_valor_producao == 'true'){
                  printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                }

                $posicao = $posicao + $espacoLinhas;
            }
            if ($tipo == "app" || $modelo == "online") {
                foreach ($item->adicional as $item2) {
                    $descricao = $item2->descricao;
                    $quantidade_adicional = $item2->quantidade;
                    $descricao = sanitizeString($descricao);
                    if ($item2->valor != '0') {
                        $valor_adicional = $item2->valor;
                        $valor_total_adicional = $quantidade * $valor_adicional;
                        $valor_adicional = asDollars($valor_adicional);
                        $valor_total_adicional = asDollars($valor_total_adicional);
                    }

                    for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                        printer_select_font($handle, $font);
                        if (strlen("-" . $descricao) > $quebra_linha_produto) {
                            $temp = str_split("-" . $descricao, $quebra_linha_produto - 1);
                            for ($a = 0; $a < count($temp); $a++) {
                                printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                $posicao = $posicao + $espacoLinhas;
                            }
                        } else {
                            printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                            if($impressao_imprimir_valor_producao == 'true'){
                            if ($item2->valor != '0') {
                                printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                            }
                          }
                            $posicao = $posicao + $espacoLinhas;
                        }
                    }
                    if ($posicao >= 1400) {
                        printer_end_page($handle);
                        printer_start_page($handle);
                        $posicao = 0;
                    }
                }
            } else {
                foreach ($item['adicional'] as $item2) {
                    $descricao = $item2['descricao'];
                    $quantidade_adicional = $item2['quantidade'];
                    $descricao = sanitizeString($descricao);
                    if ($item2['valor'] != '0') {
                        $valor_adicional = $item2['valor'];
                        $valor_total_adicional = $quantidade * $valor_adicional;
                        $valor_adicional = asDollars($valor_adicional);
                        $valor_total_adicional = asDollars($valor_total_adicional);
                    }
                    for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                        printer_select_font($handle, $font);
                        if (strlen("-" . $descricao) > $quebra_linha_produto) {
                            $temp = str_split("-" . $descricao, $quebra_linha_produto - 1);
                            for ($a = 0; $a < count($temp); $a++) {
                                printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                $posicao = $posicao + $espacoLinhas;
                            }
                        } else {
                            printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                            if($impressao_imprimir_valor_producao == 'true'){
                            if ($item2['valor'] != '0') {
                                printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                            }
                          }
                            $posicao = $posicao + $espacoLinhas;
                        }
                    }
                    if ($posicao >= 1400) {
                        printer_end_page($handle);
                        printer_start_page($handle);
                        $posicao = 0;
                    }
                }
            }

            if ($observacao_produto != "") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao_produto) > $quebra_linha) {
                    $temp = str_split($observacao_produto, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }
        }

        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");

    }

);

function imprimir($texto, $cabecalho, $retira_local, $id_empresa, $impressora, $tamanho_papel)
{ // EPSON TM-T20 Receipt
    // Daruma DR800
    // POS-58(copy of 2)
    $tamanho_impressora = $tamanho_papel;
    $nome_impressora = $impressora;

    $espacoLinhas = 40;
    if ($tamanho_impressora == 58) {
        $fonte = 28;
        $segunda_fonte = 10;
        $primeira_posicao = 50;
        $segunda_posicao = 120;
        $terceira_posicao = 290;
    } else if ($tamanho_impressora == 80) {
        $fonte = 40;
        $segunda_fonte = 16;
        $primeira_posicao = 150;
        $segunda_posicao = 210;
        $terceira_posicao = 430;
    } else if ($tamanho_impressora == 60) {
        $fonte = 28;
        $segunda_fonte = 10;
        $primeira_posicao = 50;
        $segunda_posicao = 130;
        $terceira_posicao = 460;
        $espacoLinhas = 30;
    }

    $handle = printer_open($nome_impressora);
    printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

    printer_start_doc($handle, "Print"); // Name Document

    printer_start_page($handle);

    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
    printer_select_font($handle, $font);

    $posicao = 10;
    for ($i = 0; $i < count($texto); $i++) {

        $t = explode("**", $texto[$i]);
        if ($texto[$i] == "COMPROVANTE DE ENTREGA" || count($t) > 1) {
            if (count($t) > 1) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                if ($tamanho_impressora == 80) {
                    printer_draw_text($handle, trim($t[0]), 180, $posicao);
                } else if ($tamanho_impressora == 58) {
                    printer_draw_text($handle, trim($t[0]), 130, $posicao);
                } else if ($tamanho_impressora == 60) {
                    printer_draw_text($handle, trim($t[0]), 200, $posicao);
                }

            } else {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim($texto[$i]) . ":", 50, $posicao);
            }
        } else {

            $t = explode(":", $texto[$i]);
            if (count($t) > 1) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim($t[0]) . ":", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if ($t[0] == "Data") {
                    $t[1] = $t[1] . ":" . $t[2] . ":" . $t[3];
                }

                printer_draw_text($handle, $t[1], $segunda_posicao, $posicao);

            } else {
                $t = explode("%", $texto[$i]);
                if (count($t) > 1) {
                    if ($t[0] == 1) {
                        $t[0] = $t[0] . " (UM)";
                    } else if ($t[0] == 2) {
                        $t[0] = $t[0] . " (DOIS)";
                    } else if ($t[0] == 3) {
                        $t[0] = $t[0] . " (TRES)";
                    } else if ($t[0] == 4) {
                        $t[0] = $t[0] . " (QUATRO)";
                    } else if ($t[0] == 5) {
                        $t[0] = $t[0] . " (CINCO)";
                    } else if ($t[0] == 6) {
                        $t[0] = $t[0] . " (SEIS)";
                    } else if ($t[0] == 7) {
                        $t[0] = $t[0] . " (SETE)";
                    } else if ($t[0] == 8) {
                        $t[0] = $t[0] . " (OITO)";
                    } else if ($t[0] == 9) {
                        $t[0] = $t[0] . " (NOVE)";
                    }
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, trim($t[0]), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if ($tamanho_impressora == 80) {
                        if (strlen($t[1]) >= 19) {
                            printer_draw_text($handle, trim($t[1]), $primeira_posicao, $posicao);
                        } else {
                            printer_draw_text($handle, trim($t[1]), $segunda_posicao, $posicao);
                        }
                    } else if ($tamanho_impressora == 58) {
                        if (strlen($t[1]) >= 19) {
                            printer_draw_text($handle, trim($t[1]), $segunda_posicao, $posicao);
                        } else {
                            printer_draw_text($handle, trim($t[1]), $segunda_posicao, $posicao);
                        }
                    } else if ($tamanho_impressora == 60) {
                        if (strlen($t[1]) >= 30) {
                            printer_draw_text($handle, trim($t[1]), $segunda_posicao, $posicao);
                        } else {
                            printer_draw_text($handle, trim($t[1]), $segunda_posicao, $posicao);
                        }
                    }
                    if ($tamanho_impressora == 80 || $tamanho_impressora == 58) {
                        if (strlen($t[1]) >= 12) {
                            $posicao = $posicao + 40;
                            printer_draw_text($handle, trim($t[2]), $terceira_posicao, $posicao);
                        } else {
                            printer_draw_text($handle, trim($t[2]), $terceira_posicao, $posicao);
                        }
                    } else if ($tamanho_impressora == 60) {
                        printer_draw_text($handle, trim($t[2]), $terceira_posicao, $posicao);
                    }

                } else {

                    printer_draw_text($handle, $texto[$i], 10, $posicao);
                }

            }
        }

        $posicao = $posicao + $espacoLinhas;
        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }
    }
    printer_delete_font($font);
    printer_end_page($handle);
    printer_end_doc($handle);
    printer_close($handle);
    echo json_encode("ok");
    if ($retira_local != 1 && $nome_impressora == "EPSON TM-T20 Receipt") {
        imprimirCabecalho($cabecalho, $nome_impressora);
    }
}

function imprimirCabecalho($texto, $nome_impressora)
{
    // EPSON TM-T20 Receipt
    // Daruma DR800
    $handle = printer_open($nome_impressora);
    printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

    printer_start_doc($handle, "Print"); // Name Document

    printer_start_page($handle);

    $font = printer_create_font($GLOBALS['nomeFonte'], 40, 16, $GLOBALS['fontBold'], false, false, false, 0);
    printer_select_font($handle, $font);

    $posicao = 10;
    printer_draw_text($handle, "SEGUNDA VIA", 150, $posicao);
    $posicao = $posicao + 40;
    for ($i = 2; $i < count($texto); $i++) {
        $t = explode(":", $texto[$i]);
        if (count($t) > 1) {
            $font = printer_create_font($GLOBALS['nomeFonte'], 40, 16, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($t[0]) . ":", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], 40, 16, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if ($t[0] == "Data") {
                $t[1] = $t[1] . ":" . $t[2] . ":" . $t[3];
            }
            printer_draw_text($handle, $t[1], 200, $posicao);
        } else {
            printer_draw_text($handle, $texto[$i], 10, $posicao);
        }

        $posicao = $posicao + 40;
        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }
    }

    printer_delete_font($font);
    printer_end_page($handle);
    printer_end_doc($handle);
    printer_close($handle);

}

function imprimirProducao($texto, $nome_impressora)
{

    $handle = printer_open($nome_impressora);
    printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

    printer_start_doc($handle, "Print"); // Name Document

    printer_start_page($handle);

    $font = printer_create_font($GLOBALS['nomeFonte'], 30, 12, $GLOBALS['fontBold'], false, false, false, 0);
    printer_select_font($handle, $font);

    $posicao = 10;
    printer_draw_text($handle, utf8_decode("PRODUÇÃO"), 200, $posicao);
    $posicao = $posicao + 40;
    for ($i = 0; $i < count($texto); $i++) {
        $t = explode(":", $texto[$i]);
        if (count($t) > 1) {
            $font = printer_create_font($GLOBALS['nomeFonte'], 30, 12, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($t[0]) . ":", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], 30, 12, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if ($t[0] == "Data") {
                $t[1] = $t[1] . ":" . $t[2] . ":" . $t[3];
            }
            printer_draw_text($handle, $t[1], 120, $posicao);
        } else {
            printer_draw_text($handle, $texto[$i], 10, $posicao);
        }

        $posicao = $posicao + 40;
        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }
    }

    printer_delete_font($font);
    printer_end_page($handle);
    printer_end_doc($handle);
    printer_close($handle);
    echo json_encode("ok");
}

$app->post(
    '/imprimirComprovanteSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cliente = (isset($data->cliente)) ? $data->cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $datetime = date_create()->format('d/m/Y H:i:s');

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($datetime), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Cliente: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($cliente), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_decode($cliente);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
        }

        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Mesa: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($nome_mesa), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Comanda: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($nome_mesa2), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa2);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa2, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("LIBERADO "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim(utf8_decode("PARA SAÍDA")), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("------------"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------"), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirCodigoAutoAtendimento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cliente = (isset($data->cliente)) ? $data->cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $codigo_autoatendimento = (isset($data->codigo_autoatendimento)) ? $data->codigo_autoatendimento : "";
        $datetime = date_create()->format('d/m/Y H:i:s');
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($datetime), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Mesa: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($nome_mesa), $segunda_posicao, $posicao);

        $posicao = $posicao + 40;

        printer_draw_text($handle, utf8_decode("Código: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($codigo_autoatendimento), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirRelatorioGarcomProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $data_intervalo = (isset($data->data_intervalo)) ? $data->data_intervalo : "";
        $empresa = (isset($data->empresa)) ? $data->empresa : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $valorTotal = (isset($data->valorTotal)) ? $data->valorTotal : "";
        $porcentagemTotal = (isset($data->porcentagemTotal)) ? $data->porcentagemTotal : "";
        $cabecalhoPorcentagem = (isset($data->cabecalhoPorcentagem)) ? $data->cabecalhoPorcentagem : "";

        $lista = json_decode(json_encode($data->lista), true);

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $espacoLinhas = 40;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 35;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 170;
            $terceira_posicao = 390;
            $quebra_linha = 19;
            $espacoLinhas = 40;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Empresa:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        $empresa = utf8_decode($empresa);
        if (strlen($empresa) > $quebra_linha) {
            $temp = str_split($empresa, $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, $empresa, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_select_font($handle, $font);
        printer_draw_text($handle, "Telefone:", 10, $posicao);

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $telefone, $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        $endereco = utf8_decode($endereco);
        if (strlen($endereco) > $quebra_linha) {
            $temp = str_split($endereco, $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, $temp[$a], $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, $endereco, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        if (strlen($data_intervalo) > $quebra_linha) {
            $temp = str_split($data_intervalo, $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, $temp[$a], 10, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, $data_intervalo, 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Nome"), 10, $posicao);
        printer_draw_text($handle, trim("Valor"), $segunda_posicao, $posicao);
        printer_draw_text($handle, trim($cabecalhoPorcentagem), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        foreach ($lista as $item) {
            $garcom = $item['garcom'];
            $valor = $item['valor'];
            $porcentagem = $item['porcentagem'];
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($garcom), 10, $posicao);
            printer_draw_text($handle, asDollars($valor), $segunda_posicao, $posicao);
            printer_draw_text($handle, asDollars($porcentagem), $terceira_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        printer_draw_text($handle, "-------------------------------", 10, $posicao);
        $posicao = $posicao + 40;
        printer_draw_text($handle, trim("TOTAL:"), 10, $posicao);
        printer_draw_text($handle, asDollars($valorTotal), $segunda_posicao, $posicao);
        printer_draw_text($handle, asDollars($porcentagemTotal), $terceira_posicao, $posicao);

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode($tamanho_impressora);
    }
);

$app->post(
    '/imprimirPagamentoPorProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_pagamento = (isset($data->data_pagamento)) ? $data->data_pagamento : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_impressora)) ? $data->tamanho_impressora : "";
        $nome_impressora = (isset($data->nome_impressora)) ? $data->nome_impressora : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $valor_pagamento = (isset($data->valor_pagamento)) ? $data->valor_pagamento : "";
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 17;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_pagamento), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($forma_pagamento), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_pagamento), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);

        $lista = explode("|", $observacao);
        foreach ($lista as $item) {
            $item = utf8_decode($item);
            if (strlen($item) > $quebra_linha) {
                $temp = str_split($item, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, $temp[$a], 10, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, $item, 10, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirFechamentoEntregador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $nome_empresa = (isset($data->nome_empresa)) ? $data->nome_empresa : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $ajuda_custo_entregador = (isset($data->ajuda_custo_entregador)) ? $data->ajuda_custo_entregador : "";
        $total_soma_entregador = (isset($data->total_soma_entregador)) ? $data->total_soma_entregador : "";
        $total_acerto_entregador = (isset($data->total_acerto_entregador)) ? $data->total_acerto_entregador : "";
        $total_pedidos = (isset($data->usuario)) ? $data->total_pedidos : "";
        $parametro = (isset($data->parametro)) ? $data->parametro : "";
        $pagamentos = json_decode(json_encode($data->pagamentos), true);
        $pedidos = json_decode(json_encode($data->pedidos), true);
        $datetime = date_create()->format('d/m/Y H:i:s');

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, trim("Empresa: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($nome_empresa), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($datetime), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Entregador: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($usuario), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Ajuda de Custo: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($ajuda_custo_entregador), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Soma Entrega(s): "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($total_soma_entregador), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Acerto Entregador: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($total_acerto_entregador), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Soma Pedido(s): "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($total_pedidos), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("--------------------------------------------------------------------------------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + 40;

        foreach ($pagamentos as $item) {
            $forma_pagamento = $item['forma_pagamento'];
            $valor = $item['valor'];
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($forma_pagamento), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($valor), $terceira_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("--------------------------------------------------------------------------------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + 40;
        if ($parametro == 'true') {
            foreach ($pedidos as $item) {
                $nome = $item['nome'];
                $taxa_entrega = $item['taxa_entregador'];
                $desconto = $item['desconto'];
                $bairro = $item['bairro'];
                $valor_total = $item['valor_total'];
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($nome), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, asDollars(floatval($valor_total) - floatval($desconto)), $terceira_posicao, $posicao);
                $posicao = $posicao + 40;
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($bairro), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, asDollars(floatval($taxa_entrega) - floatval($desconto)), $terceira_posicao, $posicao);
                $posicao = $posicao + 40;
                printer_draw_text($handle, "------------------------------------------------------------------------------", $primeira_posicao, $posicao);
                $posicao = $posicao + 40;
            }
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirRelatorioCaixaGeral',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor_inicial = (isset($data->valor_inicial)) ? $data->valor_inicial : "";
        $valor_bruto = (isset($data->valor_bruto)) ? $data->valor_bruto : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";
        $total_porcentagem_garcom = (isset($data->total_porcentagem_garcom)) ? $data->total_porcentagem_garcom : "";
        $valor_desconto = (isset($data->valor_desconto)) ? $data->valor_desconto : "";
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $formas = json_decode(json_encode($data->formas), true);
        $EntradaSaida = json_decode(json_encode($data->entrada_saida), true);
        $data_abertura = strtotime($data_abertura);
        $data_abertura = date('d/m/Y H:m:s', $data_abertura);

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("DETALHES DO CAIXA"), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;
        printer_draw_text($handle, trim("Data Aber.: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_abertura), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        if ($data_fechamento != '0000-00-00 00:00:00') {
            $data_fechamento = strtotime($data_fechamento);
            $data_fechamento = date('d/m/Y H:m:s', $data_fechamento);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("Data Fech.: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($data_fechamento), $segunda_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Inicial: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_inicial), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Bruto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_bruto), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Líquido: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_liquido), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Desconto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_desconto), $terceira_posicao, $posicao);
        $posicao = $posicao + 40;
        if (isset($total_porcentagem_garcom)) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("% Garçom: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($total_porcentagem_garcom), $terceira_posicao, $posicao);
            $posicao = $posicao + 40;
        }
        if (count($EntradaSaida) > 0) {
            printer_draw_text($handle, trim("============================================"), 10, $posicao);
            $posicao = $posicao + 40;
            printer_draw_text($handle, trim("ENTRADA - SAÍDA MANUAL"), 10, $posicao);
            $posicao = $posicao + 40;
            foreach ($EntradaSaida as $item) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['descricao'] . ": " . $item['forma_pagamento']), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if ($item['tipo'] == "Saída") {
                    printer_draw_text($handle, '-' . asDollars($item['valor']), $terceira_posicao, $posicao);
                } else {
                    printer_draw_text($handle, '+' . asDollars($item['valor']), $terceira_posicao, $posicao);
                }

                $posicao = $posicao + 40;
            }
        }

        printer_draw_text($handle, trim("============================================"), 10, $posicao);
        $posicao = $posicao + 40;
        printer_draw_text($handle, trim("FORMAS DE PAGAMENTO"), 10, $posicao);
        $posicao = $posicao + 40;
        foreach ($formas as $item) {
            $formaPagamento = $item['forma_pagamento'];
            $formaPagamento = str_replace("máquina móvel - ", "", $formaPagamento);
            $formaPagamento = str_replace("máquina", "", $formaPagamento);
            $formaPagamento = str_replace("móvel", "", $formaPagamento);
            $formaPagamento = str_replace("(", "", $formaPagamento);
            $formaPagamento = str_replace(")", "", $formaPagamento);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($formaPagamento), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($item['valor']), $terceira_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirChamarGarcom',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cliente = (isset($data->cliente)) ? $data->cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";
        $origem = (isset($data->origem)) ? $data->origem : "";
        $datetime = date_create()->format('d/m/Y H:i:s');

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
        } else if ($tamanho_impressora == 80 || $tamanho_impressora == 60) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
        } else {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, 20, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, utf8_decode(trim("Solicitação de Garçom ")), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Mesa: "), 10, $posicao);
        printer_draw_text($handle, trim($nome_mesa), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($datetime), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Cliente: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_decode($cliente);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Comanda: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($nome_mesa2), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa2);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa2, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        if ($origem == 'autoatendimento') {
            printer_draw_text($handle, utf8_decode(trim("Origem: ")), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Auto Atendimento", $segunda_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirVariosProdutos',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cliente = (isset($data->cliente)) ? $data->cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $origem = (isset($data->origem)) ? $data->origem : "";
        $lista = json_decode(json_encode($data->produtos), true);
        $datetime = date_create()->format('d/m/Y H:i:s');
        $data_pedido = (isset($data->data_pedido)) ? $data->data_pedido : "";
        $delivery = (isset($data->delivery)) ? $data->delivery : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $modelo = (isset($data->modelo)) ? $data->modelo : "offline";

        if($modelo == "online"){
            $url = "https://www.onesolucoes.com.br/beta/api/index.php/" . "getParametro/" . $id_empresa . "?idEmpresa=" . $id_empresa;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $parametro = json_decode($output, true);
            $parametro = $parametro['list'];
        }else{
            $consulta = $db->con()->prepare("SELECT * from parametro");
            $consulta->execute();
            $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        

        if($data_pedido != ""){
            $datetime = date_create($data_pedido)->format('d/m/Y H:i:s');
        }else{
            $datetime = date_create()->format('d/m/Y H:i:s');
        }

        $espacoLinhas = 40;
        $GLOBALS['nomeFonte'] = $parametro[0]['impressao_fonte'];
        $GLOBALS['fontNormal'] = $parametro[0]['impressao_peso_fonte_segunda_coluna'];
        $GLOBALS['fontBold'] = $parametro[0]['impressao_peso_fonte_primeira_coluna'];

        $fonte = $parametro[0]['impressao_tamanho_fonte'];
        $segunda_fonte = 16;
        $primeira_posicao = 150;
        $segunda_posicao = $parametro[0]['impressao_segunda_posicao'];
        $terceira_posicao = $parametro[0]['impressao_terceira_posicao'];
        $quebra_linha = $parametro[0]['impressao_quebra_linha'];
        $posicao_centro = $quebra_linha + 5;
        $peso_fonte_produto = $parametro[0]['impressao_peso_fonte_produto'];
        $peso_fonte_adicional = $parametro[0]['impressao_peso_fonte_adicional'];
        $quebra_linha_produto = $parametro[0]['impressao_quebra_linha_produto'];

        $posicao = 25;
        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "text");
        printer_set_option($handle, PRINTER_SCALE, 75);
        printer_start_doc($handle, "Print");
        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, 20, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Mesa: "), 10, $posicao);
        printer_draw_text($handle, trim($nome_mesa), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);

        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($datetime), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        if($id_pedido != ""){
            printer_draw_text($handle, utf8_decode("Nº Pedido: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($id_pedido), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;
        }

        printer_draw_text($handle, trim("Cliente: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_decode($cliente);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        printer_draw_text($handle, trim("Comanda: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($nome_mesa2), $segunda_posicao, $posicao);
        $nome_pedido_temp = utf8_encode($nome_mesa2);
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_mesa2, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        printer_draw_text($handle, utf8_decode(trim("Usuário: ")), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode(trim($usuario)), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;

        if ($origem == 'autoatendimento') {
            printer_draw_text($handle, utf8_decode(trim("Origem: ")), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Auto Atendimento", $segunda_posicao, $posicao);
            $posicao = $posicao + 40;
        }

        if ($delivery == 'true' || $delivery == true || $delivery == 1 || $delivery == '1') {
            printer_draw_text($handle, "EXTERNO", $segunda_posicao, $posicao);
        } else {
            printer_draw_text($handle, "INTERNO", $segunda_posicao, $posicao);
        }
        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, trim("---------------"), 10, $posicao);
        $posicao = $posicao + 40;
        foreach ($lista as $item) {
            $list = json_decode(json_encode($item['listAdicional']), true);
            $nome = $item['nome'];
            $quantidade = $item['quantidade'];
            $observacao = $item['observacao'];
            if (isset($item['senha_atendimento'])) {
                $senha_atendimento = $item['senha_atendimento'];
            } else {
                $senha_atendimento = "";
            }

            $nome = $item['quantidade'] . " - " . $item['nome'];

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            $produto_temp = $nome;
            if (strlen($produto_temp) >= 40) {
                $t = explode(" ", $produto_temp);
                $produto_temp2 = "";
                foreach ($t as $value) {
                    if (strlen($produto_temp2 . $value . " ") >= 25) {
                        printer_draw_text($handle, utf8_decode($produto_temp2), 10, $posicao);
                        $posicao = $posicao + 40;
                        $produto_temp2 = $value . " ";
                    } else {
                        $produto_temp2 = $produto_temp2 . $value . " ";
                    }
                }
                printer_draw_text($handle, utf8_decode($produto_temp2), 10, $posicao);
            } else {
                printer_draw_text($handle, utf8_decode($nome), 10, $posicao);
            }
            $posicao = $posicao + 40;
            if (isset($senha_atendimento)) {
                printer_draw_text($handle, utf8_decode("Senha:"), 10, $posicao);
                printer_draw_text($handle, utf8_decode($senha_atendimento), $terceira_posicao, $posicao);
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            foreach ($list as $item) {
                for ($a = 0; $a < $item['quantidade']; $a++) {
                    printer_draw_text($handle, "- " . utf8_decode($item['descricao']), 10, $posicao);
                    $posicao = $posicao + 40;
                }

            }

            if ($observacao != "") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim("OBS: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode(trim($observacao)), $segunda_posicao, $posicao);
                if (strlen($observacao) >= 25) {
                    $t = explode(" ", $observacao);
                    $observacao_temp = "";
                    foreach ($t as $value) {
                        if (strlen($observacao_temp . $value . " ") >= 25) {
                            printer_draw_text($handle, utf8_decode($observacao_temp), $segunda_posicao, $posicao);
                            $posicao = $posicao + 40;
                            $observacao_temp = $value . " ";
                        } else {
                            $observacao_temp = $observacao_temp . $value . " ";
                        }
                    }
                    printer_draw_text($handle, utf8_decode($observacao_temp), 10, $posicao);
                } else {
                    printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                }
            }

            $posicao = $posicao + 40;

            printer_draw_text($handle, trim("---------------"), 10, $posicao);
            $posicao = $posicao + 40;
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/ImprimirCaixaDetalhado',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";
        $nome_impressora = (isset($data->nome_impressora)) ? $data->nome_impressora : "";
        $tamanho_impressora = (isset($data->tamanho_impressora)) ? $data->tamanho_impressora : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";
        $valores = json_decode(json_encode($data->valores), true);

        $espacoLinhas = 40;
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $posicao_central = 80;
            $primeira_posicao = 50;
            $segunda_posicao = 140;
            $terceira_posicao = 290;
        } else {
            $fonte = 28;
            $segunda_fonte = 10;
            $posicao_central = 80;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 350;
            $quarta_posicao = 470;
            $espacoLinhas = 30;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("***RELATÓRIO DE MOVIMENTAÇÃO***"), $posicao_central, $posicao);
        $posicao = $posicao + $espacoLinhas;
        printer_draw_text($handle, trim("Abertura: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_abertura), $segunda_posicao + 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Fechamento: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_fechamento), $segunda_posicao + 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode(trim("----------------------------------------------------------------------------------------------------------------------------------------------------")), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Mesa", 10, $posicao);
        printer_draw_text($handle, "Data", $segunda_posicao, $posicao);
        printer_draw_text($handle, "Desconto", $terceira_posicao, $posicao);
        printer_draw_text($handle, "Bruto", $quarta_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($valores as $item) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $item['nome_mesa'] . ":", 10, $posicao);

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $item['data_pedido'] . " - " . $item['data_finalizacao'], $segunda_posicao, $posicao);
            printer_draw_text($handle, asDollars($item['desconto']), $terceira_posicao, $posicao);
            printer_draw_text($handle, asDollars($item['valor_total']), $quarta_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode(trim("----------------------------------------------------------------------------------------------------------------------------------------------------")), 10, $posicao);

        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, utf8_decode("Valor Bruto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_total), $quarta_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Desconto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($desconto), $quarta_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Valor Líquido: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_liquido), $quarta_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/ImprimirDetalhesCaixaMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";
        $nome_impressora = (isset($data->nome_impressora)) ? $data->nome_impressora : "";
        $tamanho_impressora = (isset($data->tamanho_impressora)) ? $data->tamanho_impressora : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : "";
        $valores = json_decode(json_encode($data->valores), true);

        $espacoLinhas = 40;
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $posicao_central = 80;
            $primeira_posicao = 50;
            $segunda_posicao = 140;
            $terceira_posicao = 290;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $posicao_central = 80;
            $primeira_posicao = 150;
            $segunda_posicao = 310;
            $terceira_posicao = 405;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $posicao_central = 80;
            $primeira_posicao = 50;
            $segunda_posicao = 230;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("***RELATÓRIO DE MOVIMENTAÇÃO***"), $posicao_central, $posicao);
        $posicao = $posicao + $espacoLinhas;
        printer_draw_text($handle, trim("Data Abertura: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_abertura), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Data Fechamento: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_fechamento), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode(trim("----------------------------------------------------------------------------------------------------------------------------------------------------")), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($valores as $item) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $item['nome_mesa'] . ":", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($item['valor_total']), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode(trim("----------------------------------------------------------------------------------------------------------------------------------------------------")), 10, $posicao);

        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, trim("Valor Bruto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_total), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, trim("Desconto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($desconto), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, utf8_decode("Garçom: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($porcentagem_garcom), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        printer_draw_text($handle, utf8_decode("Valor Líquido: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_liquido), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprimirCaixaGeral',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";
        $nome_impressora = (isset($data->nome_impressora)) ? $data->nome_impressora : "";
        $tamanho_impressora = (isset($data->tamanho_impressora)) ? $data->tamanho_impressora : "";
        $valor_inicial = (isset($data->valor_inicial)) ? $data->valor_inicial : "";
        $empresa = (isset($data->empresa)) ? $data->empresa : "";
        $previa = (isset($data->previa)) ? $data->previa : "";
        $listaCaixa = json_decode(json_encode($data->listaCaixa), true);
        $listaEntradaSaida = json_decode(json_encode($data->listaEntradaSaida), true);
        $listaDetalhes = json_decode(json_encode($data->listaDetalhes), true);
        $listaDados = json_decode(json_encode($data->listaDados), true);
        $listaConferencia = json_decode(json_encode($data->listaConferencia), true);

        $espacoLinhas = 40;
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 140;
            $terceira_posicao = 290;
        } else if ($tamanho_impressora == 80 || $tamanho_impressora == 70) {
            $fonte = 32;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 290;
            $terceira_posicao = 410;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 230;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;
        if ($previa == true) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Impressão Prévia"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Empresa: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode($empresa), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Abertura: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_abertura), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Fechamento: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data_fechamento), $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Valor Inicial: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_inicial), $terceira_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Vendas - Forma de Pagamento"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaCaixa as $item) {
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            if ($item['titulo'] == "TOTAL") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            } else {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            }
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, asDollars($item['valor']), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Entrada Manual"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaEntradaSaida as $item) {
            if ($item['tipo'] == "Entrada") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
                if ($item['titulo'] == "SALDO TOTAL FINAL") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                } else {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                }

                printer_select_font($handle, $font);
                printer_draw_text($handle, asDollars($item['valor']), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;

                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
            }

        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("Saída Manual"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaEntradaSaida as $item) {
            if ($item['tipo'] == "Saída") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
                if ($item['titulo'] == "SALDO TOTAL FINAL") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                } else {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                }

                printer_select_font($handle, $font);
                printer_draw_text($handle, "-" . asDollars($item['valor']), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;

                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
            }

        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("RESUMO"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaDetalhes as $item) {
            if ($item['titulo'] == "SOMA - ENTRADA MANUAL") {
                $item['titulo'] = "ENTRADA MANUAL";
            } else if ($item['titulo'] == "SOMA - SAÍDA MANUAL") {
                $item['titulo'] = "SAÍDA MANUAL";
            }

            if ($item['titulo'] == "TOTAL FINAL") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            } else {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            }
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if ($item['titulo'] == "SAÍDA MANUAL" || $item['titulo'] == "DESCONTO") {
                printer_draw_text($handle, "-" . asDollars($item['valor']), $terceira_posicao, $posicao);
            } else {
                printer_draw_text($handle, asDollars($item['valor']), $terceira_posicao, $posicao);
            }

            $posicao = $posicao + $espacoLinhas;

            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, utf8_decode("DADOS"), 10, $posicao);
        $posicao = $posicao + $espacoLinhas;

        foreach ($listaDados as $item) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);

            printer_select_font($handle, $font);
            if ($item['titulo'] == "Número de Pedidos" || $item['titulo'] == 'Média de Produtos') {
                printer_draw_text($handle, ($item['valor']), $terceira_posicao, $posicao);
            } else {
                printer_draw_text($handle, asDollars($item['valor']), $terceira_posicao, $posicao);
            }

            $posicao = $posicao + $espacoLinhas;

            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }
        }

        if ($previa == false) {
            $fonte = 19;
            $segunda_fonte = 0;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("------------------------------------------------------- "), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("CONFERÊNCIA - RESULTADO"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);

            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Descrição"), 10, $posicao);
            printer_draw_text($handle, "Sistema", $segunda_posicao - 70, $posicao);
            printer_draw_text($handle, "Confer", $terceira_posicao - 70, $posicao);
            printer_draw_text($handle, utf8_decode("Diferença"), $terceira_posicao + 70, $posicao);
            $posicao = $posicao + $espacoLinhas;
            foreach ($listaConferencia as $item) {
                if ($item['titulo'] == "CARTÃO DE DÉBITO") {
                    $item['titulo'] = "DÉBITO";
                } else if ($item['titulo'] == "CARTÃO DE CRÉDITO") {
                    $item['titulo'] = "CRÉDITO";
                } else if ($item['titulo'] == "IFOOD - PAGAMENTO ONLINE") {
                    $item['titulo'] = "IFOOD - ONLINE";
                } else if ($item['titulo'] == "PIX - PAGAMENTO ONLINE") {
                    $item['titulo'] = "PIX - ONLINE";
                }
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($item['titulo']), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);

                printer_select_font($handle, $font);
                printer_draw_text($handle, asDollars(floatval($item['valor'])), $segunda_posicao - 70, $posicao);
                printer_draw_text($handle, asDollars(floatval($item['conferido'])), $terceira_posicao - 70, $posicao);
                printer_draw_text($handle, asDollars(floatval($item['conferido']) - floatval($item['valor'])), $terceira_posicao + 70, $posicao);
                $posicao = $posicao + $espacoLinhas;

                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
            }
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->post(
    '/imprirmirProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cliente = (isset($data->cliente)) ? $data->cliente : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $tamanho_impressora = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $nome_impressora = (isset($data->impressora)) ? $data->impressora : "";
        $list = json_decode(json_encode($data->listAdicional), true);
        $nome = utf8_decode($quantidade . " - " . $nome);
        $observacao = utf8_decode($observacao);

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
        }

        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        $posicao = 10;

        printer_draw_text($handle, trim("Cliente: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($cliente), $segunda_posicao, $posicao);
        $nome_pedido_temp = $cliente;
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $cliente, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Produto: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        $produto_temp = $nome;
        if (strlen($produto_temp) >= 25) {
            $t = explode(" ", $produto_temp);
            $produto_temp2 = "";
            foreach ($t as $value) {
                if (strlen($produto_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $produto_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $produto_temp2 = $value . " ";
                } else {
                    $produto_temp2 = $produto_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $produto_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome, $segunda_posicao, $posicao);
        }
        $posicao = $posicao + 40;

        foreach ($list as $item) {
            printer_draw_text($handle, trim($item['descricao']), 10, $posicao);
            $posicao = $posicao + 40;
        }

        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("OBS: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($observacao), $segunda_posicao, $posicao);
        if (strlen($observacao) >= 25) {
            $t = explode(" ", $observacao);
            $observacao_temp = "";
            foreach ($t as $value) {
                if (strlen($observacao_temp . $value . " ") >= 25) {
                    printer_draw_text($handle, $observacao_temp, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $observacao_temp = $value . " ";
                } else {
                    $observacao_temp = $observacao_temp . $value . " ";
                }
            }
            printer_draw_text($handle, $observacao_temp, 10, $posicao);
        } else {
            printer_draw_text($handle, $observacao, $segunda_posicao, $posicao);
        }

        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Valor: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, asDollars($valor_total), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;
        $posicao = $posicao + 40;
        printer_draw_text($handle, trim("---------------"), 10, $posicao);

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->get(
    '/imprimirPedido2/:id/:tipo',
    function ($id, $tipo) use ($app, $db) {

        if ($tipo == 'app' || $tipo == 'link') {
            $url = "http://www.uaipedido.com.br/uaipedido/api/" . "getDadosImpressao/" . $id;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            //   curl_setopt($ch, CURLOPT_POST, true);
            //   curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $output = curl_exec($ch);
            curl_close($ch);
            $list = json_decode($output);

        } else {
            $consulta = $db->con()->prepare("select * from pedido where id = '$id'");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("SELECT pedido.data_pedido, pedido.numero_pedido,
         cliente.nome as cliente_nome, pedido.desconto, empresa.nome as empresa,
         pedido.endereco, pedido.numero, pedido.complemento, pedido.bairro,
         pedido.forma_pagamento, pedido.troco, pedido.retira_local,
         pedido.taxa_entrega, pedido.valor_total, pedido.observacao,
         produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
         pedido_produto.observacao as observacao_produto, pedido.referencia, cliente.telefone,
         pedido_produto.valor_produto as valor, pedido_produto.quantidade from pedido, pedido_produto, cliente,
         produto, empresa where pedido.id_empresa = empresa.id and
         pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id and pedido.id_cliente = cliente.id
         and pedido_produto.id_pedido = '$id' order by produto.ordem

         ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i = 0;
            foreach ($list as $item) {
                $id_produto = $item['id'];
                $sequencia_produto = $item['sequencia'];
                $consulta = $db->con()->prepare("SELECT adicional.descricao,
           adicional_produto_pedido.valor_adicional as valor,
           adicional_produto_pedido.quantidade,
           adicional_produto_pedido.texto_observacao
           from adicional, produto, pedido, adicional_produto_pedido where
           adicional_produto_pedido.id_adicional = adicional.id and
           adicional_produto_pedido.id_produto = produto.id and
           adicional_produto_pedido.id_pedido = pedido.id and
           adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
           adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem

           ");
                $consulta->execute();
                $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $i++;

            }
        }

        if ($tipo == 'app') {
            $data = $list[0]->data_pedido;
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $list[0]->numero_pedido;
            $nome = $list[0]->cliente_nome;
            $telefone = $list[0]->telefone;
            $retira_local = $list[0]->retira_local;
            $endereco = $list[0]->endereco;
            $endereco = sanitizeString($endereco);
            $numero = $list[0]->numero;
            $complemento = $list[0]->complemento;
            $bairro = $list[0]->bairro;
            $bairro = sanitizeString($bairro);
            $forma_pagamento = $list[0]->forma_pagamento;
            $forma_pagamento = sanitizeString($forma_pagamento);
            $troco = $list[0]->troco;
            $referencia = $list[0]->referencia;
            $desconto = $list[0]->desconto;
            $desconto_texto = asDollars($desconto);
            $taxa_entrega = $list[0]->taxa_entrega;
            $taxa_entrega = asDollars($taxa_entrega);
            $valor_total = $list[0]->valor_total;
            $observacao = $list[0]->observacao;
            $observacao = sanitizeString($observacao);
        } else {

            $data = $list[0]['data_pedido'];
            $data = date('d/m/Y H:i:s', strtotime($data));
            $numero_pedido = $list[0]['numero_pedido'];
            $nome = $list[0]['cliente_nome'];
            $empresa = strtoupper($list[0]['empresa']);
            $telefone = $list[0]['telefone'];
            $retira_local = $list[0]['retira_local'];
            $endereco = $list[0]['endereco'];
            $endereco = sanitizeString($endereco);
            $numero = $list[0]['numero'];
            $complemento = utf8_decode($list[0]['complemento']);
            $bairro = $list[0]['bairro'];
            $bairro = sanitizeString($bairro);
            $forma_pagamento = $list[0]['forma_pagamento'];
            $forma_pagamento = sanitizeString($forma_pagamento);
            $troco = $list[0]['troco'];
            $desconto = $list[0]['desconto'];
            $referencia = utf8_decode($list[0]['referencia']);
            $desconto_texto = asDollars($desconto);
            $taxa_entrega = $list[0]['taxa_entrega'];
            $taxa_entrega = asDollars($taxa_entrega);
            $valor_total = $list[0]['valor_total'];
            $observacao = $list[0]['observacao'];
            $observacao = sanitizeString($observacao);
        }

        if ($empresa == "CHAMA!") {
            $tamanho_impressora = 58;
        } else {
            $tamanho_impressora = 80;
        }

        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
        }

        $handle = printer_open("POS-58(copy of 2)");
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);

        $posicao = 10;

        $texto = array();
        printer_draw_text($handle, trim("COMPROVANTE DE ENTREGA"), 50, $posicao);
        $posicao = $posicao + 40;
        if ($empresa == "CHAMA!") {
            printer_draw_text($handle, trim($empresa), 150, $posicao);
        }
        $posicao = $posicao + 40;
        printer_draw_text($handle, trim("Data: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim($data), $segunda_posicao, $posicao);
        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Pedido: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        $nome_pedido = utf8_decode($numero_pedido . ' - ' . $nome);
        $nome_pedido_temp = $nome_pedido;
        if (strlen($nome_pedido_temp) >= 25) {
            $t = explode(" ", $nome_pedido_temp);
            $nome_pedido_temp2 = "";
            foreach ($t as $value) {
                if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                    printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                    $posicao = $posicao + 40;
                    $nome_pedido_temp2 = $value . " ";
                } else {
                    $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
        } else {
            printer_draw_text($handle, $nome_pedido, $segunda_posicao, $posicao);
        }

        if ($telefone != null && $telefone != '') {
            $posicao = $posicao + 40;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("Telefone: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($telefone), $segunda_posicao, $posicao);
            $posicao = $posicao + 40;
        }
        if ($retira_local == 1) {
            $posicao = $posicao + 40;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Pedido sera retirado no local", 10, $posicao);
        } else {
            $endereco_temp = "";
            $endereco = utf8_decode($endereco . " " . $numero);

            $endereco_temp = utf8_decode($endereco);

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Endereço: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            $endereco_temp = utf8_decode($endereco);
            if (strlen($endereco_temp) >= 25) {
                $t = explode(" ", $endereco_temp);
                $endereco_temp2 = "";
                foreach ($t as $value) {
                    if (strlen($endereco_temp2 . $value . " ") >= 25) {
                        printer_draw_text($handle, $endereco_temp2, $segunda_posicao, $posicao);
                        $posicao = $posicao + 40;
                        $endereco_temp2 = $value . " ";
                    } else {
                        $endereco_temp2 = $endereco_temp2 . $value . " ";
                    }
                }
                printer_draw_text($handle, $endereco_temp2, 10, $posicao);
            } else {
                printer_draw_text($handle, $endereco, $segunda_posicao, $posicao);
            }

            if ($complemento != '' && $complemento != null && $complemento != 'null') {
                $posicao = $posicao + 40;
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim("Complem: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, $complemento, $segunda_posicao, $posicao);
            }

            $posicao = $posicao + 40;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("Bairro: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $bairro, $segunda_posicao, $posicao);
            $posicao = $posicao + 40;
            if ($referencia != null && $referencia != '') {
                $referencia_temp = utf8_decode($referencia);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Referência: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($referencia_temp) >= 25) {
                    $t = explode(" ", $referencia_temp);
                    $referencia_temp2 = "";
                    foreach ($t as $value) {
                        if (strlen($referencia_temp2 . $value . " ") >= 25) {
                            printer_draw_text($handle, $referencia_temp2, $segunda_posicao, $posicao);
                            $posicao = $posicao + 40;
                            $referencia_temp2 = $value . " ";
                        } else {
                            $referencia_temp2 = $referencia_temp2 . $value . " ";
                        }
                    }
                    printer_draw_text($handle, $referencia_temp2, 10, $posicao);
                } else {
                    printer_draw_text($handle, $referencia, $segunda_posicao, $posicao);
                }
            }
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Pagamento: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $forma_pagamento, $segunda_posicao, $posicao);

        if ($troco != '') {
            $troco_para = asDollars($troco);
            $troco = $troco - $valor_total + $desconto;
            $troco = asDollars($troco);
            $sub_total = asDollars($valor_total);
            $valor_total = asDollars($valor_total - $desconto);
            if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                $posicao = $posicao + 40;
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim("Troco para: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, $troco_para, $segunda_posicao, $posicao);
            }
        } else {
            $sub_total = asDollars($valor_total);
            $valor_total = asDollars($valor_total - $desconto);
        }

        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Taxa Ent: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $taxa_entrega, $segunda_posicao, $posicao);

        if ($desconto != '0') {
            $posicao = $posicao + 40;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("Desconto: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $desconto_texto, $segunda_posicao, $posicao);

        }
        if ($sub_total != $valor_total) {
            $posicao = $posicao + 40;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim("Sub-Total: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $sub_total, $segunda_posicao, $posicao);

        }
        $posicao = $posicao + 40;
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, trim("Valor Total: "), 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, $valor_total, $segunda_posicao, $posicao);

        if ($troco != '') {
            if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                $posicao = $posicao + 40;
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim("Valor troco: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, $troco, $segunda_posicao, $posicao);

            }
        } else {
            if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                $posicao = $posicao + 40;
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, trim("Valor troco: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, 'SEM TROCO', $segunda_posicao, $posicao);

            }

        }
        $observacao_temp = utf8_decode($observacao);
        if (strlen($observacao_temp) >= 31) {
            $posicao = $posicao + 40;
            $t = explode(" ", $observacao_temp);
            $observacao_temp2 = "";
            foreach ($t as $value) {
                if (strlen($observacao_temp2 . $value . " ") >= 31) {
                    printer_draw_text($handle, $observacao_temp2, 10, $posicao);
                    $posicao = $posicao + 40;
                    $observacao_temp2 = $value . " ";
                } else {
                    $observacao_temp2 = $observacao_temp2 . $value . " ";
                }
            }
            printer_draw_text($handle, $observacao_temp2, 10, $posicao);
        } else {
            $posicao = $posicao + 40;
            printer_draw_text($handle, $observacao, $segunda_posicao, $posicao);
        }

        $posicao = $posicao + 40;
        printer_draw_text($handle, "---------------------------------------------", 10, $posicao);
        $posicao = $posicao + 40;
        $cabecalho = $texto;
        printer_draw_text($handle, 'Qde', 10, $posicao);
        printer_draw_text($handle, 'Produto', $segunda_posicao, $posicao);
        printer_draw_text($handle, 'Total', $terceira_posicao, $posicao);
        $texto[] = "Qde             Produto         Total\n";
        foreach ($list as $item) {
            if ($tipo == "app") {
                $quantidade = $item->quantidade;
                $nome_produto = $item->nome;
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item->valor;
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item->observacao_produto;
            } else {
                $quantidade = $item['quantidade'];
                $nome_produto = $item['nome'];
                $nome_produto = sanitizeString($nome_produto);
                $valor_produto = $item['valor'];
                $valor_total_produto = $valor_produto * $quantidade;
                $valor_total_produto = asDollars($valor_total_produto);
                $valor_produto = asDollars($valor_produto);
                $observacao_produto = $item['observacao_produto'];
            }
            if ($quantidade == 1) {
                $quantidade = $quantidade . " (UM)";
            } else if ($quantidade == 2) {
                $quantidade = $quantidade . " (DOIS)";
            } else if ($quantidade == 3) {
                $quantidade = $quantidade . " (TRES)";
            } else if ($tquantidade == 4) {
                $quantidade = $quantidade . " (QUATRO)";
            } else if ($tquantidade == 5) {
                $quantidade = $quantidade . " (CINCO)";
            } else if ($quantidade == 6) {
                $quantidade = $quantidade . " (SEIS)";
            } else if ($quantidade == 7) {
                $quantidade = $quantidade . " (SETE)";
            } else if ($quantidade == 8) {
                $quantidade = $quantidade . " (OITO)";
            } else if ($quantidade == 9) {
                $quantidade = $quantidade . " (NOVE)";
            }

            $posicao = $posicao + 40;
            printer_draw_text($handle, $quantidade, 10, $posicao);
            printer_draw_text($handle, $nome_produto, $segunda_posicao, $posicao);
            printer_draw_text($handle, $valor_total_produto, $terceira_posicao, $posicao);

            if ($tipo == "app") {
                foreach ($item->adicional as $item2) {
                    $descricao = $item2->descricao;
                    $descricao = sanitizeString($descricao);
                    if ($item2->valor != '0') {
                        $valor_adicional = $item2->valor;
                        $valor_total_adicional = $quantidade * $valor_adicional;
                        $valor_adicional = asDollars($valor_adicional);
                        $valor_total_adicional = asDollars($valor_total_adicional);
                        $temp = "+$descricao $valor_total_adicional";
                        if (strlen($temp) >= 31) {
                            $temp = "+$descricao";
                            $texto[] = $temp;
                            $temp = "$valor_total_adicional";
                            $texto[] = $temp;
                        } else {
                            $texto[] = "+$descricao $valor_total_adicional";
                        }
                    } else {
                        $texto[] = $descricao;
                    }

                }
            } else {
                foreach ($item['adicional'] as $item2) {
                    $descricao = $item2['descricao'];
                    if ($descricao == "Maionese Caseira" || $descricao == "Chimichurri" || $descricao == "Barbecue" || $descricao == "SEM MOLHO") {
                        $descricao = "MOLHO: " . $descricao;
                    } else if ($descricao == 'Alface Americano' || $descricao == 'Tomate' || $descricao == 'Rúcula' || $descricao == "SEM SALADA") {
                        $descricao = "SALADA: " . $descricao;
                    } else if ($descricao == 'Cebola caramelizada' || $descricao == 'Cebola roxa' || $descricao == 'Cebola desidratada' || $descricao == "SEM CEBOLA") {
                        $descricao = 'CEBOLA: ' . $descricao;
                    } else if ($descricao == 'Provolone' || $descricao == 'Mozarela' || $descricao == 'Cheddar' || $descricao == 'Prato' || $descricao == "SEM QUEIJO") {
                        $descricao = "QUEIJO: " . $descricao;
                    }
                    $descricao = sanitizeString($descricao);
                    $quantidade_adicional = $item2['quantidade'];

                    if ($quantidade_adicional == 1) {
                        $quantidade_adicional = $quantidade_adicional . " (UM)";
                    } else if ($quantidade_adicional == 2) {
                        $quantidade_adicional = $quantidade_adicional . " (DOIS)";
                    } else if ($quantidade_adicional == 3) {
                        $quantidade_adicional = $quantidade_adicional . " (TRES)";
                    } else if ($quantidade_adicional == 4) {
                        $quantidade_adicional = $quantidade_adicional . " (QUATRO)";
                    } else if ($quantidade_adicional == 5) {
                        $quantidade_adicional = $quantidade_adicional . " (CINCO)";
                    } else if ($quantidade_adicional == 6) {
                        $quantidade_adicional = $quantidade_adicional . " (SEIS)";
                    } else if ($quantidade_adicional == 7) {
                        $quantidade_adicional = $quantidade_adicional . " (SETE)";
                    } else if ($quantidade_adicional == 8) {
                        $quantidade_adicional = $quantidade_adicional . " (OITO)";
                    } else if ($quantidade_adicional == 9) {
                        $quantidade_adicional = $quantidade_adicional . " (NOVE)";
                    }
                    if ($item2['valor'] != '0') {
                        $valor_adicional = $item2['valor'];

                        $valor_total_adicional = $quantidade * ($valor_adicional * $quantidade_adicional);
                        $valor_adicional = asDollars($valor_adicional);
                        $valor_total_adicional = asDollars($valor_total_adicional);
                        $temp = "+$quantidade_adicional - $descricao $valor_total_adicional";

                        if (strlen($temp) >= 31) {
                            $temp = "+$quantidade_adicional - $descricao";
                            $texto[] = $temp;
                            $temp = "$valor_total_adicional";
                            $texto[] = $temp;
                        } else {
                            $texto[] = "+$quantidade_adicional - $descricao $valor_total_adicional";

                        }
                    } else {
                        $posicao = $posicao + 40;
                        if ($quantidade_adicional != '1 (UM)') {
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                            printer_select_font($handle, $font);
                            printer_draw_text($handle, $quantidade_adicional, 10, $posicao);
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                            printer_select_font($handle, $font);
                            printer_draw_text($handle, $descricao, $segunda_posicao, $posicao);
                        } else {
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                            printer_select_font($handle, $font);
                            printer_draw_text($handle, $descricao, 10, $posicao);
                        }

                    }
                }
            }

            if ($observacao_produto != "") {
                $a = "Observação: ";
                $obs_temp = utf8_decode($a . $observacao_produto);
                if (strlen($obs_temp) >= 31) {
                    $t = explode(" ", $obs_temp);
                    $obs_temp2 = "";
                    foreach ($t as $value) {
                        if (strlen($obs_temp2 . $value . " ") >= 31) {
                            $texto[] = $obs_temp2;
                            $obs_temp2 = $value . " ";
                        } else {
                            $obs_temp2 = $obs_temp2 . $value . " ";
                        }
                    }
                    $texto[] = $obs_temp2;
                } else {
                    $texto[] = $obs_temp;
                }
            }
            $texto[] = "---";
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);

        // imprimir($texto, $cabecalho, $retira_local);

    }

);

$app->get(
    '/buscarBancoEmpresa',
    function () use ($app) {
        try {
            $retorno = "";
            $dbProv = new criarConexao('uaipe762_33');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "33";
            }

            $dbProv = new criarConexao('uaipe762_salgados_heranca');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "40";
            }

            $dbProv = new criarConexao('uaipe762_157');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "157";
            }

            $dbProv = new criarConexao('uaipe762_50');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "50";
            }

            $dbProv = new criarConexao('uaipe762_51');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "51";
            }

            $dbProv = new criarConexao('uaipe762_53');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "53";
            }

            $dbProv = new criarConexao('uaipe762_54');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "54";
            }

            $dbProv = new criarConexao('uaipe762_55');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "55";
            }

            $dbProv = new criarConexao('uaipe762_62');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "62";
            }

            $dbProv = new criarConexao('uaipe762_78');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "78";
            }

            $dbProv = new criarConexao('uaipe762_83');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "83";
            }

            $dbProv = new criarConexao('uaipe762_84');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "84";
            }

            $dbProv = new criarConexao('uaipe762_86');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "86";
            }

            $dbProv = new criarConexao('uaipe762_96');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "96";
            }

            $dbProv = new criarConexao('uaipe762_97');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "97";
            }

            $dbProv = new criarConexao('uaipe762_104');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "104";
            }

            $dbProv = new criarConexao('uaipe762_107');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "107";
            }

            $dbProv = new criarConexao('uaipe762_111');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "111";
            }

            $dbProv = new criarConexao('uaipe762_113');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "113";
            }

            $dbProv = new criarConexao('uaipe762_115');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "115";
            }

            $dbProv = new criarConexao('uaipe762_116');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "116";
            }

            $dbProv = new criarConexao('uaipe762_118');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "118";
            }

            $dbProv = new criarConexao('uaipe762_119');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "119";
            }

            $dbProv = new criarConexao('uaipe762_122');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "122";
            }

            $dbProv = new criarConexao('uaipe762_133');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "133";
            }

            $dbProv = new criarConexao('uaipe762_134');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "134";
            }

            $dbProv = new criarConexao('uaipe762_137');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "137";
            }

            $dbProv = new criarConexao('uaipe762_144');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "144";
            }

            $dbProv = new criarConexao('uaipe762_146');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "146";
            }

            $dbProv = new criarConexao('uaipe762_147');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "147";
            }

            $dbProv = new criarConexao('uaipe762_148');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "148";
            }

            $dbProv = new criarConexao('uaipe762_164');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "164";
            }

            $dbProv = new criarConexao('uaipe762_166');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "166";
            }

            $dbProv = new criarConexao('uaipe762_168');
            if ($dbProv->con() != null && $retorno == "") {
                $retorno = "168";
            }

            echo json_decode($retorno);

        } catch (PDOException $e) {
            echo json_encode("erro");
        }

    }
);

$app->get(
    '/getProdutosOrdemAlfabetica/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select produto.id, produto.nome, produto.descricao, produto.monte_produto, produto.a_partir,
       produto.valor, categoria_produto.descricao as categoria, produto.imagem, produto.disponivel, produto.tipo, produto.mostrar_dia
       from categoria_produto, produto
       where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
       and cancelado = 'false'
       order by nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosSaipos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, nome, codigo_saipos from produto order by nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalSaipos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, descricao, codigo_saipos from adicional order by descricao");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/atualizarImagemLogo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $logo = (isset($data->logo)) ? $data->logo : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE empresa set logo = '$logo'
    where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarProdutoPedidoDesconto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tipo_desconto = (isset($data->tipo_desconto)) ? $data->tipo_desconto : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE pedido set tipo_desconto = '$tipo_desconto', desconto = 0 where id = '$id'");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE pedido_produto set desconto = 0 where id_pedido = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarSenhaUsuario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $senha = (isset($data->senha)) ? $data->senha : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE usuario set senha = '$senha'
  where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarDadosLocalIntegracaoifood',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("UPDATE parametro set
        integracao_ifood = 'false', versao_api_ifood = 'v2' ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/rodarScriptBancoDados',
    function () use ($app, $db) {
        /*   $consulta = $db->con()->prepare("UPDATE bairro set bairro.nome = trim(bairro.nome), bairro.cidade = trim(bairro.cidade)");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE cliente set cliente.bairro = trim(cliente.bairro), cliente.cidade = trim(cliente.cidade) ");
        $consulta->execute(); */
        $consulta = $db->con()->prepare("DELETE from whatsapp_historico ");
        $consulta->execute();
        $consulta = $db->con()->prepare("DELETE from whatsapp_mensagem_enviar where status = 'enviado' or
        TIMESTAMPDIFF(HOUR, data_cadastro, now()) >= 2 ");
        $consulta->execute();
        //    $consulta = $db->con()->prepare("UPDATE parametro set versao_gestao_delivery = 'v2' ");
        //    $consulta->execute();

        /*    $consulta = $db->con()->prepare("SELECT id,descricao, COUNT(descricao), valor_pagamento, COUNT(valor_pagamento), id_nfce, COUNT(id_nfce)
        FROM nfce_forma_pagamento GROUP BY descricao, valor_pagamento, id_nfce HAVING COUNT(descricao) > 1
        AND COUNT(valor_pagamento) > 1
        AND COUNT(id_nfce) > 1");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        foreach ($list as $item) {
        $id = $item['id'];
        $consulta = $db->con()->prepare("DELETE from nfce_forma_pagamento where id = '$id' ");
        $consulta->execute();
        } */

        echo json_encode("ok");
    }
);

$app->get(
    '/getTabelaPrecoProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from tabela_preco_produto_adicional where
      id_produto = '$id' order by tipo, data_cadastro DESC

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getMensagensWhatsappEnviar/:status',
    function ($status) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("DELETE from whatsapp_mensagem_enviar where TIMESTAMPDIFF(HOUR, data_cadastro,'$datetime') > 3");
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT * from whatsapp_mensagem_enviar
        where status = '$status' and tentativas <= 3 LIMIT 1

       ");
        $consulta->execute();
        $retorno = new stdClass();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $retorno->lista = $list;
        if (count($list) > 0) {
            $id = $list[0]['id'];
            $consulta = $db->con()->prepare("UPDATE whatsapp_mensagem_enviar set tentativas = tentativas + 1
          where id = '$id'");
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("SELECT intervalo_busca_whatsapp FROM parametro");
        $consulta->execute();
        $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $retorno->intervalo = $list2[0]['intervalo_busca_whatsapp'];
        echo json_encode(array("list" => $retorno));

    }
);

$app->get(
    '/getMensagensWhatsappEnviarv2/:status',
    function ($status) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("DELETE from whatsapp_mensagem_enviar where TIMESTAMPDIFF(HOUR, data_cadastro,'$datetime') > 3");
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT * from whatsapp_mensagem_enviar
        where status = '$status' and tentativas <= 3

       ");
        $consulta->execute();
        $retorno = new stdClass();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $retorno->lista = $list;
        if (count($list) > 0) {
            foreach ($list as $item) {
                $id = $item['id'];
                $consulta = $db->con()->prepare("UPDATE whatsapp_mensagem_enviar set tentativas = tentativas + 1
          where id = '$id'");
                $consulta->execute();
            }
        }

        $consulta = $db->con()->prepare("SELECT intervalo_busca_whatsapp FROM parametro");
        $consulta->execute();
        $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $retorno->intervalo = $list2[0]['intervalo_busca_whatsapp'];
        echo json_encode(array("list" => $retorno));

    }
);

$app->post(
    '/atualizarStatusMensagemWhatsapp',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE whatsapp_mensagem_enviar set
        status = '$status', data_envio = '$datetime' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/updateProdutoFavorito',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $favorito = (isset($data->favorito)) ? $data->favorito : "false";

        $consulta = $db->con()->prepare("UPDATE produto set favorito = '$favorito' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarMensagemWhatsapp',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $mensagem = (isset($data->mensagem)) ? $data->mensagem : "";
        $status = (isset($data->status)) ? $data->status : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $mensagem2 = (isset($data->mensagem2)) ? $data->mensagem2 : "";
        $mensagem3 = (isset($data->mensagem3)) ? $data->mensagem3 : "";
        $arquivo = (isset($data->arquivo)) ? $data->arquivo : "";
        $tipo_arquivo = (isset($data->tipo_arquivo)) ? $data->tipo_arquivo : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT adicionar_nove_whatsapp from parametro");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if ($list[0]['adicionar_nove_whatsapp'] == 'true') {
            $numero = substr_replace($numero, '9', 2, 0);
        }

        $consulta = $db->con()->prepare("INSERT INTO whatsapp_mensagem_enviar
      (mensagem, status, numero, data_cadastro, mensagem2, mensagem3, arquivo, tipo_arquivo)
       VALUES ('$mensagem', '$status', '$numero', '$datetime',
       '$mensagem2', '$mensagem3', '$arquivo', '$tipo_arquivo') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarMensagemWhatsappMassa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $arquivo = (isset($data->arquivo)) ? $data->arquivo : "";
        $tipo_arquivo = (isset($data->tipo_arquivo)) ? $data->tipo_arquivo : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $lista = json_decode(json_encode($data->lista), true);

        $consulta = $db->con()->prepare("SELECT adicionar_nove_whatsapp from parametro");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        foreach ($lista as $item) {
            $numero = $item['telefone'];
            $mensagem = $item['mensagem'];
            $mensagem2 = $item['mensagem2'];
            $mensagem3 = $item['mensagem3'];

            if ($list[0]['adicionar_nove_whatsapp'] == 'true') {
                $numero = substr_replace($numero, '9', 2, 0);
            }

            $consulta = $db->con()->prepare("INSERT INTO whatsapp_mensagem_enviar
      (mensagem, status, numero, data_cadastro, mensagem2, mensagem3, arquivo, tipo_arquivo)
       VALUES ('$mensagem', 'enviar', '$numero', '$datetime',
       '$mensagem2', '$mensagem3', '$arquivo', '$tipo_arquivo') ");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarMensagemWhatsappHistorico',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $mensagem = (isset($data->mensagem)) ? $data->mensagem : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $mensagem = addslashes($mensagem);
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT id from whatsapp_historico where
      telefone = '$telefone' and mensagem = '$mensagem' and
      TIMESTAMPDIFF(SECOND, data_envio,'$datetime') <= 5 ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO whatsapp_historico
          (mensagem, telefone, data_envio) VALUES ('$mensagem', '$telefone', '$datetime') ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("nao_enviar");
        }

    }
);

$app->post(
    '/salvarTabelaPrecoProdutoAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $a_partir = (isset($data->a_partir)) ? $data->a_partir : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("INSERT INTO tabela_preco_produto_adicional
      (valor, a_partir, tipo, data_cadastro, id_produto) VALUES ('$valor', '$a_partir', '$tipo', '$datetime', '$id_produto') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarTabelaPrecoProdutoAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $a_partir = (isset($data->a_partir)) ? $data->a_partir : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE tabela_preco_produto_adicional set
        valor = '$valor', a_partir = '$a_partir', tipo = '$tipo', data_cadastro = '$datetime'
        where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->get(
    '/getProdutosAgendamento/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT agendamento_produto.*, produto.nome, produto.descricao,
       produto.duracao_execucao from agendamento_produto inner join produto on agendamento_produto.id_produto = produto.id
       where agendamento_produto.id_agendamento = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCodigoFiscal',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from codigo_fiscal order by codigo_fiscal

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getImpressoras',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from impressora

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosSincronizacao/:id',
    function ($id) use ($app, $db) {
        $list = new stdClass();
        $consulta = $db->con()->prepare("SELECT * from categoria_produto where id_empresa = '$id' ");
        $consulta->execute();
        $list->categoria_produto = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto where id_empresa = '$id' ");
        $consulta->execute();
        $list->produto = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from adicional where id_empresa = '$id' ");
        $consulta->execute();
        $list->adicional = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from adicional_produto ");
        $consulta->execute();
        $list->adicional_produto = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from forma_pagamento where id_empresa = '$id' ");
        $consulta->execute();
        $list->forma_pagamento = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from bandeira_cartao ");
        $consulta->execute();
        $list->bandeira_cartao = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from bandeira_empresa where id_empresa = '$id' ");
        $consulta->execute();
        $list->bandeira_empresa = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from bairro  ");
        $consulta->execute();
        $list->bairro = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT id, id_bairro, id_empresa, valor, COALESCE(tempo_entrega, 0) as tempo_entrega from bairro_empresa where id_empresa = '$id' ");
        $consulta->execute();
        $list->bairro_empresa = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from promocao where id_empresa = '$id' ");
        $consulta->execute();
        $list->promocao = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from usuario where id_empresa = '$id' ");
        $consulta->execute();
        $list->usuario = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from sabor");
        $consulta->execute();
        $list->sabor = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto_fiscal");
        $consulta->execute();
        $list->produto_fiscal = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from composicao_fiscal");
        $consulta->execute();
        $list->composicao_fiscal = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from cidade");
        $consulta->execute();
        $list->cidade = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from produto_imagem");
        $consulta->execute();
        $list->produto_imagem = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from tabela_preco_produto_adicional");
        $consulta->execute();
        $list->tabela_preco_produto_adicional = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from grupo_impressao");
        $consulta->execute();
        $list->grupo_impressao = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosSugestao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto where produto_sugestao = 'true' and id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosFiscalEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
       crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes, senha_certificado,
       versao,tokenIBPT,CSC,CSCid from empresa where id = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/criarProdutoEstoqueTodosProdutos/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from produto where id_empresa = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $consulta = $db->con()->prepare("SELECT id from produto_estoque where id_produto = '$id_produto' ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list2) == 0) {
                $consulta = $db->con()->prepare("INSERT INTO produto_estoque (id_produto, qt_estoque)
          VALUES ('$id_produto', 0)");
                $consulta->execute();
            }
        }
        echo json_encode("ok");
    }
);

$app->post(
    '/criarProdutoFiscalTodosProdutos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from produto");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $consulta = $db->con()->prepare("SELECT id from produto_fiscal where id_produto = '$id_produto' ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list2) == 0) {
                $consulta = $db->con()->prepare("INSERT INTO produto_fiscal (id_produto, puxar_fiscal,codigo_ncm,cfop,icms_origem,icms_situacao_tributaria,
                icms_aliquota,icms_modalidade_base_calculo,cest,ean,nome_fiscal,valor_fiscal)
          VALUES ('$id_produto', 'true',null,null,null,null,null,null,null,null,null,null)");
                $consulta->execute();
            }
        }

        $consulta = $db->con()->prepare("SELECT id from adicional");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        foreach ($list as $item) {
            $id_adicional = $item['id'];
            $consulta = $db->con()->prepare("SELECT id from produto_fiscal where id_adicional = '$id_adicional' ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list2) == 0) {
                $consulta = $db->con()->prepare("INSERT INTO produto_fiscal (id_adicional, puxar_fiscal,codigo_ncm,cfop,icms_origem,icms_situacao_tributaria,
                icms_aliquota,icms_modalidade_base_calculo,cest,ean,nome_fiscal,valor_fiscal)
          VALUES ('$id_adicional', 'true',null,null,null,null,null,null,null,null,null,null)");
                $consulta->execute();
            }
        }
        echo json_encode("ok");
    }
);

$app->get(
    '/getProdutosDestaque/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT count(id_produto) as qt_produto, produto.* from pedido_produto
      inner join produto on pedido_produto.id_produto = produto.id where produto.id_empresa = '$id' GROUP BY id_produto
      order by qt_produto DESC LIMIT 5

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
  '/getRelatorioClienteParaWhats',
  function () use ($app, $db) {

    $data = json_decode($app->request()->getBody());
    $relatorio = (isset($data->relatorio)) ? $data->relatorio : "";

    if($relatorio == "Clientes na Casa"){
      $consulta = $db->con()->prepare("SELECT cliente.id, cliente.nome, cliente.telefone, cliente.data_nascimento from pedido inner join cliente
      on pedido.id_cliente = cliente.id where pedido.cancelado = 'false' and pedido.status = 'Orçamento' and
      cliente.telefone is not null and cliente.telefone <> '' and cliente.nome is not null and cliente.nome <> ''");
    }

      $consulta->execute();
      $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
      echo json_encode($list);

  }
);

$app->post(
    '/enviarNFCeFocus',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ref = (isset($data->ref)) ? $data->ref : "";
        $data->data_emissao = date_create()->format('Y-m-d H:i:s');
        $login = "JwS1iyNsFGfudHVygbJdM88Wp1lr2Pz1";
        $password = "";

        $url = "http://www.onesolucoes.com.br/gestaoapp/api/" . "enviarNFCeFocus";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/checarXml',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj_emitente;
        $chave = $data->chave;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/checarXml.php?chave=" . $chave;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/enviarNFCe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj_emitente;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/Emissor.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

        $datetime = date_create()->format('Y-m-d H:i:s');


    }
);

$app->post(
    '/enviarNFCeContigencia',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj_emitente;
        $chave = $data->chave;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/enviarContigencia.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/enviarNFe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj_emitente;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/emissorNfe.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/getStatusSenfaz',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj_emitente;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
      crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
      versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

      ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/SefazStatus.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/ConsultaChave',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $chave = $data->chave;
        $cnpj = $data->cnpj;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
      crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
      versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

      ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/ConsultaChave.php?modelo=65&ambiente=1&chave=" . $chave;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);

        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/ConsultaChaveNFE',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $chave = $data->chave;
        $cnpj = $data->cnpj;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
    crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
    versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

    ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/ConsultaChave.php?modelo=55&ambiente=1&chave=" . $chave;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);

        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/notasEmitidas',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $chave = $data->chave;
        $cnpj = $data->cnpj;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
      crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
      versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

      ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/notasEmitidas.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);

    }
);

$app->post(
    '/cancelarNFCeFocus',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ref = (isset($data->ref)) ? $data->ref : "";

        $url = "http://www.onesolucoes.com.br/gestaoapp/api/" . "cancelarNFCeFocus";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);
    }
);

$app->post(
    '/cancelarNFCe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ref = (isset($data->ref)) ? $data->ref : "";
        $chave_nfe = (isset($data->chave_nfe)) ? $data->chave_nfe : "";
        $cnpj = $data->cnpj;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/CancelarNota.php?modelo=&ID=" . $ref . "&nfe=" . $ref . "&chave=" . $chave_nfe . "&motivo=";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);
    }
);

$app->post(
    '/inutilizarNFCe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $serie = (isset($data->serie)) ? $data->serie : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $mesReferencia = (isset($data->mesReferencia)) ? $data->mesReferencia : "";

        $cnpj = $data->cnpj;

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];
        $data->dadosempresa['serie'] = $serie;
        $data->dadosempresa['numero'] = $numero;

        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/inutilizar.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        if ($list->infInut->cStat == "102") {

            $consulta = $db->con()->prepare("SELECT id from nfce where serie = '$serie' and ref = '$numero'");
            $consulta->execute();
            $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($lista) == 0) {
                $data_nfce = "2022-" . $mesReferencia . '-01 23:59:59';
                $consulta = $db->con()->prepare("INSERT INTO nfce (cnpj_emitente, ref, serie, status,data_nfce, tipo_pedido, id_pedido)
            VALUES ('$cnpj', '$numero', '$serie', 'inutilizado', '$data_nfce', 'gerencial', 0)  ");
            } else {
                $consulta = $db->con()->prepare("UPDATE nfce set status = 'inutilizado'
            where serie = '$serie' and ref = '$numero'");
            }
            $consulta->execute();
        }
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);
    }
);

$app->post(
    '/exportarXML',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj;
        $mes = $data->mes;
        $ano = $data->ano;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];
        $data->dadosempresa->mes = $mes;
        $data->dadosempresa->ano = $ano;
        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/ExportarXML.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);
    }
);

$app->post(
    '/verificarXML',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj = $data->cnpj;
        $mes = $data->mes;
        $ano = $data->ano;
        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $data->dadosempresa = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $data->dadosempresa = $data->dadosempresa[0];
        $data->dadosempresa->mes = $mes;
        $data->dadosempresa->ano = $ano;
        $url = "https://www.onesolucoes.com.br/emissorNfce/api/gerador/verificarXML.php";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $output = curl_exec($ch);
        curl_close($ch);
        $list = json_decode($output);
        // As próximas três linhas são um exemplo de como imprimir as informações de retorno da API.
        echo json_encode($list);
    }
);

$app->get(
    '/getDadosEmissaoEmpresa/:cnpj',
    function ($cnpj) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, tpAmb,razaosocial,cnpj,fantasia,ei,im,cnae,
        crt,rua,numero,bairro,cidade,ccidade,cep,siglaUF,codigoUF,fone,schemes,senha_certificado,
        versao,tokenIBPT,CSC,CSCid from empresa where cnpj = '$cnpj'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getMateriaPrimaProduto/:id/:tipo',
    function ($id, $tipo) use ($app, $db) {

        if ($tipo == 'adicional') {
            $consulta = $db->con()->prepare("SELECT produto.nome, produtos_composicao.id,
             CONVERT(produtos_composicao.qt_materia_prima, CHAR) as qt_materia_prima
        from produtos_composicao
        inner join produto on produtos_composicao.id_materia_prima = produto.id where
        produtos_composicao.id_adicional = '$id'
        ");
        } else {
            $consulta = $db->con()->prepare("SELECT produto.nome, produtos_composicao.id,
             CONVERT(produtos_composicao.qt_materia_prima, CHAR) as qt_materia_prima
        from produtos_composicao
        inner join produto on produtos_composicao.id_materia_prima = produto.id where
        produtos_composicao.id_produto = '$id'

        ");
        }
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getComposicaoFiscal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.nome, composicao_fiscal.id,
             composicao_fiscal.quantidade, composicao_fiscal.valor
        from composicao_fiscal
        inner join produto on composicao_fiscal.id_composicao = produto.id where
        composicao_fiscal.id_produto = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getProdutoTotal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto where id = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from adicional_produto where id_produto = '$id'

       ");
        $consulta->execute();
        $list[0]['listaAdicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from sabor where id_produto = '$id'

       ");
        $consulta->execute();
        $list[0]['listaSabor'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from promocao where id_produto = '$id'

       ");
        $consulta->execute();
        $list[0]['listaPromocao'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEntregadores/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from usuario where funcao = 'entregador' and id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEntregadoresComPedido/:id/:dataInicial',
    function ($id, $dataInicial) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from usuario where funcao = 'entregador' and id_empresa = '$id'
        and ativo = 'true' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id = $item['id'];
            $consulta = $db->con()->prepare("SELECT id from pedido where id_entregador = '$id' and
        (status = 'Finalizado' or status = 'Em transporte') and
        pedido.cancelado = 'false' AND
        data_pedido >= '$dataInicial'

        ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $list[$i]['pedidos'] = $list2;
            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getObservacoesProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from observacao where id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDetalhesCaixaDetalhado/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT p.nome_mesa, DATE_FORMAT(p.data_pedido, '%d/%m %H:%i') as data_pedido,
      DATE_FORMAT(p.data_finalizacao, '%H:%i') as data_finalizacao
      , p.desconto, p.valor_total from pedido p where id_caixa = '$id' and p.cancelado = 'false'
      and p.fechamento_muitos = 'false' ORDER BY p.data_pedido

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDetalhesCaixaMesa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT p.nome_mesa, SUM(p.desconto) AS desconto, p.porcentagem_garcom, SUM(p.valor_total) AS valor_total  from pedido p
      where p.id_caixa = '$id' and p.fechamento_muitos = 'false' and p.cancelado = 'false'  GROUP BY p.nome_mesa

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTodasBandeiras',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from bandeira_cartao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBandeiraCartao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT bandeira_empresa.id as id_bandeira, bandeira_cartao.descricao, bandeira_empresa.ordem, bandeira_cartao.id, bandeira_cartao.imagem from bandeira_empresa inner JOIN
      bandeira_cartao on bandeira_empresa.id_bandeira_cartao = bandeira_cartao.id inner JOIN
      empresa on bandeira_empresa.id_empresa = empresa.id where bandeira_empresa.id_empresa = '$id'
      order by bandeira_empresa.ordem
      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBrindeGerencial/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT  * from brinde_gerencial where id_empresa = '$id' and ativo = 'true'


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUltimoPedidoCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT  data_pedido as data from pedido where id_cliente = '$id' ORDER BY data_pedido DESC LIMIT 1


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresaAtivoGerencial/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from empresa where gerencial = 'true' and id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getEmpresaUnico',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from empresa

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getStatusEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT aberto from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getSobreEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sobre_empresa where id_empresa = '$id'
       order by ordem

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getDadosCurvaAbcCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT cliente.id, cliente.nome, sum(pedido.valor_total - pedido.desconto) as total_pedidos,
      (SELECT data_pedido from pedido where id_cliente = cliente.id and pedido.cancelado = 'false' and pedido.status = 'Finalizado' order by data_pedido DESC LIMIT 1) as data_pedido, cliente.telefone,
      count(pedido.id) as quantidade_pedidos from pedido inner join cliente on pedido.id_cliente = cliente.id
      where pedido.cancelado = 'false' and pedido.status = 'Finalizado' and
      pedido.fechamento_muitos = 'false'
       and pedido.ifood <> 'true'
      GROUP BY pedido.id_cliente
      HAVING data_pedido BETWEEN '$data_inicio' and '$data_final' order by quantidade_pedidos DESC

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/ativarDesativarUsuario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("UPDATE usuario set  ativo = '$ativo' where id = '$id'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarStatusNFCePorChave',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $status = (isset($data->status)) ? $data->status : "";
        $chave = (isset($data->chave)) ? $data->chave : "";
        $consulta = $db->con()->prepare("UPDATE nfce set  status = '$status' where chave_nfe = '$chave'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarUsuario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $usuario = (isset($data->usuario_nome)) ? $data->usuario_nome : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $funcao = (isset($data->funcao)) ? $data->funcao : "";
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO usuario (usuario, senha, id_empresa, funcao, ativo)
          VALUES('$usuario', '$senha', '$id_empresa', '$funcao', '$ativo')");
        } else {
            $consulta = $db->con()->prepare("UPDATE usuario set usuario = '$usuario', senha = '$senha', funcao = '$funcao', ativo = '$ativo' where id = '$id'");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/verificarVersaoSistema',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $versao = (isset($data->versao)) ? $data->versao : "";
        $fp = fopen("temp.txt", "w+");
        $ch = curl_init("https://www.onesolucoes.com.br/beta/assets/versao.txt");
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_exec($ch);
        $st_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        fclose($fp);
        if (trim(file_get_contents("temp.txt")) != trim($versao)) {
            echo json_encode("atualizar");
        } else {
            echo json_encode("atualizado");
        }

    }
);

$app->post(
    '/getVersaoAtualSistema',
    function () use ($app, $db) {
        $fp = fopen("temp.txt", "w+");
        $ch = curl_init("https://www.onesolucoes.com.br/beta/assets/versao.txt");
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_exec($ch);
        $st_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        fclose($fp);
        echo json_encode(trim(file_get_contents("temp.txt")));

    }
);

$app->post(
    '/salvarWhatsappCadastro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $titulo = (isset($data->titulo)) ? $data->titulo : "";
        $mensagem = (isset($data->mensagem)) ? $data->mensagem : "";
        $mensagem2 = (isset($data->mensagem2)) ? $data->mensagem2 : "";
        $mensagem3 = (isset($data->mensagem3)) ? $data->mensagem3 : "";
        $acao = (isset($data->acao)) ? $data->acao : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO whatsapp_cadastro
        (titulo, mensagem,acao, mensagem2, mensagem3)
          VALUES('$titulo', '$mensagem','$acao', '$mensagem2', '$mensagem3')");
        } else {
            $consulta = $db->con()->prepare("UPDATE whatsapp_cadastro set titulo = '$titulo',
          acao = '$acao', mensagem = '$mensagem', mensagem2 = '$mensagem2',
          mensagem3 = '$mensagem3' where id = '$id'");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarWhatsappRegistro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $numero = (isset($data->numero)) ? $data->numero : "";
        $acao = (isset($data->acao)) ? $data->acao : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO whatsapp_registro (numero, acao, data_acao)
        VALUES('$numero', '$acao', '$datetime')");

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/getListaNfe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("SELECT id, nNF, chave,dEmi,emit_CNPJ,emit_xNome,vNF,arquivo from nfe_entrada");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getDadosNfeSistema',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT * from nfe_entrada where id = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("SELECT * from nfe_entrada_produto where id_nfe = '$id'");
        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/cancelarNotaEntrada',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nNF = (isset($data->nNF)) ? $data->nNF : "";

        $consulta = $db->con()->prepare("SELECT id_produto from nfe_entrada_produto where id_nfe = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);



        $consulta = $db->con()->prepare("UPDATE movimentacao_estoque set cancelado = 'true' where
        numero_nota = '$nNF'");
        $consulta->execute();
        $consulta = $db->con()->prepare("DELETE from nfe_entrada_produto where id_nfe = '$id'");
        $consulta->execute();
        $consulta = $db->con()->prepare("DELETE from nfe_entrada where id = '$id'");
        $consulta->execute();

        foreach ($list as $item) {
            $id_produto = $item['id_produto'];
            arrumarProdutoEstoque($id_produto, $db);
        }

        echo json_encode('ok');

    }
);

$app->post(
    '/salvarNfeEntrada',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cDV = (isset($data->cDV)) ? $data->cDV : "";
        $cMunFG = (isset($data->cMunFG)) ? $data->cMunFG : "";
        $cNF = (isset($data->cNF)) ? $data->cNF : "";
        $cUF = (isset($data->cUF)) ? $data->cUF : "";
        $chave = (isset($data->chave)) ? $data->chave : "";
        $dEmi = (isset($data->dEmi)) ? $data->dEmi : "";
        $dest_CEP = (isset($data->dest_CEP)) ? $data->dest_CEP : "";
        $dest_IE = (isset($data->dest_IE)) ? $data->dest_IE : "";
        $dest_UF = (isset($data->dest_UF)) ? $data->dest_UF : "";
        $dest_cMun = (isset($data->dest_cMun)) ? $data->dest_cMun : "";
        $dest_cPais = (isset($data->dest_cPais)) ? $data->dest_cPais : "";
        $dest_cnpj = (isset($data->dest_cnpj)) ? $data->dest_cnpj : "";
        $dest_nro = (isset($data->dest_nro)) ? $data->dest_nro : "";
        $dest_xBairro = (isset($data->dest_xBairro)) ? $data->dest_xBairro : "";
        $dest_xLgr = (isset($data->dest_xLgr)) ? $data->dest_xLgr : "";
        $dest_xMun = (isset($data->dest_xMun)) ? $data->dest_xMun : "";
        $dest_xNome = (isset($data->dest_xNome)) ? $data->dest_xNome : "";
        $dest_xPais = (isset($data->dest_xPais)) ? $data->dest_xPais : "";
        $emit_CEP = (isset($data->emit_CEP)) ? $data->emit_CEP : "";
        $emit_CNAE = (isset($data->emit_CNAE)) ? $data->emit_CNAE : "";
        $emit_CNPJ = (isset($data->emit_CNPJ)) ? $data->emit_CNPJ : "";
        $emit_CPF = (isset($data->emit_CPF)) ? $data->emit_CPF : "";
        $emit_CRT = (isset($data->emit_CRT)) ? $data->emit_CRT : "";
        $emit_IE = (isset($data->emit_IE)) ? $data->emit_IE : "";
        $emit_IM = (isset($data->emit_IM)) ? $data->emit_IM : "";
        $emit_UF = (isset($data->emit_UF)) ? $data->emit_UF : "";
        $emit_cMun = (isset($data->emit_cMun)) ? $data->emit_cMun : "";
        $emit_cPais = (isset($data->emit_cPais)) ? $data->emit_cPais : "";
        $emit_fone = (isset($data->emit_fone)) ? $data->emit_fone : "";
        $emit_nro = (isset($data->emit_nro)) ? $data->emit_nro : "";
        $emit_xBairro = (isset($data->emit_xBairro)) ? $data->emit_xBairro : "";
        $emit_xFant = (isset($data->emit_xFant)) ? $data->emit_xFant : "";
        $emit_xLgr = (isset($data->emit_xLgr)) ? $data->emit_xLgr : "";
        $emit_xMun = (isset($data->emit_xMun)) ? $data->emit_xMun : "";
        $emit_xNome = (isset($data->emit_xNome)) ? $data->emit_xNome : "";
        $emit_xPais = (isset($data->emit_xPais)) ? $data->emit_xPais : "";
        $finNFe = (isset($data->finNFe)) ? $data->finNFe : "";
        $indPag = (isset($data->indPag)) ? $data->indPag : "";
        //     $mod = (isset($data->mod)) ? $data->mod : "";
        $nNF = (isset($data->nNF)) ? $data->nNF : "";
        $nProt = (isset($data->nProt)) ? $data->nProt : "";
        $natOp = (isset($data->natOp)) ? $data->natOp : "";
        $procEmi = (isset($data->procEmi)) ? $data->procEmi : "";
        $serie = (isset($data->serie)) ? $data->serie : "";
        $tpAmb = (isset($data->tpAmb)) ? $data->tpAmb : "";
        $tpEmis = (isset($data->tpEmis)) ? $data->tpEmis : "";
        $tpImp = (isset($data->tpImp)) ? $data->tpImp : "";
        $tpNF = (isset($data->tpNF)) ? $data->tpNF : "";
        $vBC = (isset($data->vBC)) ? $data->vBC : "";
        $vBCST = (isset($data->vBCST)) ? $data->vBCST : "";
        $vDesc = (isset($data->vDesc)) ? $data->vDesc : "";
        $vFrete = (isset($data->vFrete)) ? $data->vFrete : "";
        $vICMS = (isset($data->vICMS)) ? $data->vICMS : "";
        $vIPI = (isset($data->vIPI)) ? $data->vIPI : "";
        $vNF = (isset($data->vNF)) ? $data->vNF : "";
        $vProd = (isset($data->vProd)) ? $data->vProd : "";
        $vST = (isset($data->vST)) ? $data->vST : "";
        $vSeg = (isset($data->vSeg)) ? $data->vSeg : "";
        $verProc = (isset($data->verProc)) ? $data->verProc : "";
        $xMotivo = (isset($data->xMotivo)) ? $data->xMotivo : "";
        $arquivo = (isset($data->arquivo)) ? $data->arquivo : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $id_fornecedor = (isset($data->id_fornecedor)) ? $data->id_fornecedor : "";
        $data_entrada = (isset($data->data_entrada)) ? $data->data_entrada : "";
        $produtos = json_decode(json_encode($data->produtos), true);
        $base64 = (isset($data->base64)) ? $data->base64 : "";
        $cnpj_emitente = (isset($data->cnpj_emitente)) ? $data->cnpj_emitente : "";

        $consulta = $db->con()->prepare("SELECT id from nfe_entrada where chave = '$chave'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode("existe");
        } else {

            $consulta = $db->con()->prepare("INSERT INTO nfe_entrada (data_entrada,cDV,cMunFG,cNF,cUF,chave,dEmi,dest_CEP,dest_IE,dest_UF,dest_cMun,dest_cPais,dest_cnpj,
      dest_nro,dest_xBairro,dest_xLgr,dest_xMun,dest_xNome,dest_xPais,emit_CEP,emit_CNAE,emit_CNPJ,emit_CPF,emit_CRT,emit_IE,emit_IM,emit_UF,emit_cMun,
      emit_cPais,emit_fone,emit_nro,emit_xBairro,emit_xFant,emit_xLgr,emit_xMun,emit_xNome,emit_xPais,finNFe,indPag,nNF,nProt,natOp,procEmi,serie,
      tpAmb,tpEmis,tpImp,tpNF,vBC,vBCST,vDesc,vFrete,vICMS,vIPI,vNF,vProd,vST,vSeg,verProc,xMotivo,arquivo)
       VALUES ('$data_entrada', '$cDV','$cMunFG','$cNF','$cUF','$chave','$dEmi','$dest_CEP','$dest_IE','$dest_UF','$dest_cMun','$dest_cPais','$dest_cnpj','$dest_nro',
       '$dest_xBairro','$dest_xLgr','$dest_xMun','$dest_xNome','$dest_xPais','$emit_CEP','$emit_CNAE','$emit_CNPJ','$emit_CPF','$emit_CRT','$emit_IE',
       '$emit_IM','$emit_UF','$emit_cMun','$emit_cPais','$emit_fone','$emit_nro','$emit_xBairro','$emit_xFant','$emit_xLgr','$emit_xMun','$emit_xNome',
       '$emit_xPais','$finNFe','$indPag','$nNF','$nProt','$natOp','$procEmi','$serie','$tpAmb','$tpEmis','$tpImp','$tpNF','$vBC','$vBCST','$vDesc',
       '$vFrete','$vICMS','$vIPI','$vNF','$vProd','$vST','$vSeg','$verProc','$xMotivo','$arquivo')");

            $consulta->execute();
            $id_nfe = $db->con()->lastInsertId();
            foreach ($produtos as $item) {
                $CFOP = $item['CFOP'];
                $ICMSSN102 = $item['ICMSSN102'];
                $IPITribCST = $item['IPITribCST'];
                $IPITribpIPI = $item['IPITribpIPI'];
                $IPITribvBC = $item['IPITribvBC'];
                $IPITribvIPI = $item['IPITribvIPI'];
                $bc_icms = $item['bc_icms'];
                $bc_ipi = $item['bc_ipi'];
                $codigo = $item['codigo'];
                $icms00CST = $item['icms00CST'];
                $icms00orig = $item['icms00orig'];
                $icms10CST = $item['icms10CST'];
                $icms10orig = $item['icms10CST'];
                $icms20CST = $item['icms20CST'];
                $icms20orig = $item['icms20CST'];
                $icms30CST = $item['icms30CST'];
                $icms30orig = $item['icms30CST'];
                $icms40CST = $item['icms40CST'];
                $icms40orig = $item['icms40CST'];
                $icms50CST = $item['icms50CST'];
                $icms50orig = $item['icms50CST'];
                $icms51CST = $item['icms51CST'];
                $icms51orig = $item['icms51CST'];
                $icms60CST = $item['icms60CST'];
                $icms60orig = $item['icms60CST'];
                $pICMS = $item['pICMS'];
                $perc_ipi = $item['perc_ipi'];
                $qCom = $item['qCom'];
                $seq = $item['seq'];
                $uCom = $item['uCom'];
                $vProd = $item['vProd'];
                $vUnCom = $item['vUnCom'];
                $vlr_icms = $item['vlr_icms'];
                $vlr_ipi = $item['vlr_ipi'];
                $xProd = addslashes($item['xProd']);
                $produto = $item['produto'];
                $id_produto = $item['id_produto'];

                $consulta = $db->con()->prepare("INSERT INTO nfe_entrada_produto
         (CFOP,ICMSSN102,IPITribCST,IPITribpIPI,IPITribvBC,IPITribvIPI,NCM,bc_icms,bc_ipi,codigo,icms00CST,icms00orig,icms10CST,
         icms10orig,icms20CST,icms20orig,icms30CST,icms30orig,icms40CST,icms40orig,icms50CST,icms50orig,icms51CST,icms51orig,
         icms60CST,icms60orig,pICMS,perc_ipi,qCom,seq,uCom,vProd,vUnCom,vlr_icms,vlr_ipi,xProd,produto,id_produto,id_nfe) VALUES
          ('$CFOP','$ICMSSN102','$IPITribCST','$IPITribpIPI','$IPITribvBC','$IPITribvIPI','$NCM','$bc_icms','$bc_ipi','$codigo',
          '$icms00CST','$icms00orig','$icms10CST','$icms10orig','$icms20CST','$icms20orig','$icms30CST','$icms30orig',
          '$icms40CST','$icms40orig','$icms50CST','$icms50orig','$icms51CST','$icms51orig','$icms60CST','$icms60orig',
          '$pICMS','$perc_ipi','$qCom','$seq','$uCom','$vProd','$vUnCom','$vlr_icms','$vlr_ipi','$xProd','$produto',
          '$id_produto','$id_nfe')");
                $consulta->execute();

                $produto_movimento = new stdClass();
                $produto_movimento->id = $id_produto;
                $produto_movimento->quantidade = $qCom;
                $produto_movimento->id_empresa = $id_empresa;
                $produto_movimento->id_usuario = $id_usuario;
                $produto_movimento->id_fornecedor = $id_fornecedor;
                $produto_movimento->numero_nota = $nNF;
                $produto_movimento->tipo = "nfe";
                $consulta = $db->con()->prepare("SELECT * from produto_fornecedor where id_fornecedor = '$id_fornecedor'
        and id_produto = '$id_produto'  ");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($list) > 0) {
                    $produto_movimento->conversao = $list[0]['conversao'];
                    $produto_movimento->unidade = $list[0]['unidade_entrada'];
                    $produto_movimento->id_produto_fornecedor = $list[0]['id'];
                    $produto_movimento->conversao = floatval($produto_movimento->conversao);
                    if ($produto_movimento->conversao != 0) {
                        if ($produto_movimento->conversao > 0) {
                            $produto_movimento->quantidade = $produto_movimento->quantidade * $produto_movimento->conversao;
                        } else if ($produto_movimento->conversao < 0) {
                            $produto_movimento->quantidade = $produto_movimento->quantidade / ($produto_movimento->conversao * -1);
                        }

                    }
                }

                $consulta = $db->con()->prepare("SELECT id from produto_estoque where id_produto = '$id_produto'");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($list) == 0) {
                    $consulta = $db->con()->prepare("INSERT INTO produto_estoque (id_produto)
          VALUES('$id_produto')");
                    $consulta->execute();
                }
                $produto_movimento->valor_custo = floatval($vProd) / floatval($produto_movimento->quantidade);
                $valor_custo = $produto_movimento->valor_custo;
                $consulta = $db->con()->prepare("UPDATE produto_estoque set valor_custo = '$valor_custo'
        where id_produto = '$id_produto'  ");
                $consulta->execute();
                $produto_movimento->id_empresa = $id_empresa;
                movimentacaoEstoqueSaida($produto_movimento, $db, 'entrada');
            }
            echo json_encode("ok");
        }
    }
);

$app->post(
    '/salvarImagemProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $link = (isset($data->link)) ? $data->link : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";

        $consulta = $db->con()->prepare("INSERT INTO produto_imagem (link, id_produto)
        VALUES('$link', '$id_produto')");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarXmlEntrada',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cnpj_emitente = (isset($data->cnpj_emitente)) ? $data->cnpj_emitente : "";
        $base64 = (isset($data->base64)) ? $data->base64 : "";
        $chave = (isset($data->chave)) ? $data->chave : "";

        if (!file_exists('arquivos/')) {
            mkdir('arquivos/', 0777, true);
        }

        if (!file_exists('arquivos/' . $cnpj_emitente . '/')) {
            mkdir('arquivos/' . $cnpj_emitente . '/', 0777, true);
        }

        define('UPLOAD_DIR', 'arquivos/' . $cnpj_emitente . '/');
        $data = base64_decode($base64);
        $file = UPLOAD_DIR . $chave . '.xml';
        $success = file_put_contents($file, $data);
        echo json_encode("ok");

    }
);

$app->post(
    '/apagarUsuarioBloqueado',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $numero = (isset($data->numero)) ? $data->numero : "";

        $consulta = $db->con()->prepare("DELETE from whatsapp_registro where numero = '$numero' and
        acao = 'bloqueado' ");

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/apagarVendedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("DELETE from vendedor where id = '$id' ");

        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarProdutoAgendamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id_agendamento = (isset($data->id_agendamento)) ? $data->id_agendamento : "";

        $consulta = $db->con()->prepare("INSERT INTO agendamento_produto (id_produto, id_agendamento)
        VALUES('$id_produto', '$id_agendamento')");

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarAtualizarVendedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $porcentagem = (isset($data->porcentagem)) ? $data->porcentagem : "";

        if ($id == '-1') {
            $consulta = $db->con()->prepare("INSERT INTO vendedor (nome, cpf, porcentagem)
            VALUES('$nome', '$cpf', '$porcentagem')");
        } else {
            $consulta = $db->con()->prepare("UPDATE vendedor set nome = '$nome',
            cpf = '$cpf', porcentagem = '$porcentagem' where id = '$id'");
        }

        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarCodigoSaipos',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $codigo_saipos = (isset($data->codigo_saipos)) ? $data->codigo_saipos : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";

        if ($tipo == 'produto') {
            $consulta = $db->con()->prepare("UPDATE produto set codigo_saipos = '$codigo_saipos' where id = '$id'");
        } else if ($tipo == 'adicional') {
            $consulta = $db->con()->prepare("UPDATE adicional set codigo_saipos = '$codigo_saipos' where id = '$id'");
        }

        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarAtualizarAgendamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $status = (isset($data->status)) ? $data->status : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $id = (isset($data->id)) ? $data->id : "";

        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO agendamento (data_inicio, data_final, status, id_cliente)
          VALUES('$data_inicio', '$data_final', '$status', '$id_cliente')");
        } else {
            $consulta = $db->con()->prepare("UPDATE agendamento set data_inicio = '$data_inicio',
         data_final = '$data_final', status = '$status', id_cliente = '$id_cliente' where id = '$id'");
        }

        if ($consulta->execute()) {
            if ($id == -1) {
                echo json_encode($db->con()->lastInsertId());
            } else {
                echo json_encode("ok");
            }

        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarProdutoFornecedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $codigo = (isset($data->codigo)) ? $data->codigo : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id_fornecedor = (isset($data->id_fornecedor)) ? $data->id_fornecedor : "";
        $unidade_entrada = (isset($data->unidade_entrada)) ? $data->unidade_entrada : "";
        $conversao = (isset($data->conversao)) ? $data->conversao : "";
        $id = (isset($data->id)) ? $data->id : "";

        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO produto_fornecedor (codigo, id_produto, id_fornecedor,
          unidade_entrada, conversao)
        VALUES('$codigo', '$id_produto', '$id_fornecedor','$unidade_entrada', '$conversao')");
        } else {
            $consulta = $db->con()->prepare("UPDATE produto_fornecedor set codigo = '$codigo',
          conversao = '$conversao', unidade_entrada = '$unidade_entrada'
        where id = '$id'");
        }

        if ($consulta->execute()) {
            if ($id == -1) {
                echo json_encode($db->con()->lastInsertId());
            } else {
                echo json_encode("ok");
            }

        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarClienteSimples',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $data_nascimento = (isset($data->data_nascimento)) ? $data->data_nascimento : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT id from cliente where id <> '$id' and cpf = '$cpf'
        and cpf <> ''

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("UPDATE cliente set nome = '$nome',
          cpf = '$cpf', data_nascimento = '$data_nascimento', telefone = '$telefone' where id = '$id' ");

            if ($consulta->execute()) {
                echo json_encode($id);
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }
    }
);

$app->post(
    '/salvarClienteSimples',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $data_nascimento = (isset($data->data_nascimento)) ? $data->data_nascimento : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT id from cliente where  cpf = '$cpf' and
        cpf <> ''

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO cliente (telefone, nome, cpf, data_nascimento, id_empresa)
          VALUES ('$telefone', '$nome', '$cpf', '$data_nascimento', '$id_empresa') ");

            if ($consulta->execute()) {
                echo json_encode($db->con()->lastInsertId());
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }
    }
);

$app->post(
    '/importarClienteOnline',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $data_nascimento = (isset($data->data_nascimento)) ? $data->data_nascimento : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT id from cliente where  cpf = '$cpf' and
      cpf <> '' and telefone = '$telefone' and telefone <> ''

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO cliente (telefone, nome, cpf, data_nascimento, id_empresa)
        VALUES ('$telefone', '$nome', '$cpf', '$data_nascimento', '$id_empresa') ");

            if ($consulta->execute()) {
                echo json_encode($db->con()->lastInsertId());
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }
    }
);

$app->post(
    '/salvarPoliticaEntrega',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $politica_entrega = (isset($data->politica_entrega)) ? $data->politica_entrega : "";

        $consulta = $db->con()->prepare("UPDATE parametro set politica_entrega = '$politica_entrega'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarSobreEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $texto = (isset($data->texto)) ? $data->texto : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO sobre_empresa (id_empresa, tipo, texto, ordem)
          VALUES('$id_empresa', '$tipo', '$texto', '$ordem')");
        } else {
            $consulta = $db->con()->prepare("UPDATE sobre_empresa set
         tipo = '$tipo', texto = '$texto', ordem = '$ordem' where id = '$id'");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarFornecedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cep = (isset($data->cep)) ? $data->cep : "";
        $cpf_cnpj = (isset($data->cpf_cnpj)) ? $data->cpf_cnpj : "";
        $nome_razao_social = (isset($data->nome_razao_social)) ? $data->nome_razao_social : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $celular = (isset($data->celular)) ? $data->celular : "";
        $email = (isset($data->email)) ? $data->email : "";
        $inscricao_estadual = (isset($data->inscricao_estadual)) ? $data->inscricao_estadual : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO fornecedor (cep, cpf_cnpj, nome_razao_social, endereco, numero,
          complemento, bairro, cidade, estado, referencia, telefone, celular, email, id_empresa, inscricao_estadual)
        VALUES('$cep', '$cpf_cnpj', '$nome_razao_social', '$endereco', '$numero',
          '$complemento', '$bairro', '$cidade', '$estado', '$referencia', '$telefone', '$celular', '$email', '$id_empresa', '$inscricao_estadual')");
        } else {
            $consulta = $db->con()->prepare("UPDATE fornecedor set cep = '$cep', cpf_cnpj = '$cpf_cnpj',
         nome_razao_social = '$nome_razao_social', endereco = '$endereco', numero = '$numero',
         complemento = '$complemento', bairro = '$bairro', cidade = '$cidade', estado = '$estado', inscricao_estadual = '$inscricao_estadual',
         referencia = '$referencia', telefone = '$telefone', celular = '$celular', email = '$email' where id = '$id'");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarDadosFiscalEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tpAmb = (isset($data->tpAmb)) ? $data->tpAmb : "";
        $razaosocial = (isset($data->razaosocial)) ? $data->razaosocial : "";
        $cnpj = (isset($data->cnpj)) ? $data->cnpj : "";
        $fantasia = (isset($data->fantasia)) ? $data->fantasia : "";
        $ei = (isset($data->ei)) ? $data->ei : "";
        $im = (isset($data->im)) ? $data->im : "";
        $cnae = (isset($data->cnae)) ? $data->cnae : "";
        $crt = (isset($data->crt)) ? $data->crt : "";
        $rua = (isset($data->rua)) ? $data->rua : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $ccidade = (isset($data->ccidade)) ? $data->ccidade : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $siglaUF = (isset($data->siglaUF)) ? $data->siglaUF : "";
        $codigoUF = (isset($data->codigoUF)) ? $data->codigoUF : "";
        $fone = (isset($data->fone)) ? $data->fone : "";
        $schemes = (isset($data->schemes)) ? $data->schemes : "";
        $versao = (isset($data->versao)) ? $data->versao : "";
        $tokenIBPT = (isset($data->tokenIBPT)) ? $data->tokenIBPT : "";
        $CSC = (isset($data->CSC)) ? $data->CSC : "";
        $CSCid = (isset($data->CSCid)) ? $data->CSCid : "";
        $senha_certificado = (isset($data->senha_certificado)) ? $data->senha_certificado : "";

        $consulta = $db->con()->prepare("UPDATE empresa set tpAmb = '$tpAmb', razaosocial = '$razaosocial',
       cnpj = '$cnpj', fantasia = '$fantasia', ei = '$ei', im = '$im', cnae = '$cnae', numero = '$numero',
       bairro = '$bairro', cidade = '$cidade', cep = '$cep', siglaUF = '$siglaUF', codigoUF = '$codigoUF',
       fone = '$fone', schemes = '$schemes', versao = '$versao', tokenIBPT = '$tokenIBPT', rua = '$rua',
       ccidade = '$ccidade', senha_certificado = '$senha_certificado',
       CSC = '$CSC', CSCid = '$CSCid' where id = '$id'");

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarEntradaSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_caixa = (isset($data->id_caixa)) ? $data->id_caixa : "";
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO entrada_saida_caixa (descricao, valor, tipo, id_caixa,
       forma_pagamento, data_entrada_saida, id_usuario) VALUES
      ('$descricao', '$valor', '$tipo', '$id_caixa', '$forma_pagamento', '$datetime', '$id_usuario') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarPermissaoColaborador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $permissoes = (isset($data->permissoes)) ? $data->permissoes : "";

        $consulta = $db->con()->prepare("UPDATE usuario set permissoes = '$permissoes' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarTaxaDeEntregaPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $valor_total_forma_pagamento = (isset($data->valor_total_forma_pagamento)) ? $data->valor_total_forma_pagamento : "";
        $id_forma_pagamento = (isset($data->id_forma_pagamento)) ? $data->id_forma_pagamento : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";

        $consulta = $db->con()->prepare("UPDATE pedido set taxa_entrega = '$taxa_entrega',
        valor_total = '$valor_total' where id = '$id_pedido' ");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE parcial_pedido set valor = '$valor_total_forma_pagamento'
       where id = '$id_forma_pagamento' ");
        $consulta->execute();

        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set data_editar = '$datetime', usuario_editar = '$usuario' where id = '$id_pedido'  ");
        $consulta->execute();

        $dados = new stdClass();
        $dados->usuario = $usuario;
        $dados->id_pedido = $id_pedido;
        $dados->tipo = 'gerencial';
        $dados->evento = "Usuário " . $usuario . " alterou a taxa de entrega do pedido " . $id_pedido . " para " . $taxa_entrega . ".";
        salvarHistoricoPedido($dados, $app, $db);

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarAtivoDesativoAutoAtendimento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $auto_atendimento_ativo = (isset($data->auto_atendimento_ativo)) ? $data->auto_atendimento_ativo : "";
        $comanda_pre_pago = (isset($data->comanda_pre_pago)) ? $data->comanda_pre_pago : "";

        $consulta = $db->con()->prepare("UPDATE parametro set
        auto_atendimento_ativo = '$auto_atendimento_ativo', comanda_pre_pago = '$comanda_pre_pago'  ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarRespostaAvaliacaoAutoAtendimento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $resposta = (isset($data->resposta)) ? $data->resposta : "";
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE avaliacao_auto_atendimento set resposta = '$resposta',
        data_avaliacao = '$datetime' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarAvaliacaoAutoAtendimento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $nota1 = (isset($data->nota1)) ? $data->nota1 : "";
        $nota2 = (isset($data->nota2)) ? $data->nota2 : "";
        $nota3 = (isset($data->nota3)) ? $data->nota3 : "";
        $nota4 = (isset($data->nota4)) ? $data->nota4 : "";
        $nota5 = (isset($data->nota5)) ? $data->nota5 : "";
        $comentario = (isset($data->comentario)) ? $data->comentario : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $media = floatval($nota1) + floatval($nota2) + floatval($nota3) + floatval($nota4) + floatval($nota5);
        $media = $media / 5;

        $consulta = $db->con()->prepare("INSERT INTO avaliacao_auto_atendimento
       (id_empresa, id_pedido, nota1, nota2, nota3, nota4, nota5, data_avaliacao, media, comentario, nome) VALUES
       ('$id_empresa', '$id_pedido', '$nota1', '$nota2', '$nota3', '$nota4', '$nota5', '$datetime',
         '$media', '$comentario', '$nome') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarMovimentacaoEstoqueManual',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $entrada_saida = (isset($data->entrada_saida)) ? $data->entrada_saida : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $unidade = (isset($data->unidade)) ? $data->unidade : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO movimentacao_estoque (id_produto, entrada_saida,
       id_usuario, quantidade, dataMovimento, unidade, id_empresa, tipo, valor_custo, valor_unitario_produto) VALUES
      ('$id_produto', '$entrada_saida',
        '$id_usuario', '$quantidade', '$datetime',
        '$unidade', '$id_empresa', 'Manual', (SELECT valor_custo from produto_estoque where id_produto = '$id_produto'),
        (SELECT valor from produto where id = '$id_produto')) ");
        if ($consulta->execute()) {
            if ($entrada_saida == 'entrada') {
                $consulta = $db->con()->prepare("UPDATE produto_estoque set qt_estoque = qt_estoque + $quantidade
            where id_produto = '$id_produto' ");
            } else {
                $consulta = $db->con()->prepare("UPDATE produto_estoque set qt_estoque = qt_estoque - $quantidade
            where id_produto = '$id_produto' ");
            }
            $consulta->execute();
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarComposicao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id_materia_prima = (isset($data->id_materia_prima)) ? $data->id_materia_prima : "";
        $qt_materia_prima = (isset($data->qt_materia_prima)) ? $data->qt_materia_prima : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";

        if ($tipo == 'produto') {
            $consulta = $db->con()->prepare("INSERT INTO produtos_composicao (id_produto, id_materia_prima, qt_materia_prima) VALUES
          ('$id_produto', '$id_materia_prima', '$qt_materia_prima') ");
        } else {
            $consulta = $db->con()->prepare("INSERT INTO produtos_composicao (id_adicional, id_materia_prima, qt_materia_prima) VALUES
          ('$id_produto', '$id_materia_prima', '$qt_materia_prima') ");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarComposicaoFiscal',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id_composicao = (isset($data->id_composicao)) ? $data->id_composicao : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $valor = (isset($data->valor)) ? $data->valor : "";

        $consulta = $db->con()->prepare("INSERT INTO composicao_fiscal
             (id_produto, id_composicao, quantidade, valor) VALUES
          ('$id_produto', '$id_composicao', '$quantidade', '$valor') ");

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/removerSugestaoMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("DELETE from sugestao_mesa where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarSabor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $adicionais = json_decode(json_encode($data->adicionais), true);
        $frase = (isset($data->frase)) ? $data->frase : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $manter_maior = (isset($data->manter_maior)) ? $data->manter_maior : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $obrigatorio = (isset($data->obrigatorio)) ? $data->obrigatorio : "";
        $quantidade_item = (isset($data->quantidade_item)) ? $data->quantidade_item : "";
        $media_valor = (isset($data->media_valor)) ? $data->media_valor : "";
        $quantidade_unica = (isset($data->quantidade_unica)) ? $data->quantidade_unica : "";
        $ordem_exibicao = (isset($data->ordem_exibicao)) ? $data->ordem_exibicao : 0;

        $consulta = $db->con()->prepare("SELECT valor, id_adicional from sabor where id_produto = '$id_produto' ");
        $consulta->execute();
        $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT valor, id from adicional where extra = 'false' ");
        $consulta->execute();
        $lista2 = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("DELETE from sabor
       where id_produto = '$id_produto' and numero = '$numero' ");
        $consulta->execute();

        foreach ($adicionais as $item) {
            $id_adicional = $item;
            $valor = 0;
            foreach ($lista as $item2) {
                if ($id_adicional == $item2['id_adicional']) {
                    $valor = $item2['valor'];
                }
            }
            if ($valor == 0) {
                foreach ($lista2 as $item2) {
                    if ($id_adicional == $item2['id']) {
                        $valor = $item2['valor'];
                    }
                }
            }
            $consulta = $db->con()->prepare("INSERT INTO sabor
        (id_produto, id_adicional, numero, frase, quantidade_item, obrigatorio, manter_maior,valor,
         media_valor, quantidade_unica, ordem_exibicao) VALUES ('$id_produto','$id_adicional',
          '$numero', '$frase', '$quantidade_item', '$obrigatorio', '$manter_maior','$valor',
           '$media_valor', '$quantidade_unica', '$ordem_exibicao')");
            $consulta->execute();

        }
        $consulta = $db->con()->prepare("UPDATE produto set sabores = 'true', monte_produto = 'false' where id ='$id_produto' ");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarSaborV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $adicionais = json_decode(json_encode($data->adicionais), true);
        $frase = (isset($data->frase)) ? $data->frase : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $manter_maior = (isset($data->manter_maior)) ? $data->manter_maior : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $obrigatorio = (isset($data->obrigatorio)) ? $data->obrigatorio : "";
        $quantidade_item = (isset($data->quantidade_item)) ? $data->quantidade_item : "";
        $media_valor = (isset($data->media_valor)) ? $data->media_valor : "";
        $quantidade_unica = (isset($data->quantidade_unica)) ? $data->quantidade_unica : "";

        foreach ($adicionais as $item) {
            $id_adicional = $item;
            $valor = 0;
            foreach ($lista as $item2) {
                if ($id_adicional == $item2['id_adicional']) {
                    $valor = $item2['valor'];
                }
            }
            if ($valor == 0) {
                foreach ($lista2 as $item2) {
                    if ($id_adicional == $item2['id']) {
                        $valor = $item2['valor'];
                    }
                }
            }
            if ($valor == 0) {
                $valor = null;
            }
            $consulta = $db->con()->prepare("INSERT INTO sabor
        (id_produto, id_adicional, numero, frase, quantidade_item, obrigatorio, manter_maior,valor, media_valor, quantidade_unica) VALUES ('$id_produto','$id_adicional',
          :numero, :frase, :quantidade_item, :obrigatorio, :manter_maior,:valor, :media_valor, :quantidade_unica)");
            $consulta->bindValue(':numero', $numero);
            $consulta->bindValue(':frase', $frase);
            $consulta->bindValue(':quantidade_item', $quantidade_item);
            $consulta->bindValue(':obrigatorio', $obrigatorio);
            $consulta->bindValue(':manter_maior', $manter_maior);
            $consulta->bindValue(':valor', $valor);
            $consulta->bindValue(':media_valor', $media_valor);
            $consulta->bindValue(':quantidade_unica', $quantidade_unica);
            $consulta->execute();

        }

        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarSaborV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $adicionais = json_decode(json_encode($data->adicionais), true);
        $frase = (isset($data->frase)) ? $data->frase : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $manter_maior = (isset($data->manter_maior)) ? $data->manter_maior : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $obrigatorio = (isset($data->obrigatorio)) ? $data->obrigatorio : "";
        $quantidade_item = (isset($data->quantidade_item)) ? $data->quantidade_item : "";
        $media_valor = (isset($data->media_valor)) ? $data->media_valor : "";
        $quantidade_unica = (isset($data->quantidade_unica)) ? $data->quantidade_unica : "";

        $consulta = $db->con()->prepare("UPDATE sabor set frase = '$frase', manter_maior = '$manter_maior',
            obrigatorio = '$obrigatorio', quantidade_item = '$quantidade_item', media_valor = '$media_valor',
            quantidade_unica = '$quantidade_unica' where numero = '$numero' and id_produto = '$id_produto'");
        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/duplicarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $banco = $db->param;
        $consulta = $db->con()->prepare("SELECT column_name from information_schema.columns
        where table_schema = '$banco' and table_name = 'pedido'
        order by table_name ");
        $consulta->execute();
        $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $sql = "INSERT INTO pedido ";
        $campos = "";
        foreach ($lista as $item) {
            if ($item['column_name'] != 'id') {
                $campos .= $item['column_name'] . ",";
            }
        }
        $campos = substr($campos, 0, -1);
        $sql .= "(" . $campos . ")";

        $consulta = $db->con()->prepare("SELECT * from pedido where id = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $resultado = "";
        $i = 0;
        foreach ($list[0] as $key => $value) {
            if ($key != "id") {
                if ($value == null) {
                    $i++;
                    $resultado .= "'" . '' . "',";
                } else {
                    $i++;
                    if ($key == "status") {
                        $resultado .= "'" . 'Orçamento' . "',";
                    } else if ($key == "data_pedido") {
                        $resultado .= "'" . $datetime . "',";
                    } else if ($key == "data_finalizacao" || $key == "data_transporte" || $key == "data_agendamento") {
                        $resultado .= "" . 'null' . ",";
                    } else {
                        $resultado .= "'" . $value . "',";
                    }

                }
            }

        }
        $resultado = substr($resultado, 0, -1);
        $sql .= "VALUES (" . $resultado . ")";
        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $id_pedido = $db->con()->lastInsertId();

        $consulta = $db->con()->prepare("UPDATE pedido SET data_transporte = null, data_finalizacao = null,
        data_impressao = null, data_agendamento = null, data_editar = null, desconto = 0, cupom_fidelidade = null,
        data_confirmacao_pix = null where id = '$id_pedido'");
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT column_name from information_schema.columns
        where table_schema = '$banco' and table_name = 'pedido_produto'
        order by table_name ");
        $consulta->execute();
        $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $sql = "INSERT INTO pedido_produto ";
        $campos = "";
        foreach ($lista as $item) {
            if ($item['column_name'] != 'id') {
                $campos .= $item['column_name'] . ",";
            }
        }
        $campos = substr($campos, 0, -1);
        $sql .= "(" . $campos . ")";

        $consulta = $db->con()->prepare("SELECT * from pedido_produto where id_pedido = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        foreach ($list as $item) {
            $resultado = "";
            foreach ($item as $key => $value) {
                if ($key != "id") {
                    if ($value == null) {
                        $resultado .= "'" . '' . "',";
                    } else {

                        if ($key == "data_cadastro") {
                            $resultado .= "'" . $datetime . "',";
                        } else if ($key == "id_pedido") {
                            $resultado .= "'" . $id_pedido . "',";
                        } else {
                            $resultado .= "'" . $value . "',";
                        }

                    }
                }

            }
            $resultado = substr($resultado, 0, -1);
            $sqlRodar = $sql . " VALUES (" . $resultado . ")";
            $consulta = $db->con()->prepare($sqlRodar);
            $consulta->execute();

        }

        $consulta = $db->con()->prepare("SELECT column_name from information_schema.columns
        where table_schema = '$banco' and table_name = 'adicional_produto_pedido'
        order by table_name ");
        $consulta->execute();
        $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $sql = "INSERT INTO adicional_produto_pedido ";
        $campos = "";
        foreach ($lista as $item) {
            if ($item['column_name'] != 'id') {
                $campos .= $item['column_name'] . ",";
            }
        }
        $campos = substr($campos, 0, -1);
        $sql .= "(" . $campos . ")";

        $consulta = $db->con()->prepare("SELECT * from adicional_produto_pedido where id_pedido = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        foreach ($list as $item) {
            $resultado = "";
            foreach ($item as $key => $value) {
                if ($key != "id") {
                    if ($value == null) {
                        $resultado .= "'" . '' . "',";
                    } else {

                        if ($key == "data_cadastro") {
                            $resultado .= "'" . $datetime . "',";
                        } else if ($key == "id_pedido") {
                            $resultado .= "'" . $id_pedido . "',";
                        } else {
                            $resultado .= "'" . $value . "',";
                        }

                    }
                }

            }
            $resultado = substr($resultado, 0, -1);
            $sqlRodar = $sql . " VALUES (" . $resultado . ")";
            $consulta = $db->con()->prepare($sqlRodar);
            $consulta->execute();
        }

    }
);

$app->post(
    '/definirEntregador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->listaLocal), true);
        $id_entregador = (isset($data->id_entregador)) ? $data->id_entregador : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        foreach ($lista as $item) {
            $id_pedido = $item['id_pedido'];
            $consulta = $db->con()->prepare("UPDATE pedido set id_entregador = '$id_entregador' where id = '$id_pedido' and id_empresa = '$id_empresa' ");
            $consulta->execute();
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/definirEntregadorUnico',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_entregador = (isset($data->id_entregador)) ? $data->id_entregador : "";

        $consulta = $db->con()->prepare("UPDATE pedido set id_entregador = '$id_entregador' where id = '$id' ");
        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/transferirPedidoProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_origem = (isset($data->id_origem)) ? $data->id_origem : "";
        $id_destino = (isset($data->id_destino)) ? $data->id_destino : "";
        $lista = json_decode(json_encode($data->lista), true);

        foreach ($lista as $item) {
            $id = $item['id'];
            $adicional = $item['adicional'];
            $consulta = $db->con()->prepare("UPDATE pedido_produto SET id_pedido = :id_destino where id = :id");
            $consulta->bindValue(':id_destino', $id_destino);
            $consulta->bindValue(':id', $id);
            $consulta->execute();
            foreach ($adicional as $item2) {
                $id_adicional = $item2['id'];
                $consulta = $db->con()->prepare("UPDATE adicional_produto_pedido SET id_pedido = :id_destino where id = :id");
                $consulta->bindValue(':id_destino', $id_destino);
                $consulta->bindValue(':id', $id_adicional);
                $consulta->execute();
            }
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/getProdutosPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT produto.nome, pedido_produto.quantidade,
        pedido_produto.valor_total, pedido_produto.id, pedido_produto.sequencia,
        pedido_produto.id_produto from pedido_produto inner join
        produto on pedido_produto.id_produto = produto.id where id_pedido = :id ");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id_produto'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional_produto_pedido.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
        adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
        from adicional, produto, pedido, adicional_produto_pedido where
        adicional_produto_pedido.id_adicional = adicional.id and
        adicional_produto_pedido.id_produto = produto.id and
        adicional_produto_pedido.id_pedido = pedido.id and
        adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
        adicional_produto_pedido.sequencia = '$sequencia_produto'


        ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }
        echo json_encode($list);
    }
);

$app->post(
    '/definirEntregadorNulo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_entregador = (isset($data->id_entregador)) ? $data->id_entregador : "";

        $consulta = $db->con()->prepare("UPDATE pedido set id_entregador = null, baixa_entregador = 'false' where id = '$id' ");
        $consulta->execute();

        echo json_encode("ok");
    }
);

$app->post(
    '/salvarSugestaoMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("SELECT id from sugestao_mesa where (referencia_nfc = :referencia_nfc
        and referencia_nfc <> '' and referencia_nfc is not null) or (sugestao = :sugestao and mesa = :mesa)");
        $consulta->bindValue(':sugestao', (isset($data->sugestao) && $data->sugestao != '') ? $data->sugestao : null);
        $consulta->bindValue(':referencia_nfc', (isset($data->referencia_nfc) && $data->referencia_nfc != '') ? $data->referencia_nfc : null);
        $consulta->bindValue(':mesa', (isset($data->mesa) && $data->mesa != '') ? $data->mesa : null);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO sugestao_mesa (sugestao, id_empresa, referencia_nfc, status, mesa)
          VALUES(:sugestao, :id_empresa,:referencia_nfc, :status, :mesa)");
            $consulta->bindValue(':sugestao', (isset($data->sugestao) && $data->sugestao != '') ? $data->sugestao : null);
            $consulta->bindValue(':id_empresa', (isset($data->id_empresa) && $data->id_empresa != '') ? $data->id_empresa : null);
            $consulta->bindValue(':referencia_nfc', (isset($data->referencia_nfc) && $data->referencia_nfc != '') ? $data->referencia_nfc : null);
            $consulta->bindValue(':status', (isset($data->status) && $data->status != '') ? $data->status : null);
            $consulta->bindValue(':mesa', (isset($data->mesa) && $data->mesa != '') ? $data->mesa : null);
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/atualizarSugestaoMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $referencia_nfc = (isset($data->referencia_nfc)) ? $data->referencia_nfc : "";
        $mesa = (isset($data->mesa)) ? $data->mesa : "";
        $sugestao = (isset($data->sugestao)) ? $data->sugestao : "";
        $consulta = $db->con()->prepare("SELECT id from sugestao_mesa where  (referencia_nfc = '$referencia_nfc'
        and referencia_nfc <> '' and referencia_nfc is not null and id <> '$id')
      or (sugestao = '$sugestao' and mesa = '$mesa' and id <> '$id')

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("UPDATE sugestao_mesa set referencia_nfc = '$referencia_nfc',
          mesa = '$mesa', sugestao = '$sugestao'
          where id = '$id' ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }
    }
);

$app->post(
    '/salvarProdutoEstoque',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $sugestao = (isset($data->sugestao)) ? $data->sugestao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $idEntrada = (isset($data->idEntrada)) ? $data->idEntrada : "";
        $idSaida = (isset($data->idSaida)) ? $data->idSaida : "";
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";
        $classificacao = (isset($data->classificacao)) ? $data->classificacao : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE produto set tipo_produto = '$tipo_produto' where id = '$id'
       ");

        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT id from produto_estoque where id_produto = '$id'

       ");
        $consulta->execute();

        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO produto_estoque (id_unidade_ent, id_unidade_sai, id_produto, classificacao)
          VALUES(:idEntrada,:idSaida, :id, :classificacao)");
            $consulta->bindValue(':idEntrada', (isset($data->idEntrada) && $data->idEntrada != '') ? $data->idEntrada : null);
            $consulta->bindValue(':idSaida', (isset($data->idSaida) && $data->idSaida != '') ? $data->idSaida : null);
            $consulta->bindValue(':id', (isset($data->id) && $data->id != '') ? $data->id : null);
            $consulta->bindValue(':classificacao', (isset($data->id) && $data->classificacao != '') ? $data->classificacao : null);
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            $consulta = $db->con()->prepare("UPDATE produto_estoque set id_unidade_ent = :idEntrada,
         id_unidade_sai = :idSaida, classificacao = :classificacao where id_produto = :id ");
            $consulta->bindValue(':idEntrada', (isset($data->idEntrada) && $data->idEntrada != '') ? $data->idEntrada : null);
            $consulta->bindValue(':idSaida', (isset($data->idSaida) && $data->idSaida != '') ? $data->idSaida : null);
            $consulta->bindValue(':id', (isset($data->id) && $data->id != '') ? $data->id : null);
            $consulta->bindValue(':classificacao', (isset($data->id) && $data->classificacao != '') ? $data->classificacao : null);
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        }

    }
);

$app->post(
    '/salvarProdutoEstoqueQuantidadeMinima',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $qtdade_minima = (isset($data->qtdade_minima)) ? $data->qtdade_minima : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE produto_estoque set qtdade_minima = '$qtdade_minima'
        where id_produto = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarFormaPagamentoPedidoOnline',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $valor_total = floatval($valor_total) - floatval($desconto);
        $id = (isset($data->id)) ? $data->id : "";
        if ($valor_total == "0" || $valor_total == "0.00") {
            $consulta = $db->con()->prepare("DELETE from parcial_pedido where id_pedido = '$id'

        ");
            $consulta->execute();
        } else {
            $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'

        ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) == 1) {
                $consulta = $db->con()->prepare("UPDATE parcial_pedido set valor = '$valor_total'
         where id_pedido = '$id' LIMIT 1 ");
                if ($consulta->execute()) {
                    echo json_encode("ok");
                } else {
                    echo json_encode(array("erro" => true));
                }
            } else if (count($list) > 1) {
                $contador = 0;
                $valor_soma = 0;
                foreach ($list as $item) {
                    if ($contador > 0) {
                        $valor_soma += floatval($item['valor']);
                    }

                    $contador++;
                }
                $valor_total -= $valor_soma;
                $consulta = $db->con()->prepare("UPDATE parcial_pedido set valor = '$valor_total'
         where id_pedido = '$id' LIMIT 1 ");
                if ($consulta->execute()) {
                    echo json_encode("ok");
                } else {
                    echo json_encode(array("erro" => true));
                }
            }
        }

    }
);

$app->post(
    '/salvarImpressora',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";

        $consulta = $db->con()->prepare("INSERT INTO impressora (nome)
        VALUES ('$nome')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarImpressora',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE impressora set nome = '$nome'
        where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarNumeroEtapa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $numero = (isset($data->numero)) ? $data->numero : "";
        $numero_novo = (isset($data->numero_novo)) ? $data->numero_novo : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $lista = json_decode(json_encode($data->lista), true);
        foreach ($lista as $item) {
            $id = $item['id'];
            $numero_novo = $item['numero_novo'];
            $consulta = $db->con()->prepare("UPDATE sabor set numero = '$numero_novo'
          where id = $id ");
            $consulta->execute();

        }
        echo json_encode("ok");
    }
);

$app->post(
    '/agendarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_agendamento = (isset($data->data_agendamento)) ? $data->data_agendamento : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($observacao == "") {
            $consulta = $db->con()->prepare("UPDATE pedido set status = 'agendado', data_agendamento = '$data_agendamento' where id = '$id' ");
        } else {
            $consulta = $db->con()->prepare("UPDATE pedido set status = 'agendado', observacao = '$observacao', data_agendamento = '$data_agendamento' where id = '$id' ");
        }

        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarImagemCategoria',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $imagem = (isset($data->imagem)) ? $data->imagem : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE categoria_produto set imagem = '$imagem'
      where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarImagemAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $imagem = (isset($data->imagem)) ? $data->imagem : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE adicional set imagem = '$imagem'
      where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarNumeroEtapa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $numero = (isset($data->numero)) ? $data->numero : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE sabor set numero = '$numero'
      where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarAtivoCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE cliente set ativo = '$ativo'
      where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarSequenciaNfceParametro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $sequencia_nfce = (isset($data->sequencia_nfce)) ? $data->sequencia_nfce : "";
        $sequencia_nfe = (isset($data->sequencia_nfe)) ? $data->sequencia_nfe : "";
        $serie_nfce = (isset($data->serie_nfce)) ? $data->serie_nfce : "";
        $serie_nfe = (isset($data->serie_nfe)) ? $data->serie_nfe : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE parametro set sequencia_nfce = '$sequencia_nfce',
        sequencia_nfe = '$sequencia_nfe', serie_nfce = '$serie_nfce', serie_nfe = '$serie_nfe'
        where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/checarExisteNfce',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $numero_nf = (isset($data->numero_nf)) ? $data->numero_nf : "";
        $serie = (isset($data->serie)) ? $data->serie : "";

        $consulta = $db->con()->prepare("SELECT * id from nfce where ref = '$numero_nf' and serie = '$serie' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        json_encode($list);
    }
);

$app->post(
    '/salvarNFCe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $caminho_danfe = (isset($data->danfe)) ? $data->danfe : "";
        $caminho_xml_nota_fiscal = (isset($data->xml)) ? $data->xml : "";
        $chave_nfe = (isset($data->chave)) ? $data->chave : "";
        $cnpj_emitente = (isset($data->cnpj_emitente)) ? $data->cnpj_emitente : "";
        $mensagem_sefaz = (isset($data->mensagem_sefaz)) ? $data->mensagem_sefaz : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $qrcode_url = (isset($data->qrcode_url)) ? $data->qrcode_url : "";
        $ref = (isset($data->numero_nf)) ? $data->numero_nf : "";
        $serie = (isset($data->serie)) ? $data->serie : "";
        $status = (isset($data->status)) ? $data->status : "";
        $status_sefaz = (isset($data->status_sefaz)) ? $data->status_sefaz : "";
        $url_consulta_nf = (isset($data->url_consulta_nf)) ? $data->url_consulta_nf : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";
        $items = json_decode(json_encode($data->produtos), true);
        $formas_pagamento = json_decode(json_encode($data->pedido->forma_pagamento), true);
        $datetime = date_create()->format('Y-m-d H:i:s');
        $cpf_destinatario = (isset($data->cpf_destinatario)) ? $data->cpf_destinatario : "";
        $dhRecbto = (isset($data->dhRecbto)) ? $data->dhRecbto : "";
        if ($dhRecbto != "") {
            $datetime = $dhRecbto;
        }
        $logradouro_destinatario = (isset($data->logradouro_destinatario)) ? $data->logradouro_destinatario : "";
        $municipio_destinatario = (isset($data->municipio_destinatario)) ? $data->municipio_destinatario : "";
        $numero_destinatario = (isset($data->numero_destinatario)) ? $data->numero_destinatario : "";
        $uf_destinatario = (isset($data->uf_destinatario)) ? $data->uf_destinatario : "";
        $bairro_destinatario = (isset($data->bairro_destinatario)) ? $data->bairro_destinatario : "";
        $nome_destinatario = (isset($data->nome_destinatario)) ? $data->nome_destinatario : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";
        $valor_bruto = (isset($data->valor_bruto)) ? $data->valor_bruto : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $modelo = (isset($data->modelo)) ? $data->modelo : "65";

        $consulta = $db->con()->prepare("SELECT id from nfce where chave_nfe = '$chave_nfe'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {

            $consulta = $db->con()->prepare("INSERT INTO nfce (caminho_danfe,caminho_xml_nota_fiscal,
       chave_nfe, cnpj_emitente, mensagem_sefaz, numero, qrcode_url, ref, serie, status,
       status_sefaz, url_consulta_nf, id_pedido, tipo_pedido, data_nfce,
       cpf_destinatario,logradouro_destinatario,municipio_destinatario,
       numero_destinatario,uf_destinatario, bairro_destinatario, nome_destinatario,
       valor_liquido,valor_bruto,desconto,modelo) VALUES
      ('$caminho_danfe','$caminho_xml_nota_fiscal',
       '$chave_nfe', '$cnpj_emitente', '$mensagem_sefaz', '$numero', '$qrcode_url', '$ref', '$serie', '$status',
       '$status_sefaz', '$url_consulta_nf', '$id_pedido', '$tipo_pedido', '$datetime',
       '$cpf_destinatario','$logradouro_destinatario','$municipio_destinatario',
       '$numero_destinatario','$uf_destinatario', '$bairro_destinatario', '$nome_destinatario',
       '$valor_liquido','$valor_bruto','$desconto','$modelo')  ");
            $consulta->execute();
            $id_nfce = $db->con()->lastInsertId();
            foreach ($items as $item) {
                $codigo_produto = $item['codigo_produto'];
                $codigo_ncm = $item['codigo_ncm'];
                $descricao = $item['descricao'];
                $cfop = $item['cfop'];
                $icms_origem = $item['icms_origem'];
                $icms_situacao_tributaria = $item['icms_situacao_tributaria'];
                $icms_aliquota = $item['icms_aliquota'];
                $numero_item = $item['item'];
                $valor_desconto = $item['desconto'];
                $unidade_tributavel = $item['unidade'];
                $unidade_comercial = $item['unidade'];
                $quantidade_comercial = $item['quantidade'];
                $quantidade_tributavel = $item['quantidade'];
                $valor_bruto = $item['total'];
                $valor_frete = $item['valor_frete'];

                $consulta = $db->con()->prepare("INSERT INTO nfce_item (codigo_produto,codigo_ncm,descricao,
         cfop,icms_origem,icms_situacao_tributaria,icms_aliquota,
         numero_item,valor_desconto,unidade_tributavel,unidade_comercial,quantidade_comercial,
         quantidade_tributavel,valor_bruto,valor_frete,id_nfce) VALUES
        ('$codigo_produto','$codigo_ncm','$descricao',
          '$cfop','$icms_origem','$icms_situacao_tributaria','$icms_aliquota',
          '$numero_item','$valor_desconto','$unidade_tributavel','$unidade_comercial','$quantidade_comercial',
          '$quantidade_tributavel','$valor_bruto','$valor_frete','$id_nfce') ");
                $consulta->execute();
            }
            foreach ($formas_pagamento as $item) {
                $descricao = $item['descricao'];
                $forma_pagamento = $item['forma_pagamento'];
                $valor_pagamento = $item['valor_pagamento'];
                if (isset($item['bandeira_operadora'])) {
                    $bandeira_operadora = $item['bandeira_operadora'];
                } else {
                    $bandeira_operadora = "";
                }

                $consulta = $db->con()->prepare("INSERT INTO nfce_forma_pagamento (descricao, forma_pagamento,
          valor_pagamento, bandeira_operadora, id_nfce) VALUES
        ('$descricao', '$forma_pagamento',
          '$valor_pagamento', '$bandeira_operadora', '$id_nfce') ");
                $consulta->execute();

            }
            if ($modelo == "65") {
                $consulta = $db->con()->prepare("UPDATE parametro set
            sequencia_nfce = sequencia_nfce + 1 ");
            } else {
                $consulta = $db->con()->prepare("UPDATE parametro set
            sequencia_nfe = sequencia_nfe + 1 ");
            }
            $consulta->execute();
            echo json_encode("ok");
        }
    }
);

$app->post(
    '/salvarNFCev2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $caminho_danfe = (isset($data->danfe)) ? $data->danfe : "";
        $caminho_xml_nota_fiscal = (isset($data->xml)) ? $data->xml : "";
        $chave_nfe = (isset($data->chave)) ? $data->chave : "";
        $cnpj_emitente = (isset($data->cnpj_emitente)) ? $data->cnpj_emitente : "";
        $mensagem_sefaz = (isset($data->mensagem_sefaz)) ? $data->mensagem_sefaz : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $qrcode_url = (isset($data->qrcode_url)) ? $data->qrcode_url : "";
        $ref = (isset($data->numero_nf)) ? $data->numero_nf : "";
        $serie = (isset($data->serie)) ? $data->serie : "";
        $status = (isset($data->status)) ? $data->status : "";
        $status_sefaz = (isset($data->status_sefaz)) ? $data->status_sefaz : "";
        $url_consulta_nf = (isset($data->url_consulta_nf)) ? $data->url_consulta_nf : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";
        $items = json_decode(json_encode($data->produtos), true);
        $formas_pagamento = json_decode(json_encode($data->pedido->forma_pagamento), true);
        $datetime = date_create()->format('Y-m-d H:i:s');
        $cpf_destinatario = (isset($data->cpf_destinatario)) ? $data->cpf_destinatario : "";
        $logradouro_destinatario = (isset($data->logradouro_destinatario)) ? $data->logradouro_destinatario : "";
        $municipio_destinatario = (isset($data->municipio_destinatario)) ? $data->municipio_destinatario : "";
        $numero_destinatario = (isset($data->numero_destinatario)) ? $data->numero_destinatario : "";
        $uf_destinatario = (isset($data->uf_destinatario)) ? $data->uf_destinatario : "";
        $bairro_destinatario = (isset($data->bairro_destinatario)) ? $data->bairro_destinatario : "";
        $nome_destinatario = (isset($data->nome_destinatario)) ? $data->nome_destinatario : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";
        $valor_bruto = (isset($data->valor_bruto)) ? $data->valor_bruto : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_nfce = (isset($data->id_nfce)) ? $data->id_nfce : "";
        $modelo = (isset($data->modelo)) ? $data->modelo : "65";
        $emissao = (isset($data->emissao)) ? $data->emissao : "1";

        $consulta = $db->con()->prepare("UPDATE nfce set caminho_danfe = '$caminho_danfe', caminho_xml_nota_fiscal = '$caminho_xml_nota_fiscal',
      chave_nfe = '$chave_nfe', cnpj_emitente = '$cnpj_emitente', mensagem_sefaz = '$mensagem_sefaz', numero = '$numero',
      qrcode_url = '$qrcode_url', ref = '$ref', serie = '$serie', status = '$status',
      status_sefaz = '$status_sefaz', url_consulta_nf = '$url_consulta_nf', data_nfce = '$datetime', cpf_destinatario = '$cpf_destinatario',
      logradouro_destinatario = '$logradouro_destinatario', municipio_destinatario = '$municipio_destinatario', numero_destinatario = '$numero_destinatario',
      uf_destinatario = '$uf_destinatario', bairro_destinatario = '$bairro_destinatario', nome_destinatario = '$nome_destinatario', valor_liquido = '$valor_liquido',
      valor_bruto = '$valor_bruto', desconto = '$desconto', modelo = '$modelo',
      tipo_pedido = '$tipo_pedido', emissao = '$emissao' where
      id = '$id'");

        $consulta->execute();

        $consulta = $db->con()->prepare("DELETE from nfce_item where id_nfce = '$id'");
        $consulta->execute();

        foreach ($items as $item) {
            $codigo_produto = $item['codigo_produto'];
            $codigo_ncm = $item['codigo_ncm'];
            $descricao = $item['descricao'];
            $cfop = $item['cfop'];
            $icms_origem = $item['icms_origem'];
            $icms_situacao_tributaria = $item['icms_situacao_tributaria'];
            $icms_aliquota = $item['icms_aliquota'];
            $numero_item = $item['item'];
            $valor_desconto = $item['desconto'];
            $unidade_tributavel = $item['unidade'];
            $unidade_comercial = $item['unidade'];
            $quantidade_comercial = $item['quantidade'];
            $quantidade_tributavel = $item['quantidade'];
            $valor_bruto = $item['total'];
            $valor_frete = $item['valor_frete'];

            $consulta = $db->con()->prepare("INSERT INTO nfce_item (codigo_produto,codigo_ncm,descricao,
       cfop,icms_origem,icms_situacao_tributaria,icms_aliquota,
       numero_item,valor_desconto,unidade_tributavel,unidade_comercial,quantidade_comercial,
       quantidade_tributavel,valor_bruto,valor_frete,id_nfce) VALUES
      ('$codigo_produto','$codigo_ncm','$descricao',
        '$cfop','$icms_origem','$icms_situacao_tributaria','$icms_aliquota',
        '$numero_item','$valor_desconto','$unidade_tributavel','$unidade_comercial','$quantidade_comercial',
        '$quantidade_tributavel','$valor_bruto','$valor_frete','$id') ");
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("DELETE from nfce_forma_pagamento where id_nfce = '$id'");
        $consulta->execute();

        foreach ($formas_pagamento as $item) {
            $descricao = $item['descricao'];
            $forma_pagamento = $item['forma_pagamento'];
            $valor_pagamento = $item['valor_pagamento'];
            if (isset($item['bandeira_operadora'])) {
                $bandeira_operadora = $item['bandeira_operadora'];
            } else {
                $bandeira_operadora = "";
            }

            $consulta = $db->con()->prepare("INSERT INTO nfce_forma_pagamento (descricao, forma_pagamento,
        valor_pagamento, bandeira_operadora, id_nfce) VALUES
      ('$descricao', '$forma_pagamento',
        '$valor_pagamento', '$bandeira_operadora', '$id') ");
            $consulta->execute();
        }

        echo json_encode($formas_pagamento);

    }
);

$app->post(
    '/rodarNumeroNFCe',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("UPDATE parametro set
      sequencia_nfce = sequencia_nfce + 1 ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarProdutoFiscal',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $codigo_ncm = (isset($data->codigo_ncm)) ? $data->codigo_ncm : "";
        $id = (isset($data->id)) ? $data->id : "";
        $cfop = (isset($data->cfop)) ? $data->cfop : "";
        $icms_origem = (isset($data->icms_origem)) ? $data->icms_origem : "";
        $icms_situacao_tributaria = (isset($data->icms_situacao_tributaria)) ? $data->icms_situacao_tributaria : "";
        $icms_aliquota = (isset($data->icms_aliquota)) ? $data->icms_aliquota : "";
        $icms_modalidade_base_calculo = (isset($data->icms_modalidade_base_calculo)) ? $data->icms_modalidade_base_calculo : "";
        $ean = (isset($data->ean)) ? $data->ean : "";
        $cest = (isset($data->cest)) ? $data->cest : "";
        $nome_fiscal = (isset($data->nome_fiscal) || $data->nome_fiscal == '') ? $data->nome_fiscal : "";
        $puxar_fiscal = (isset($data->puxar_fiscal) || $data->puxar_fiscal == '') ? $data->puxar_fiscal : "";
        $valor_fiscal = (isset($data->valor_fiscal)) ? $data->valor_fiscal : 'null';
        $pis = (isset($data->pis)) ? $data->pis : '99';
        $cofins = (isset($data->cofins)) ? $data->cofins : '99';

        $consulta = $db->con()->prepare("UPDATE produto_fiscal set codigo_ncm = '$codigo_ncm',
        cfop = '$cfop', icms_origem = '$icms_origem', icms_situacao_tributaria = '$icms_situacao_tributaria',
        icms_aliquota = '$icms_aliquota', ean = '$ean', cest = '$cest',valor_fiscal = $valor_fiscal,
        icms_modalidade_base_calculo = '$icms_modalidade_base_calculo', nome_fiscal = '$nome_fiscal',
        puxar_fiscal = '$puxar_fiscal', pis = '$pis', cofins = '$cofins'
        where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarTipoProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE produto set tipo_produto = '$tipo_produto'
        where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/atualizarTipoProdutoEstoque',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $classificacao = (isset($data->classificacao)) ? $data->classificacao : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE produto_estoque set classificacao = '$classificacao'
      where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/salvarQuantidadeMinimaProdutoEstoque',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $qtdade_minima = (isset($data->qtdade_minima)) ? $data->qtdade_minima : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $valor_custo = (isset($data->valor_custo)) ? $data->valor_custo : "";
        $consulta = $db->con()->prepare("SELECT id from produto_estoque where id_produto = '$id_produto'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO produto_estoque (id_produto, valor_custo)
          VALUES('$id_produto', '$valor_custo')");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            $consulta = $db->con()->prepare("UPDATE produto_estoque set qtdade_minima = '$qtdade_minima',
            valor_custo = '$valor_custo'
          where id_produto = '$id_produto' ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        }
    }
);

$app->post(
    '/salvarProdutoEstoqueUnico',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_unidade_ent = (isset($data->id_unidade_ent)) ? $data->id_unidade_ent : "";
        $id_unidade_sai = (isset($data->id_unidade_sai)) ? $data->id_unidade_sai : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $usar_estoque = (isset($data->usar_estoque)) ? $data->usar_estoque : "";

        $consulta = $db->con()->prepare("SELECT id from produto_estoque where id_produto = '$id_produto'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO produto_estoque (id_unidade_ent, id_unidade_sai, id_produto, usar_estoque)
          VALUES('$id_unidade_ent','$id_unidade_sai', '$id_produto', '$usar_estoque')");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            $consulta = $db->con()->prepare("UPDATE produto_estoque set id_unidade_ent = '$id_unidade_ent',
         id_unidade_sai = '$id_unidade_sai', usar_estoque = '$usar_estoque' where id_produto = '$id_produto' ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        }
    }
);

$app->post(
    '/salvarAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $extra = (isset($data->extra)) ? $data->extra : "";
        $texto = (isset($data->texto)) ? $data->texto : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "0";
        $ordem_exibicao = (isset($data->ordem_exibicao)) ? $data->ordem_exibicao : "0";
        $impressao_individual = (isset($data->impressao_individual)) ? $data->impressao_individual : "false";

        $consulta = $db->con()->prepare("INSERT INTO adicional (valor, descricao, id_empresa, texto, extra, ordem, ordem_exibicao, impressao_individual)
        VALUES('$valor', '$descricao', '$id_empresa', '$texto', '$extra', '$ordem', '$ordem_exibicao', '$impressao_individual')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarGrupoImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $impressora = (isset($data->impressora)) ? $data->impressora : "";
        $grupo = (isset($data->grupo)) ? $data->grupo : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $tamanho_papel = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $origem = (isset($data->origem)) ? $data->origem : "";

        if ($id == -1) {
            $consulta = $db->con()->prepare("INSERT INTO grupo_impressao (impressora, grupo, id_empresa, tamanho_papel, origem)
          VALUES('$impressora', '$grupo', '$id_empresa', '$tamanho_papel', '$origem')");
        } else {
            $consulta = $db->con()->prepare("UPDATE grupo_impressao set impressora = '$impressora', grupo = '$grupo',
         tamanho_papel = '$tamanho_papel', origem = '$origem' where id = '$id' ");
        }

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarComanda',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $pedido = (isset($data->pedido)) ? $data->pedido : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $status = (isset($data->status)) ? $data->status : "aberto";
        $tag = (isset($data->tag)) ? $data->tag : "";
        $consulta = $db->con()->prepare("INSERT INTO comanda (pedido, id_empresa, id_referencia_mesa, id_cliente, tag, status)
       VALUES ('$pedido', '$id_empresa', '$id_referencia_mesa', '$id_cliente', '$tag', '$status')  ");
        if ($consulta->execute()) {
            echo json_encode($db->con()->lastInsertId());
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/alterarStatusMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("UPDATE pedido set status = '$status', cancelado = 'false' where id = '$id'  ");
        if ($consulta->execute()) {
            if ($status == 'Orçamento') {
                $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' where id_referencia = '$id_referencia_mesa'
          and id_empresa = '$id_empresa'  ");
                $consulta->execute();
                echo json_encode("ok");
            } else {
                echo json_encode("ok");
            }
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/setDataPedidoEditar',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $usuario_editar = (isset($data->usuario_editar)) ? $data->usuario_editar : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $consulta = $db->con()->prepare("UPDATE pedido set data_editar = '$datetime', cancelado = 'false',
      usuario_editar = '$usuario_editar' where id = '$id'  ");
        $consulta->execute();

        $dados = new stdClass();
        $dados->usuario = $usuario_editar;
        $dados->id_pedido = $id;
        $dados->tipo = $tipo;
        $dados->evento = "Usuário " . $usuario . " abriu o pedido " . $id . " para edição.";
        salvarHistoricoPedido($dados, $app, $db);

        echo json_encode("ok");

    }
);

$app->post(
    '/abrirPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE pedido set status = 'Orçamento' where id = '$id'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametros',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $padrao_delivery = (isset($data->padrao_delivery)) ? $data->padrao_delivery : "";
        $mesa_comanda = (isset($data->mesa_comanda)) ? $data->mesa_comanda : "";
        $pedido_somente_nfc = (isset($data->pedido_somente_nfc)) ? $data->pedido_somente_nfc : "";
        $pedido_somente_mesa_garcom = (isset($data->pedido_somente_mesa_garcom)) ? $data->pedido_somente_mesa_garcom : "";
        $endereco_cliente_obrigatorio = (isset($data->endereco_cliente_obrigatorio)) ? $data->endereco_cliente_obrigatorio : "";
        $usar_senha_atendimento = (isset($data->usar_senha_atendimento)) ? $data->usar_senha_atendimento : "";
        $usar_senha_atendimento_pedido = (isset($data->usar_senha_atendimento_pedido)) ? $data->usar_senha_atendimento_pedido : "";
        $usar_leitor_codigo_barra_cardapio = (isset($data->usar_leitor_codigo_barra_cardapio)) ? $data->usar_leitor_codigo_barra_cardapio : "";
        $usar_atalho_consumidor_final = (isset($data->usar_atalho_consumidor_final)) ? $data->usar_atalho_consumidor_final : "";
        $enviar_mensagem_whats_boas_vindas = (isset($data->enviar_mensagem_whats_boas_vindas)) ? $data->enviar_mensagem_whats_boas_vindas : "";
        $enviar_mensagem_whats_agradecimento = (isset($data->enviar_mensagem_whats_agradecimento)) ? $data->enviar_mensagem_whats_agradecimento : "";
        $fechar_tela_fiscal_automatico = (isset($data->fechar_tela_fiscal_automatico)) ? $data->fechar_tela_fiscal_automatico : "";
        $gerar_codigo_autoatendimento_cpf = (isset($data->gerar_codigo_autoatendimento_cpf)) ? $data->gerar_codigo_autoatendimento_cpf : "";
        $tipo_validacao_codigo_aa = (isset($data->tipo_validacao_codigo_aa)) ? $data->tipo_validacao_codigo_aa : "";
        $obrigatorio_telefone = (isset($data->obrigatorio_telefone)) ? $data->obrigatorio_telefone : "false";
        $sistema_produto_fracionado = (isset($data->sistema_produto_fracionado)) ? $data->sistema_produto_fracionado : "";
        $abrir_whats_status_pedido_online = (isset($data->abrir_whats_status_pedido_online)) ? $data->abrir_whats_status_pedido_online : "";
        $sistema_vendedor_pedido = (isset($data->sistema_vendedor_pedido)) ? $data->sistema_vendedor_pedido : "";
        $verificar_bebida_alcoolica = (isset($data->verificar_bebida_alcoolica)) ? $data->verificar_bebida_alcoolica : "";
        $puxar_pedido_retira_entregador = (isset($data->puxar_pedido_retira_entregador)) ? $data->puxar_pedido_retira_entregador : "";
        $abrir_tela_nfce_automatico = (isset($data->abrir_tela_nfce_automatico)) ? $data->abrir_tela_nfce_automatico : "";
        $instagram_cliente_obrigatorio = (isset($data->instagram_cliente_obrigatorio)) ? $data->instagram_cliente_obrigatorio : "";
        $permitir_troca_mesa_aa = (isset($data->permitir_troca_mesa_aa)) ? $data->permitir_troca_mesa_aa : "";
        $barrar_produto_sem_estoque = (isset($data->barrar_produto_sem_estoque)) ? $data->barrar_produto_sem_estoque : "";
        $enviar_mensagem_whats_pedido_online = (isset($data->enviar_mensagem_whats_pedido_online)) ? $data->enviar_mensagem_whats_pedido_online : "";
        $enviar_msg_whats_finalizado = (isset($data->enviar_msg_whats_finalizado)) ? $data->enviar_msg_whats_finalizado : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE parametro set padrao_delivery = '$padrao_delivery', pedido_somente_nfc = '$pedido_somente_nfc',
        mesa_comanda = '$mesa_comanda', pedido_somente_mesa_garcom = '$pedido_somente_mesa_garcom',endereco_cliente_obrigatorio = '$endereco_cliente_obrigatorio',
        usar_senha_atendimento = '$usar_senha_atendimento', usar_senha_atendimento_pedido = '$usar_senha_atendimento_pedido',
        usar_leitor_codigo_barra_cardapio = '$usar_leitor_codigo_barra_cardapio', obrigatorio_telefone = '$obrigatorio_telefone',
        usar_atalho_consumidor_final = '$usar_atalho_consumidor_final', enviar_mensagem_whats_boas_vindas = '$enviar_mensagem_whats_boas_vindas',
        enviar_mensagem_whats_agradecimento = '$enviar_mensagem_whats_agradecimento', fechar_tela_fiscal_automatico = '$fechar_tela_fiscal_automatico',
        gerar_codigo_autoatendimento_cpf = '$gerar_codigo_autoatendimento_cpf', verificar_bebida_alcoolica = '$verificar_bebida_alcoolica',
         tipo_validacao_codigo_aa = '$tipo_validacao_codigo_aa', sistema_produto_fracionado = '$sistema_produto_fracionado',
         abrir_whats_status_pedido_online = '$abrir_whats_status_pedido_online', sistema_vendedor_pedido = '$sistema_vendedor_pedido',
         puxar_pedido_retira_entregador = '$puxar_pedido_retira_entregador', abrir_tela_nfce_automatico = '$abrir_tela_nfce_automatico',
         instagram_cliente_obrigatorio = '$instagram_cliente_obrigatorio', permitir_troca_mesa_aa = '$permitir_troca_mesa_aa',
         barrar_produto_sem_estoque = '$barrar_produto_sem_estoque', enviar_mensagem_whats_pedido_online = '$enviar_mensagem_whats_pedido_online',
         enviar_msg_whats_finalizado = '$enviar_msg_whats_finalizado'
        where id = '$id'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametrosImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $imprimir_2x = (isset($data->imprimir_2x)) ? $data->imprimir_2x : "";
        $imprimir_3x = (isset($data->imprimir_3x)) ? $data->imprimir_3x : "";
        $imprimir_detalhes = (isset($data->imprimir_detalhes)) ? $data->imprimir_detalhes : "";
        $produto_aguardando_impressao = (isset($data->produto_aguardando_impressao)) ? $data->produto_aguardando_impressao : "";
        $imprimir_comprovante_saida = (isset($data->imprimir_comprovante_saida)) ? $data->imprimir_comprovante_saida : "";
        $imprimir_cabecalho_empresa = (isset($data->imprimir_cabecalho_empresa)) ? $data->imprimir_cabecalho_empresa : "";
        $imprimir_ordem_produto = (isset($data->imprimir_ordem_produto)) ? $data->imprimir_ordem_produto : "";
        $imprimir_producao_junto = (isset($data->imprimir_producao_junto)) ? $data->imprimir_producao_junto : "";
        $imprimir_grupo_delivery = (isset($data->imprimir_grupo_delivery)) ? $data->imprimir_grupo_delivery : "";
        $imprimir_delivery_despacho = (isset($data->imprimir_delivery_despacho)) ? $data->imprimir_delivery_despacho : "";
        $imprimir_externo_interno = (isset($data->imprimir_externo_interno)) ? $data->imprimir_externo_interno : "";

        $consulta = $db->con()->prepare("UPDATE parametro set imprimir_2x = '$imprimir_2x', imprimir_3x = '$imprimir_3x',
      imprimir_detalhes = '$imprimir_detalhes', produto_aguardando_impressao = '$produto_aguardando_impressao',imprimir_comprovante_saida = '$imprimir_comprovante_saida',
      imprimir_cabecalho_empresa = '$imprimir_cabecalho_empresa', imprimir_ordem_produto = '$imprimir_ordem_produto',
      imprimir_producao_junto = '$imprimir_producao_junto', imprimir_delivery_despacho = '$imprimir_delivery_despacho',
      imprimir_grupo_delivery = '$imprimir_grupo_delivery', imprimir_externo_interno = '$imprimir_externo_interno' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametrosImpressao2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $impressao_fonte = (isset($data->impressao_fonte)) ? $data->impressao_fonte : "";
        $impressao_tamanho_fonte = (isset($data->impressao_tamanho_fonte)) ? $data->impressao_tamanho_fonte : "";
        $impressao_segunda_posicao = (isset($data->impressao_segunda_posicao)) ? $data->impressao_segunda_posicao : "";
        $impressao_terceira_posicao = (isset($data->impressao_terceira_posicao)) ? $data->impressao_terceira_posicao : "";
        $impressao_quebra_linha = (isset($data->impressao_quebra_linha)) ? $data->impressao_quebra_linha : "";
        $impressao_peso_fonte_primeira_coluna = (isset($data->impressao_peso_fonte_primeira_coluna)) ? $data->impressao_peso_fonte_primeira_coluna : "";
        $impressao_peso_fonte_segunda_coluna = (isset($data->impressao_peso_fonte_segunda_coluna)) ? $data->impressao_peso_fonte_segunda_coluna : "";
        $impressao_peso_fonte_produto = (isset($data->impressao_peso_fonte_produto)) ? $data->impressao_peso_fonte_produto : "";
        $impressao_peso_fonte_adicional = (isset($data->impressao_peso_fonte_adicional)) ? $data->impressao_peso_fonte_adicional : "";
        $impressao_quebra_linha_produto = (isset($data->impressao_quebra_linha_produto)) ? $data->impressao_quebra_linha_produto : "";
        $impressao_imprimir_valor_producao = (isset($data->impressao_imprimir_valor_producao)) ? $data->impressao_imprimir_valor_producao : "";
        $impressao_quebra_linha_produto_producao = (isset($data->impressao_quebra_linha_produto_producao)) ? $data->impressao_quebra_linha_produto_producao : "";
        $consulta = $db->con()->prepare("UPDATE parametro set impressao_fonte = '$impressao_fonte',
      impressao_tamanho_fonte = '$impressao_tamanho_fonte', impressao_segunda_posicao = '$impressao_segunda_posicao',
      impressao_terceira_posicao = '$impressao_terceira_posicao', impressao_quebra_linha = '$impressao_quebra_linha',
      impressao_peso_fonte_primeira_coluna = '$impressao_peso_fonte_primeira_coluna', impressao_peso_fonte_segunda_coluna = '$impressao_peso_fonte_segunda_coluna',
      impressao_peso_fonte_produto = '$impressao_peso_fonte_produto', impressao_peso_fonte_adicional = '$impressao_peso_fonte_adicional',
      impressao_quebra_linha_produto = '$impressao_quebra_linha_produto', impressao_imprimir_valor_producao = '$impressao_imprimir_valor_producao',
      impressao_quebra_linha_produto_producao = '$impressao_quebra_linha_produto_producao'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametros2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $consumacao = (isset($data->consumacao)) ? $data->consumacao : "";
        $entrada = (isset($data->entrada)) ? $data->entrada : "";
        $ajuda_custo_entregador = (isset($data->ajuda_custo_entregador)) ? $data->ajuda_custo_entregador : "";
        $id = (isset($data->id)) ? $data->id : "";
        $tipo_ajuda_custo_entregador = (isset($data->tipo_ajuda_custo_entregador)) ? $data->tipo_ajuda_custo_entregador : "";
        $porcentagem_ifood_dinheiro = (isset($data->porcentagem_ifood_dinheiro)) ? $data->porcentagem_ifood_dinheiro : "";
        $porcentagem_ifood_online = (isset($data->porcentagem_ifood_online)) ? $data->porcentagem_ifood_online : "";
        $complemento_entrada = (isset($data->complemento_entrada)) ? $data->complemento_entrada : "0";
        $tela_principal = (isset($data->tela_principal)) ? $data->tela_principal : "Pedidos em Aberto";
        $versao_gestao_delivery = (isset($data->versao_gestao_delivery)) ? $data->versao_gestao_delivery : "";
        $taxa_fixa_entregador = (isset($data->taxa_fixa_entregador)) ? $data->taxa_fixa_entregador : "";

        $consulta = $db->con()->prepare("UPDATE parametro set consumacao = '$consumacao', complemento_entrada = '$complemento_entrada',
        tipo_ajuda_custo_entregador = '$tipo_ajuda_custo_entregador', porcentagem_ifood_dinheiro = '$porcentagem_ifood_dinheiro',
        porcentagem_ifood_online = '$porcentagem_ifood_online', tela_principal = '$tela_principal',
        entrada = '$entrada', ajuda_custo_entregador = '$ajuda_custo_entregador',
        versao_gestao_delivery = '$versao_gestao_delivery', taxa_fixa_entregador = '$taxa_fixa_entregador' where id = '$id'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametros3',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $controle_responsavel_comanda = (isset($data->controle_responsavel_comanda)) ? $data->controle_responsavel_comanda : "";


        $consulta = $db->con()->prepare("UPDATE parametro set
         controle_responsavel_comanda = '$controle_responsavel_comanda'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);


$app->post(
    '/atualizarParametroTempo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tempo_preparo = (isset($data->tempo_preparo)) ? $data->tempo_preparo : "";
        $tempo_aguardando_entregador = (isset($data->tempo_aguardando_entregador)) ? $data->tempo_aguardando_entregador : "";
        $tempo_sair_entrega = (isset($data->tempo_sair_entrega)) ? $data->tempo_sair_entrega : "";

        $consulta = $db->con()->prepare("UPDATE parametro set tempo_preparo = '$tempo_preparo',
        tempo_aguardando_entregador = '$tempo_aguardando_entregador', tempo_sair_entrega = '$tempo_sair_entrega'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/atualizarDadosImpressaoWeb',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tamanho_papel = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $fonte_impressao_web = (isset($data->fonte_impressao_web)) ? $data->fonte_impressao_web : "";
        $primeira_coluna_impressao_web = (isset($data->primeira_coluna_impressao_web)) ? $data->primeira_coluna_impressao_web : "";
        $segunda_coluna_impressao_web = (isset($data->segunda_coluna_impressao_web)) ? $data->segunda_coluna_impressao_web : "";
        $margin_primeira_coluna = (isset($data->margin_primeira_coluna)) ? $data->margin_primeira_coluna : "";
        $margin_segunda_coluna = (isset($data->margin_segunda_coluna)) ? $data->margin_segunda_coluna : "";
        $margin_segunda_coluna_valores = (isset($data->margin_segunda_coluna_valores)) ? $data->margin_segunda_coluna_valores : "";

        $consulta = $db->con()->prepare("UPDATE parametro set
       fonte_impressao_web = '$fonte_impressao_web',
        primeira_coluna_impressao_web = '$primeira_coluna_impressao_web',
      segunda_coluna_impressao_web = '$segunda_coluna_impressao_web',
      margin_primeira_coluna = '$margin_primeira_coluna', margin_segunda_coluna = '$margin_segunda_coluna',
      margin_segunda_coluna_valores = '$margin_segunda_coluna_valores' ");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE empresa set tamanho_papel = '$tamanho_papel' ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarParametrosOutros',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : "";
        $frete_gratis = (isset($data->frete_gratis)) ? $data->frete_gratis : "";
        $senha_atendimento = (isset($data->senha_atendimento)) ? $data->senha_atendimento : "";
        $pedido_minimo = (isset($data->pedido_minimo)) ? $data->pedido_minimo : "";
        $chave_pix_app = (isset($data->chave_pix_app)) ? $data->chave_pix_app : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE parametro set porcentagem_garcom = '$porcentagem_garcom',chave_pix_app = '$chave_pix_app',
        senha_atendimento = '$senha_atendimento', frete_gratis = '$frete_gratis', pedido_minimo = '$pedido_minimo'
        where id = '$id'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParametroSomenteRetiraLocal',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $somente_retira_local = (isset($data->somente_retira_local)) ? $data->somente_retira_local : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE parametro set somente_retira_local = '$somente_retira_local'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarParcialPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";

        $consulta = $db->con()->prepare("UPDATE parcial_pedido set forma_pagamento = '$forma_pagamento', troco = '$troco', valor = '$valor'
       where id = '$id'  ");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE pedido set forma_pagamento = '$forma_pagamento'
       where id = '$id_pedido'  ");
        $consulta->execute();
        if ($forma_pagamento != "Dinheiro") {
            $consulta = $db->con()->prepare("UPDATE pedido set troco = ''
         where id = '$id_pedido'  ");
            $consulta->execute();
        }

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarClienteCPF',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_nascimento = (isset($data->data_nascimento)) ? $data->data_nascimento : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";

        $consulta = $db->con()->prepare("UPDATE cliente set data_nascimento = '$data_nascimento', cpf = '$cpf' where id = '$id_cliente'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarQuantidadeProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";

        $consulta = $db->con()->prepare("UPDATE pedido_produto set quantidade = '$quantidade',
        valor_total = '$valor_total' where id_pedido = '$id_pedido' and id_produto = '$id_produto'
        and sequencia = '$sequencia'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/alterarMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";
        $id_refernecia_mesa_antigo = (isset($data->id_refernecia_mesa_antigo)) ? $data->id_refernecia_mesa_antigo : "";

        $consulta = $db->con()->prepare("UPDATE pedido set id_referencia_mesa = '$id_referencia_mesa',
        nome_mesa = '$nome_mesa' where id = '$id_pedido'  ");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' where id_referencia = '$id_referencia_mesa'  ");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto' where id_referencia = '$id_refernecia_mesa_antigo'  ");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/setCaixa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $valor_final = (isset($data->valor_final)) ? $data->valor_final : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE caixa set status = '$status', data_fechamento = '$datetime',
        valor_final = '$valor_final', observacao = '$observacao' where id = '$id'  ");
        if ($consulta->execute()) {
            if ($status == "fechado") {
                $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto'  ");
                $consulta->execute();
            }
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/abrirCaixa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $datetime = date_create()->format('Y-m-d H:i:s');
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $valor_inicial = (isset($data->valor_inicial)) ? $data->valor_inicial : "0";
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "0";
        $id_caixa = (isset($data->id_caixa)) ? $data->id_caixa : "";
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $consulta = $db->con()->prepare("SELECT id from caixa where status = 'aberto' and id_empresa = '$id_empresa' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if ($data_abertura != "") {
            $datetime = $data_abertura;
        }
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO caixa (status, data_abertura, id_empresa, valor_inicial) VALUES
          ('aberto', '$datetime', '$id_empresa', '$valor_inicial')  ");
            $consulta->execute();
            $id_caixa = $db->con()->lastInsertId();
            if (isset($id_usuario)) {
                $consulta = $db->con()->prepare("INSERT INTO caixa_usuario (id_caixa, data_abertura, id_usuario, valor_inicial) VALUES
            ('$id_caixa', '$datetime', '$id_usuario', '$valor_inicial')  ");
                $consulta->execute();
                $consulta = $db->con()->prepare("UPDATE caixa set valor_inicial = (SELECT sum(valor_inicial) from
            caixa_usuario where id_caixa = '$id_caixa') where id = '$id_caixa' ");
                $consulta->execute();
            }
            echo json_encode("ok");

        } else {
            if (isset($id_usuario)) {
                $consulta = $db->con()->prepare("INSERT INTO caixa_usuario (id_caixa, data_abertura, id_usuario, valor_inicial) VALUES
            ('$id_caixa', '$datetime', '$id_usuario', '$valor_inicial')  ");
                $consulta->execute();
                $consulta = $db->con()->prepare("UPDATE caixa set valor_inicial = (SELECT sum(valor_inicial) from
            caixa_usuario where id_caixa = '$id_caixa') where id = '$id_caixa' ");
                $consulta->execute();
                echo json_encode("ok");
            } else {
                echo json_encode("existe");
            }

        }
    }
);

$app->post(
    '/verificarPedidoAberto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.*, usuario.usuario, cliente.nome, cliente.telefone from pedido
        left join cliente on pedido.id_cliente = cliente.id
        left join usuario on pedido.id_entregador = usuario.id
        where
        pedido.cancelado = 'false' AND
        status <> 'Orçamento'
        and status <> 'agendado' and status <> 'Aplicativo' and fechamento_muitos = 'false'
        and pedido.status <> 'Finalizado' order by data_pedido ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/atualizarDataImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set data_impressao = '$datetime' where id = '$id' and (data_impressao is null or data_impressao = '0000-00-00 00:00:00')  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarDataFechamentoCaixaUsuario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE caixa_usuario set data_fechamento = '$datetime'
       where id_caixa = '$id' and id_usuario = '$id_usuario'  ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarConfirmarPedidoAutomatico',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $consulta = $db->con()->prepare("UPDATE parametro set confirmacao_pedido_online_automatico = '$status' where id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarComanda',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $pedido = (isset($data->pedido)) ? $data->pedido : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";

        if ($id_referencia_mesa == '0') {
            $consulta = $db->con()->prepare("UPDATE comanda set pedido = '$pedido', id_referencia_mesa = '$id_referencia_mesa'  where id = '$id'  ");
        } else {
            $consulta = $db->con()->prepare("UPDATE comanda set pedido = '$pedido'  where id_referencia_mesa = '$id_referencia_mesa' and status = 'aberto'  ");
        }

        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarTextoHorario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO texto_horario_funcionamento (descricao, id_empresa)
        VALUES('$descricao', '$id_empresa')");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarIDCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $id_notificacao = (isset($data->id_notificacao)) ? $data->id_notificacao : "";

        $consulta = $db->con()->prepare("UPDATE cliente set id_notificacao = '$id_notificacao' where id = '$id_cliente'");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarIDClientePedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";

        $consulta = $db->con()->prepare("UPDATE pedido set id_cliente = '$id_cliente' where id = '$id_pedido'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);


$app->post(
    '/atualizarIDEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_notificacao = (isset($data->id_notificacao)) ? $data->id_notificacao : "";

        $consulta = $db->con()->prepare("UPDATE empresa set id_notificacao = '$id_notificacao' where id = '$id_empresa'");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarErro',
    function () use ($app, $db) {
        /*     $data = json_decode($app->request()->getBody());
        $erros = json_decode(json_encode($data->erros), true);
        $datetime = date_create()->format('Y-m-d H:i:s');
        foreach ($erros as $item) {
        $item = json_encode($item);
        $consulta = $db->con()->prepare("INSERT INTO erro (erro, data)
        VALUES('$item', '$datetime')");
        $consulta->execute();
        }
         */
        echo json_encode("ok");

    }
);

function enviarNotificacaoPedido($app, $db, $id, $status)
{

    $consulta = $db->con()->prepare("SELECT cliente.nome, cliente.id_notificacao, pedido.id_empresa from cliente, pedido where
      pedido.id_cliente = cliente.id and pedido.id = '$id'

      ");
    $consulta->execute();
    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
    if ($list[0]['id_notificacao'] != '' && $list[0]['id_notificacao'] != null) {
        $id_notificacao = $list[0]['id_notificacao'];
        $nome_cliente = $list[0]['nome'];
        if ($status == 0) {
            $t = explode(" ", $nome_cliente);
            $n = $t[0];
            $msg = "Olá $n, seu pedido está em preparado!";
        } else if ($status == 1) {
            $t = explode(" ", $nome_cliente);
            $n = $t[0];
            $msg = "Olá $n, seu pedido está em transporte!";
        } else if ($status == 5) {
            $t = explode(" ", $nome_cliente);
            $n = $t[0];
            $msg = "Olá $n, seu pedido foi cancelado!";
        }
        $id_empresa = $list[0]['id_empresa'];
        if ($id_empresa == 2) {
            $id_signal = "8382240c-b21a-441e-bc32-e423dfc1a6ae";
            $titulo = 'ChiliBurguer';
        } else {
            $id_signal = "52ebe8dd-ba62-4848-9d66-44a8b0adcfcb";
            $titulo = "Uai Pedido";
        }
        $content = array(
            "title" => $titulo,
            "en" => $msg,
        );

        $fields = array(
            'app_id' => $id_signal,
            'include_player_ids' => [$id_notificacao],
            //   'included_segments' => array('All'),
            'data' => array("foo" => "bar"),
            //   'large_icon' =>"ic_launcher_round.png",
            'contents' => $content,
        );

        $fields = json_encode($fields);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://onesignal.com/api/v1/notifications");
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json; charset=utf-8',
            'Authorization: Basic MTA2YTEzYjMtYzI5ZC00MzAwLWJiYzgtMGNjOWQzMTkwYjRk',
        )
        );
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $response = curl_exec($ch);
        curl_close($ch);
    }

    //   return $response;
}

function cicloPedidoGerencial($app, $db, $id)
{
    $enviar = true;
    while ($enviar) {

        $consulta = $db->con()->prepare("select pedido.id
     from pedido, empresa, cliente where
     pedido.id_empresa = empresa.id and pedido.id_empresa = '$id' and
     pedido.id_cliente = cliente.id and pedido.cancelado = 'false'
     and (data_visualizacao is null or pedido.status = 'Em aberto' or pedido.status = 'Visualizado') order by pedido.status ASC , data_pedido ASC

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            enviarNotificacaoEmpresa($app, $db, $id);
            sleep(60);
        } else {
            $enviar = false;
        }
    }
}

function enviarNotificacaoEmpresa($app, $db, $id)
{

    $consulta = $db->con()->prepare("SELECT empresa.nome, empresa.id_notificacao from empresa where
   empresa.id = '$id'

   ");
    $consulta->execute();
    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
    if ($list[0]['id_notificacao'] != '' && $list[0]['id_notificacao'] != null) {
        $id_notificacao = $list[0]['id_notificacao'];
        $nome_cliente = $list[0]['nome'];
        $t = explode(" ", $nome_cliente);
        $n = $t[0];
        $msg = "Olá $n, você tem um novo pedido!";

        $content = array(
            "title" => 'Uai Pedido',
            "en" => $msg,
        );

        $fields = array(
            'app_id' => "52ebe8dd-ba62-4848-9d66-44a8b0adcfcb",
            'include_player_ids' => [$id_notificacao],
            //   'included_segments' => array('All'),
            'data' => array("foo" => "bar"),
            //   'large_icon' =>"ic_launcher_round.png",
            'contents' => $content,
        );

        $fields = json_encode($fields);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://onesignal.com/api/v1/notifications");
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json; charset=utf-8',
            'Authorization: Basic MTA2YTEzYjMtYzI5ZC00MzAwLWJiYzgtMGNjOWQzMTkwYjRk',
        )
        );
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $response = curl_exec($ch);
        curl_close($ch);
    }

    //   return $response;
}

$app->post(
    '/atualizarStatusProduto/',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";
        $status = (isset($data->status)) ? $data->status : "";
        try {

            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE pedido_produto set status = '$status' where id_produto = '$id' and
      id_pedido = '$id_pedido' and sequencia = '$sequencia' ");
            $consulta->execute();

            $db->con()->commit();
            echo json_encode($id);
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/salvarEtapa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $frase = (isset($data->frase)) ? $data->frase : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $adicional1 = (isset($data->adicional1)) ? $data->adicional1 : "";
        $adicional2 = (isset($data->adicional2)) ? $data->adicional2 : "";
        $adicional3 = (isset($data->adicional3)) ? $data->adicional3 : "";
        $adicional4 = (isset($data->adicional4)) ? $data->adicional4 : "";
        $adicional5 = (isset($data->adicional5)) ? $data->adicional5 : "";
        $adicional6 = (isset($data->adicional6)) ? $data->adicional6 : "";
        $adicional7 = (isset($data->adicional7)) ? $data->adicional7 : "";
        $adicional8 = (isset($data->adicional8)) ? $data->adicional8 : "";
        $adicional9 = (isset($data->adicional9)) ? $data->adicional9 : "";
        $adicional10 = (isset($data->adicional10)) ? $data->adicional10 : "";
        $adicional11 = (isset($data->adicional11)) ? $data->adicional11 : "";
        $adicional12 = (isset($data->adicional12)) ? $data->adicional12 : "";
        $adicional13 = (isset($data->adicional13)) ? $data->adicional13 : "";
        $adicional14 = (isset($data->adicional14)) ? $data->adicional14 : "";
        $adicional15 = (isset($data->adicional15)) ? $data->adicional15 : "";
        $adicional16 = (isset($data->adicional16)) ? $data->adicional16 : "";
        $adicional17 = (isset($data->adicional17)) ? $data->adicional17 : "";

        if ($adicional3 == 'vazio') {
            $adicional3 = null;
        }
        if ($adicional4 == 'vazio') {
            $adicional4 = null;
        }
        if ($adicional5 == 'vazio') {
            $adicional5 = null;
        }
        if ($adicional6 == 'vazio') {
            $adicional6 = null;
        }
        if ($adicional7 == 'vazio') {
            $adicional7 = null;
        }
        if ($adicional8 == 'vazio') {
            $adicional8 = null;
        }
        if ($adicional9 == 'vazio') {
            $adicional9 = null;
        }
        if ($adicional10 == 'vazio') {
            $adicional10 = null;
        }
        if ($adicional11 == 'vazio') {
            $adicional11 = null;
        }
        if ($adicional12 == 'vazio') {
            $adicional12 = null;
        }
        if ($adicional13 == 'vazio') {
            $adicional13 = null;
        }
        if ($adicional14 == 'vazio') {
            $adicional14 = null;
        }
        if ($adicional15 == 'vazio') {
            $adicional15 = null;
        }
        if ($adicional16 == 'vazio') {
            $adicional16 = null;
        }
        if ($adicional17 == 'vazio') {
            $adicional17 = null;
        }

        $consulta = $db->con()->prepare("INSERT INTO etapa_produto (frase, id_produto, numero,
     adicional1, adicional2, adicional3, adicional4, adicional5, adicional6,
     adicional7, adicional8, adicional9, adicional10, adicional11, adicional12,
     adicional13, adicional14, adicional15, adicional16, adicional17)
    VALUES('$frase', '$id_produto', '$numero', $adicional1, $adicional2,
      '$adicional3', '$adicional4', '$adicional5', '$adicional6',
      '$adicional7', '$adicional8', '$adicional9', '$adicional10',
      '$adicional11', '$adicional12', '$adicional13', '$adicional14', '$adicional15',
      '$adicional16', '$adicional17')");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("UPDATE produto set monte_produto = 'true' where id ='$id_produto' ");
            $consulta->execute();
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/adicionarRemoverFormaPagamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $status = (isset($data->status)) ? $data->status : "";
        if ($status == true) {
            $consulta = $db->con()->prepare("INSERT INTO forma_pagamento (descricao, id_empresa)
          VALUES ('$descricao', '$id_empresa')

          ");
        } else {
            $consulta = $db->con()->prepare("DELETE from forma_pagamento where id_empresa = '$id_empresa' and
         descricao = '$descricao'

         ");
        }
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/adicionarRemoverBandeira',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        if ($status == true) {
            $consulta = $db->con()->prepare("INSERT INTO bandeira_empresa (id_bandeira_cartao, id_empresa)
          VALUES ('$id', '$id_empresa')

          ");
        } else {
            $consulta = $db->con()->prepare("DELETE from bandeira_empresa where id_empresa = '$id_empresa' and
         id_bandeira_cartao = '$id'

         ");
        }
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarPromocao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor_promocao = (isset($data->valor_promocao)) ? $data->valor_promocao : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        //  $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";
        $data_promocao = (isset($data->data_promocao)) ? $data->data_promocao : "";
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $forcar_observacao = (isset($data->forcar_observacao)) ? $data->forcar_observacao : "";
        $fixo = (isset($data->fixo)) ? $data->fixo : "";

        $consulta = $db->con()->prepare("select id from promocao where id_produto = '$id_produto' and dia_semana = '$dia_semana'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO promocao (valor_promocao, id_produto, id_empresa, dia_semana, ativo, forcar_observacao, data_promocao, fixo)
          VALUES(:valor_promocao, :id_produto, :id_empresa, :dia_semana, :ativo, :forcar_observacao, :data_promocao, :fixo)");
            $consulta->bindValue(':valor_promocao', (isset($data->valor_promocao) && $data->valor_promocao != '') ? $data->valor_promocao : null);
            $consulta->bindValue(':id_produto', $id_produto);
            $consulta->bindValue(':id_empresa', $id_empresa);
            $consulta->bindValue(':dia_semana', (isset($data->dia_semana) && $data->dia_semana != '') ? $data->dia_semana : null);
            $consulta->bindValue(':ativo', $ativo);
            $consulta->bindValue(':forcar_observacao', $forcar_observacao);
            $consulta->bindValue(':data_promocao', (isset($data->data_promocao) && $data->data_promocao != '') ? $data->data_promocao : null);
            $consulta->bindValue(':fixo', $fixo);
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/salvarCategoria',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "0";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $icone = (isset($data->icone)) ? $data->icone : "";
        $tipo_categoria = (isset($data->tipo_categoria)) ? $data->tipo_categoria : "";
        $consulta = $db->con()->prepare("select id from categoria_produto where id_empresa = '$id_empresa' and ordem = '$ordem'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO categoria_produto (descricao, ordem, id_empresa, icone, tipo_categoria)
          VALUES('$descricao', '$ordem', '$id_empresa', '$icone', '$tipo_categoria')");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/apagarProdutoNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from produto
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarAgendamentoProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_agendamento = (isset($data->id_agendamento)) ? $data->id_agendamento : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $consulta = $db->con()->prepare("DELETE from agendamento_produto
       where id_produto = '$id_produto' and id_agendamento = '$id_agendamento'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarAgendamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("DELETE from agendamento_produto
       where id_agendamento = '$id'

       ");
        $consulta->execute();

        $consulta = $db->con()->prepare("DELETE from agendamento
       where id = '$id'

       ");
        $consulta->execute();

        echo json_decode("ok");

    }
);

$app->post(
    '/apagarImpressora',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from impressora
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarSobreEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from sobre_empresa
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarImagemProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from produto_imagem
       where id = '$id'");
        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/apagarComposicao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from produtos_composicao
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarComposicaoFiscal',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from composicao_fiscal
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarAlteracaoLog',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from alteracoes_log
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarAdicionalNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT id from adicional_produto where id_adicional = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("DELETE from adicional
         where id = '$id'

         ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/atualizarCategoria',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $id = (isset($data->id)) ? $data->id : "";
        $tipo_categoria = (isset($data->tipo_categoria)) ? $data->tipo_categoria : "";
        $atualizar_ordem = (isset($data->atualizar_ordem)) ? $data->atualizar_ordem : "";
        $icone = (isset($data->icone)) ? $data->icone : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("select id from categoria_produto where id_empresa = '$id_empresa' and ordem = '$ordem'
        and id <> '$id'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("UPDATE categoria_produto set
         descricao = '$descricao', ordem = '$ordem', icone = '$icone', tipo_categoria = '$tipo_categoria' where id = '$id' ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/atualizarPromocao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor_promocao = (isset($data->valor_promocao)) ? $data->valor_promocao : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("select id from promocao where id_produto = '$id_produto' and dia_semana = '$dia_semana'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("UPDATE promocao set valor_promocao = '$valor_promocao', id_produto = '$id_produto',
          dia_semana = '$dia_semana' where id = '$id' ");
            if ($consulta->execute()) {
                echo "ok";
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo "existe";
        }

    }
);

$app->post(
    '/atualizarEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id = (isset($data->id)) ? $data->id : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $lat = (isset($data->lat)) ? $data->lat : "";
        $lng = (isset($data->lng)) ? $data->lng : "";
        $tempo_entrega = (isset($data->tempo_entrega)) ? $data->tempo_entrega : "";
        $email = (isset($data->email)) ? $data->email : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $admin = (isset($data->admin)) ? $data->admin : "";
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $fidelidade = (isset($data->fidelidade)) ? $data->fidelidade : "";
        $gerencial = (isset($data->gerencial)) ? $data->gerencial : "";
        $impressora = (isset($data->impressora)) ? $data->impressora : "";
        $ip_impressao = (isset($data->ip_impressao)) ? $data->ip_impressao : "";
        $ip_servidor = (isset($data->ip_servidor)) ? $data->ip_servidor : "";
        $modelo = (isset($data->modelo)) ? $data->modelo : "";
        $quantidade_fidelidade = (isset($data->quantidade_fidelidade)) ? $data->quantidade_fidelidade : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $tamanho_papel = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $valor_fidelidade = (isset($data->valor_fidelidade)) ? $data->valor_fidelidade : "";
        if ($id != -1) {
            $consulta = $db->con()->prepare("UPDATE empresa set nome = '$nome', descricao = '$descricao', endereco = '$endereco',
         numero = '$numero', complemento = '$complemento', bairro = '$bairro', cidade = '$cidade', estado = '$estado',
         lat = '$lat', lng = '$lng', tempo_entrega = '$tempo_entrega', email = '$email', cep = '$cep', admin = '$admin', ativo = '$ativo',
         fidelidade = '$fidelidade', gerencial = '$gerencial', impressora = '$impressora', ip_impressao = '$ip_impressao', ip_servidor = '$ip_servidor',
         modelo = '$modelo', quantidade_fidelidade = '$quantidade_fidelidade', retira_local = '$retira_local', senha = '$senha', tamanho_papel = '$tamanho_papel',
         valor_fidelidade = '$valor_fidelidade' where id = '$id' ");
        } else {
            $consulta = $db->con()->prepare("INSERT INTO empresa (nome, descricao, endereco, numero, complemento, bairro, cidade, estado, lat, lng, tempo_entrega,
          email, cep, admin, ativo, fidelidade, gerencial, impressora, ip_impressao, ip_servidor, modelo, quantidade_fidelidade, retira_local, senha,
          tamanho_papel, valor_fidelidade) VALUES ('$nome', '$descricao', '$endereco', '$numero', '$complemento', '$bairro', '$cidade',
          '$estado', '$lat', '$lng', '$tempo_entrega', '$email', '$cep', '$admin', '$ativo', '$fidelidade', '$gerencial', '$impressora',
          '$ip_impressao', '$ip_servidor', '$modelo', '$quantidade_fidelidade', '$retira_local', '$senha',
          '$tamanho_papel', '$valor_fidelidade') ");
            $consulta->execute();
            $id_empresa = $db->con()->lastInsertId();
            $consulta = $db->con()->prepare("INSERT INTO parametro (id_empresa) VALUES ('$id_empresa') ");
        }

        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarIdEmpresaCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE cliente set id_empresa = '$id_empresa' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarAtivoPromocao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE promocao set ativo = '$ativo' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarForcarObservacao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $forcar_observacao = (isset($data->forcar_observacao)) ? $data->forcar_observacao : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE promocao set forcar_observacao = '$forcar_observacao' where id = '$id' ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarTempoEntrega',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tempo_entrega = (isset($data->tempo_entrega)) ? $data->tempo_entrega : "";

        $consulta = $db->con()->prepare("UPDATE empresa set tempo_entrega = '$tempo_entrega' where id = '$id'");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarUnidadeEntradaSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $sigla = (isset($data->sigla)) ? $data->sigla : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $qt_conversao = (isset($data->qt_conversao)) ? $data->qt_conversao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO unidades_entrada_saida (sigla, descricao, qt_conversao, id_empresa)
        VALUES ('$sigla', '$descricao', '$qt_conversao', '$id_empresa') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarUnidadeEntradaSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $sigla = (isset($data->sigla)) ? $data->sigla : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $qt_conversao = (isset($data->qt_conversao)) ? $data->qt_conversao : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE unidades_entrada_saida set
        sigla = '$sigla', descricao = '$descricao', qt_conversao = '$qt_conversao' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
  '/atualizarTempoDeEntrega',
  function () use ($app, $db) {
      $data = json_decode($app->request()->getBody());
      $tempo_entrega = (isset($data->tempo_entrega)) ? $data->tempo_entrega : "";
      $tempo_retira = (isset($data->tempo_retira)) ? $data->tempo_retira : "";
      $id = (isset($data->id)) ? $data->id : "";

      $consulta = $db->con()->prepare("UPDATE empresa set tempo_entrega = '$tempo_entrega',
    tempo_retira = '$tempo_retira' where id = '$id'  ");
      if ($consulta->execute()) {
          echo json_encode("ok");
      } else {
          echo json_encode(array("erro" => true));
      }
  }
);

$app->post(
    '/salvarBairroEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO bairro_empresa (valor, id_bairro, id_empresa)
        VALUES('$valor', '$id', '$id_empresa')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarFormaPagamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";

        $consulta = $db->con()->prepare("UPDATE forma_pagamento set
        descricao = '$descricao' where
        id = '$id'");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/updateEmailCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $email = (isset($data->email)) ? $data->email : "";

        $consulta = $db->con()->prepare("UPDATE cliente set
        email = '$email' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/updateSenhaCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nova_senha = (isset($data->nova_senha)) ? $data->nova_senha : "";

        $consulta = $db->con()->prepare("UPDATE cliente set
        senha = '$nova_senha' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/updateTelefoneCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";

        $consulta = $db->con()->prepare("UPDATE cliente set
        telefone = '$telefone' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/deleteBairroEmpresaNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from bairro_empresa
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarBairroEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $tempo_entrega = (isset($data->tempo_entrega)) ? $data->tempo_entrega : "";

        $consulta = $db->con()->prepare("UPDATE bairro_empresa set
        valor = '$valor', tempo_entrega = '$tempo_entrega' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarHorario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $hora_inicio = (isset($data->hora_inicio)) ? $data->hora_inicio : "";
        $hora_fechar = (isset($data->hora_fechar)) ? $data->hora_fechar : "";
        $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";

        $consulta = $db->con()->prepare("UPDATE horario_funcionamento set
        hora_inicio = '$hora_inicio', hora_fechar = '$hora_fechar',
        dia_semana = '$dia_semana' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarTaxaEntrega',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $km = (isset($data->km)) ? $data->km : "";
        $valor = (isset($data->valor)) ? $data->valor : "";

        $consulta = $db->con()->prepare("UPDATE taxa_entrega set
        km = '$km', valor = '$valor' where
        id = '$id'");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/setDisponivelNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $disponivel = (isset($data->disponivel)) ? $data->disponivel : "";
        $consulta = $db->con()->prepare("UPDATE produto set disponivel = '$disponivel'
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/setDisponivelCategoria',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $consulta = $db->con()->prepare("UPDATE produto set disponivel = '$status'
       where id_categoria = '$id'
       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/setAdicionalAtivo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $ativo = (isset($data->ativo)) ? $data->ativo : "";
        $consulta = $db->con()->prepare("UPDATE adicional set ativo = '$ativo'
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/atualizarMeusDados',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $email = (isset($data->email)) ? $data->email : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $cnpj_cpf = (isset($data->cnpj_cpf)) ? $data->cnpj_cpf : "";
        $whatsapp = (isset($data->whatsapp)) ? $data->whatsapp : "";
        $consulta = $db->con()->prepare("UPDATE empresa set
        nome = '$nome', endereco = '$endereco', numero = '$numero', bairro = '$bairro', cnpj_cpf = '$cnpj_cpf',
        complemento = '$complemento', email = '$email', cep = '$cep', descricao = '$descricao',
        whatsapp = '$whatsapp' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarDadosEmpresaOutros',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $comer_local = (isset($data->comer_local)) ? $data->comer_local : "";
        $consulta = $db->con()->prepare("UPDATE empresa set
      retira_local = '$retira_local',
      comer_local = '$comer_local' where id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarFidelidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $fidelidade = (isset($data->fidelidade)) ? $data->fidelidade : "";
        $quantidade_fidelidade = (isset($data->quantidade_fidelidade)) ? $data->quantidade_fidelidade : "";
        $valor_fidelidade = (isset($data->valor_fidelidade)) ? $data->valor_fidelidade : "";
        $data_inicio_fidelidade = (isset($data->data_inicio_fidelidade)) ? $data->data_inicio_fidelidade : "";

        $consulta = $db->con()->prepare("UPDATE empresa set
        fidelidade = '$fidelidade', quantidade_fidelidade = '$quantidade_fidelidade',
         valor_fidelidade = '$valor_fidelidade', data_inicio_fidelidade = '$data_inicio_fidelidade' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarIP',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $ip_impressao = (isset($data->ip_impressao)) ? $data->ip_impressao : "";
        $ip_servidor = (isset($data->ip_servidor)) ? $data->ip_servidor : "";


        $consulta = $db->con()->prepare("UPDATE empresa set
        ip_impressao = '$ip_impressao', ip_servidor = '$ip_servidor' where
        id = '$id'");
        $consulta->execute();

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarDadosImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $impressora = (isset($data->impressora)) ? $data->impressora : "";
        $imprimir_web = (isset($data->imprimir_web)) ? $data->imprimir_web : "";

        $consulta = $db->con()->prepare("UPDATE empresa set
        impressora = '$impressora' where
        id = '$id'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE parametro set imprimir_web = '$imprimir_web'");
        $consulta->execute();

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";

        $consulta = $db->con()->prepare("UPDATE produto set
        valor = '$valor', descricao = '$descricao', nome = '$nome', tipo = '$tipo',
        id_categoria = '$id_categoria', tipo_produto = '$tipo_produto',
        ordem = '$ordem' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarAPartirProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT adicional.valor from sabor inner join produto on sabor.id_produto = produto.id
        inner join adicional on sabor.id_adicional = adicional.id where
        sabor.id_produto = '$id' ORDER BY adicional.valor ASC LIMIT 1");
        if ($consulta->execute()) {
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $texto = $list[0]['valor'];
            $texto = asDollars($texto);
            $consulta = $db->con()->prepare("UPDATE produto set a_partir = '$texto' where id = '$id' ");
            $consulta->execute();
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarProdutoComAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $adicional = json_decode(json_encode($data->adicional), true);
        $descricao = str_replace('"', " ", $descricao);
        $descricao = str_replace("'", " ", $descricao);
        $nome = str_replace('"', " ", $nome);
        $nome = str_replace("'", " ", $nome);

        $consulta = $db->con()->prepare("UPDATE produto set
        valor = '$valor', descricao = '$descricao', nome = '$nome', tipo = '$tipo',
        id_categoria = '$id_categoria',
        ordem = '$ordem' where
        id = '$id'");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("DELETE from adicional_produto where id_produto = '$id' ");
            $consulta->execute();
            foreach ($adicional as $item) {
                $consulta = $db->con()->prepare("INSERT INTO adicional_produto (id_adicional, id_produto)
           VALUES ('$item', '$id') ");
                $consulta->execute();
            }
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarProdutoSemAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";
        $produto_sugestao = (isset($data->produto_sugestao)) ? $data->produto_sugestao : "";
        $duracao_execucao = (isset($data->duracao_execucao)) ? $data->duracao_execucao : "";
        $a_partir = (isset($data->a_partir)) ? $data->a_partir : "";
        $mostrar_dia = (isset($data->mostrar_dia)) ? $data->mostrar_dia : "";
        $adicional = json_decode(json_encode($data->adicional), true);
        $hora_inicio = (isset($data->hora_inicio)) ? $data->hora_inicio : "";
        $hora_final = (isset($data->hora_final)) ? $data->hora_final : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $codigo_barras = (isset($data->codigo_barras)) ? $data->codigo_barras : "";
        $impressao_individual = (isset($data->impressao_individual)) ? $data->impressao_individual : "";
        $placeholder_observacao = (isset($data->placeholder_observacao)) ? $data->placeholder_observacao : "";
        $descricao = str_replace('"', " ", $descricao);
        $descricao = str_replace("'", " ", $descricao);
        $nome = str_replace('"', " ", $nome);
        $nome = str_replace("'", " ", $nome);

        $consulta = $db->con()->prepare("UPDATE produto set
        valor = '$valor', descricao = '$descricao', nome = '$nome', tipo = '$tipo',
        id_categoria = '$id_categoria', tipo_produto = '$tipo_produto', produto_sugestao = '$produto_sugestao',
        ordem = '$ordem', duracao_execucao = '$duracao_execucao', a_partir = '$a_partir',hora_inicio = '$hora_inicio',
        hora_final = '$hora_final', mostrar_dia = '$mostrar_dia', observacao = '$observacao',
        impressao_individual = '$impressao_individual', codigo_barras = '$codigo_barras',
        placeholder_observacao = '$placeholder_observacao' where
        id = '$id'");
        if ($consulta->execute()) {

            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->get(
    '/sugestaoBairro/:email/:bairro/:email_cliente',
    function ($email, $bairro, $email_cliente) use ($app, $db) {
        $msg = "Sugestão de bairro para atendimento: '$bairro'";
        enviarEmailContato($email, $msg);
    }
);

$app->post(
    '/enviarForumarioContato',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $mensagem = (isset($data->mensagem)) ? $data->mensagem : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $email = (isset($data->email)) ? $data->email : "";
        $msg = "Nome: '$nome' - Telefone: '$telefone' - Email: '$email' - Mensagem: '$mensagem'";
        enviarEmailContato($email, $msg);
    }
);

$app->get(
    '/enviarSenha/:email/:msg',
    function ($email, $msg) use ($app, $db) {
        $consulta = $db->con()->prepare("SELECT senha from cliente where email = '$email' ");
        if ($consulta->execute()) {
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) == 0) {
                echo json_encode("nao_existe");
            } else {
                $senha = $list[0]['senha'];
                if ($senha == "") {
                    $consulta = $db->con()->prepare("update cliente set senha = 'uaipedido' where email = '$email' ");
                    $consulta->execute();
                    $senha = "uaipedido";
                    $msg = "Olá. Sua senha de acesso ao aplicativo é '$senha'";
                    enviarEmailContato($email, $msg);
                } else {
                    $msg = "Olá. Sua senha de acesso ao aplicativo é '$senha'";
                    enviarEmailContato($email, $msg);
                }
                echo json_encode("ok");
            }

        }
    }
);

$app->get(
    '/teste1234/:email/:msg',
    function ($email, $msg) use ($app, $db) {
        enviarEmailContato($email, $msg);
    }
);

$app->get(
    '/esqueciSenha2/:email',
    function ($email) use ($app, $db) {
        echo $email;
    }
);

$app->get(
    '/esqueciSenha/:email',
    function ($email) use ($app, $db) {
        $consulta = $db->con()->prepare("SELECT senha from cliente where email = '$email' ");
        if ($consulta->execute()) {
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $senha = $list[0]['senha'];
            if ($senha == "") {
                $consulta = $db->con()->prepare("update cliente set senha = 'uaipedido' where email = '$email' ");
                $consulta->execute();
                $senha = "uaipedido";
                $msg = "Olá. Sua senha de acesso ao aplicativo é '$senha'";
                enviarEmailContato($email, $msg);
            } else {
                $msg = "Olá. Sua senha de acesso ao aplicativo é '$senha'";
                enviarEmailContato($email, $msg);
            }
        }
    }
);

function enviarEmailContato($email, $msg)
{

    $enviaFormularioParaNome = 'UaiPedido';
    $enviaFormularioParaEmail = $email;
    $caixaPostalServidorNome = 'UaiPedido';
    $caixaPostalServidorEmail = 'uaipedido@uaipedido.com.br';
    $caixaPostalServidorSenha = 'denis14031988';
    $remetenteNome = "UaiPedido";
    $remetenteEmail = "uaipedido@gmail.com";
    $assunto = "UaiPedido";

    $mensagem = "<h4>$msg</h4>";
    $mens1 = "<html>
   <head>
   <title>Treino Musculação</title>
   </head>
   <body>";
    $mens2 = "</body>
   </html>";

    $mensagemConcatenada = $mens1 . $mensagem . $mens2;

    /*********************************** A PARTIR DAQUI NAO ALTERAR ************************************/

    require_once 'PHPMailer-master/PHPMailerAutoload.php';

    $mail = new PHPMailer();

    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->SMTPSecure = "ssl";
    $mail->Charset = 'utf8_decode()';
    $mail->Host = "uaipedido.com.br";
    $mail->Port = '465';
    $mail->Username = $caixaPostalServidorEmail;
    $mail->Password = $caixaPostalServidorSenha;
    $mail->From = $caixaPostalServidorEmail;
    $mail->FromName = utf8_decode($caixaPostalServidorNome);
    $mail->IsHTML(true);
    $mail->AddAddress('uaipedido@gmail.com', 'Denis Dias');
    $mail->Subject = utf8_decode($assunto);
    $mail->Body = utf8_decode($mensagemConcatenada);

    $mail->AddAddress($enviaFormularioParaEmail, utf8_decode($enviaFormularioParaNome));

    if (!$mail->Send()) {

    } else {

    }
}

function enviarSugestaoBairro($email, $bairro, $email_cliente)
{

    $enviaFormularioParaNome = '';
    $enviaFormularioParaEmail = $email;
    $caixaPostalServidorNome = 'UaiPedido';
    $caixaPostalServidorEmail = 'uaipedido@gmail.com';
    $caixaPostalServidorSenha = 'denis14031988';
    $remetenteNome = "UaiPedido";
    $remetenteEmail = "uaipedido@gmail.com";
    $assunto = "Sugestão de bairro UaiPedido";

    $mensagem = "<h4>Sugestão de bairro para atendimento: '$bairro'. Sugestão de '$email_cliente'</h4>";
    $mens1 = "<html>
   <head>
   <title>Treino Musculação</title>
   </head>
   <body>";
    $mens2 = "</body>
   </html>";

    $mensagemConcatenada = $mens1 . $mensagem . $mens2;

    /*********************************** A PARTIR DAQUI NAO ALTERAR ************************************/

    require_once 'PHPMailer-master/PHPMailerAutoload.php';

    $mail = new PHPMailer();

    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->SMTPSecure = "ssl";
    $mail->Charset = 'utf8_decode()';
    $mail->Host = "smtp.gmail.com";
    $mail->Port = '465';
    $mail->Username = $caixaPostalServidorEmail;
    $mail->Password = $caixaPostalServidorSenha;
    $mail->From = $caixaPostalServidorEmail;
    $mail->FromName = utf8_decode($caixaPostalServidorNome);
    $mail->IsHTML(true);
    $mail->Subject = utf8_decode($assunto);
    $mail->Body = utf8_decode($mensagemConcatenada);

    $mail->AddAddress($enviaFormularioParaEmail, utf8_decode($enviaFormularioParaNome));

    if (!$mail->Send()) {
        $mensagemRetorno = 'Erro ao enviar formulário: ' . print($mail->ErrorInfo);
    } else {
        $mensagemRetorno = json_encode("ok");
    }
    echo $mensagemRetorno;
}

$app->post(
    '/salvarPedidoWeb',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $produto = json_decode(json_encode($data->produtos), true);
        $sequencia = 0;

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO pedido (id_empresa, id_cliente, taxa_entrega, valor_total, forma_pagamento, troco, observacao, endereco, numero, complemento, bairro,
      cidade, estado, cep, data_pedido, numero_pedido, referencia, retira_local, tipo)
    VALUES ('$id_empresa', '$id_cliente', '$taxa_entrega', '$valor_total', '$forma_pagamento', '$troco', '$observacao', '$endereco', '$numero', '$complemento', '$bairro',
      '$cidade', '$estado', '$cep', '$datetime', (select sequencia_pedido + 1 from empresa where id = '$id_empresa'), '$referencia', '$retira_local', 'link app') ");
        if ($consulta->execute()) {
            $id_pedido = $db->con()->lastInsertId();
            foreach ($produto as $item) {
                $id_produto = $item['id'];
                $valor_produto = $item['valor'];
                $quantidade_produto = $item['quantidade'];
                $valor_total_produto = $item['valor_total'];
                $observacao_pedido = $item['observacao'];
                $valor_produto = $item['valor'];
                $consulta = $db->con()->prepare("INSERT INTO pedido_produto (id_produto, id_pedido, quantidade, valor_produto, valor_total, observacao, sequencia) VALUES
         ('$id_produto', '$id_pedido', '$quantidade_produto', '$valor_produto', '$valor_total_produto', '$observacao_pedido', '$sequencia') ");
                $consulta->execute();
                foreach ($item['listAdicional'] as $item2) {
                    $id_adicional = $item2['id'];
                    $valor_adicional = $item2['valor'];
                    if (isset($item2['observacao'])) {
                        $obs_adicional = $item2['observacao'];
                    } else {
                        $obs_adicional = "";
                    }

                    $consulta = $db->con()->prepare("INSERT INTO adicional_produto_pedido (id_adicional, id_produto, id_pedido, valor_adicional, sequencia, texto_observacao) VALUES
         ('$id_adicional', '$id_produto', '$id_pedido', '$valor_adicional', '$sequencia', '$obs_adicional') ");
                    $consulta->execute();
                }
                $sequencia++;
            }
            $consulta = $db->con()->prepare("UPDATE empresa set sequencia_pedido = sequencia_pedido + 1
    where id = '$id_empresa'");
            $consulta->execute();
            enviarEmailContato($email, "Você tem um novo pedido, verifique no aplicativo ou clique no link http://www.uaipedido.com.br/uaipedido/template2/visualizar_pedido.html?id=$id_pedido");

            //  echo json_encode("ok");
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarPedidoPDV',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = 0;
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $retira_local = 'false';
        $delivery = 'false';
        $produto = json_decode(json_encode($data->produtos), true);
        $formas_pagamento = json_decode(json_encode($data->formas_pagamento), true);
        $sequencia = 0;
        $datetime = date_create()->format('Y-m-d H:i:s');

        if ($id_cliente == -1 && $nome != "") {
            $consulta = $db->con()->prepare("INSERT INTO cliente (nome, cpf, endereco, numero,
        complemento, bairro, cidade, estado, referencia, id_empresa) VALUES ('$nome', '$cpf', '$endereco', '$numero',
        '$complemento', '$bairro', '$cidade', '$estado', '$referencia', '$id_empresa')");
            $consulta->execute();
            $id_cliente = $db->con()->lastInsertId();
        } else {
            $consulta = $db->con()->prepare("UPDATE cliente set nome = '$nome', cpf = '$cpf',
        endereco = '$endereco', numero = '$numero', complemento = '$complemento',
        bairro = '$bairro', cidade = '$cidade', estado = '$estado',
        referencia = '$referencia' where id = '$id_cliente'");
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("INSERT INTO pedido (id_empresa, id_cliente, taxa_entrega, valor_total, endereco, numero, complemento, bairro,
    cidade, estado, cep, data_pedido, data_finalizacao, referencia, retira_local, delivery, tipo, status, cpf, forma_pagamento)
  VALUES ('$id_empresa', '$id_cliente', '$taxa_entrega', '$valor_total', '$endereco', '$numero', '$complemento', '$bairro',
    '$cidade', '$estado', '$cep', '$datetime', '$datetime', '$referencia',
     '$retira_local', '$delivery', 'gerencial', 'Finalizado', '$cpf', '$forma_pagamento') ");
        $consulta->execute();
        $id_pedido = $db->con()->lastInsertId();
        foreach ($produto as $item) {
            $id_produto = $item['id'];
            $valor_produto = $item['valor'];
            $quantidade_produto = $item['quantidade'];
            $valor_total_produto = $item['valor_total'];
            $consulta = $db->con()->prepare("INSERT INTO pedido_produto (id_produto, id_pedido, quantidade, valor_produto, valor_total, sequencia) VALUES
       ('$id_produto', '$id_pedido', '$quantidade_produto', '$valor_produto', '$valor_total_produto', '$sequencia') ");
            $consulta->execute();
            $sequencia++;
        }
        foreach ($formas_pagamento as $item) {
            $forma_pagamento = $item['forma_pagamento'];
            $valor = $item['valor'];
            if (strpos(strtolower($forma_pagamento), 'din') !== false) {
                $tipo_pagamento = "DINHEIRO";
            } else if (strpos(strtolower($forma_pagamento), 'debi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'débi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'cred') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'créd') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'pix') !== false) {
                $tipo_pagamento = "PIX";
            } else {
                $tipo_pagamento = $forma_pagamento;
            }
            $consulta = $db->con()->prepare("INSERT INTO parcial_pedido (id_pedido,forma_pagamento,valor, tipo_pagamento)
                VALUES ('$id_pedido','$forma_pagamento','$valor', '$tipo_pagamento') ");
            $consulta->execute();
        }

        echo json_encode($id_pedido);

    }
);

$app->post(
    '/atualizarMuitasPedidosMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $pedidos = json_decode(json_encode($data->pedidos), true);
        foreach ($pedidos as $item) {
            $consulta = $db->con()->prepare("UPDATE pedido set nome_mesa = '$nome_mesa' where id = '$item'  ");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $cupom_fidelidade = (isset($data->cupom_fidelidade)) ? $data->cupom_fidelidade : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $codigo_transferencia = (isset($data->codigo_transferencia)) ? $data->codigo_transferencia : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $fidelidade = (isset($data->fidelidade)) ? $data->fidelidade : "false";
        $produto = json_decode(json_encode($data->produtos), true);
        $sequencia = 0;

        if ($cupom_fidelidade != '' && $cupom_fidelidade != null && $cupom_fidelidade != 'null') {
            $fidelidade = 'false';
            $consulta = $db->con()->prepare("UPDATE cupom_fidelidade set ativo = 'false' where cupom = '$cupom_fidelidade' ");
            $consulta->execute();
        }

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO pedido (id_empresa, id_cliente, taxa_entrega, valor_total, forma_pagamento, troco, observacao, endereco, numero, complemento, bairro,
        cidade, estado, cep, data_pedido, numero_pedido, referencia, retira_local, tipo, codigo_transferencia, cupom_fidelidade, desconto, fidelidade)
      VALUES ('$id_empresa', '$id_cliente', '$taxa_entrega', '$valor_total', '$forma_pagamento', '$troco', '$observacao', '$endereco', '$numero', '$complemento', '$bairro',
        '$cidade', '$estado', '$cep', '$datetime', (select sequencia_pedido + 1 from empresa where id = '$id_empresa'), '$referencia',
        '$retira_local', 'app', '$codigo_transferencia', '$cupom_fidelidade', '$desconto', '$fidelidade') ");
        if ($consulta->execute()) {
            $id_pedido = $db->con()->lastInsertId();
            foreach ($produto as $item) {
                $id_produto = $item['id'];
                $valor_produto = $item['valor'];
                $quantidade_produto = $item['quantidade'];
                $valor_total_produto = $item['valor_total'];
                $observacao_pedido = $item['observacao'];
                $valor_produto = $item['valor'];
                $consulta = $db->con()->prepare("INSERT INTO pedido_produto (id_produto, id_pedido, quantidade, valor_produto, valor_total, observacao, sequencia) VALUES
           ('$id_produto', '$id_pedido', '$quantidade_produto', '$valor_produto', '$valor_total_produto', '$observacao_pedido', '$sequencia') ");
                $consulta->execute();
                foreach ($item['listAdicional'] as $item2) {
                    $id_adicional = $item2['id'];
                    $valor_adicional = $item2['valor'];
                    if (isset($item2['observacao'])) {
                        $obs_adicional = $item2['observacao'];
                    } else {
                        $obs_adicional = "";
                    }

                    $consulta = $db->con()->prepare("INSERT INTO adicional_produto_pedido (id_adicional, id_produto, id_pedido, valor_adicional, sequencia, texto_observacao) VALUES
           ('$id_adicional', '$id_produto', '$id_pedido', '$valor_adicional', '$sequencia', '$obs_adicional') ");
                    $consulta->execute();
                }
                $sequencia++;
            }
            $consulta = $db->con()->prepare("UPDATE empresa set sequencia_pedido = sequencia_pedido + 1
      where id = '$id_empresa'");
            $consulta->execute();
            if ($id_empresa != 2 && $id_empresa != 1) {
                $consulta = $db->con()->prepare("select id, inicio_codigo, (sequencia + 1) as sequencia from promocao_app where ativo = 'true' and id_empresa = 1

         ");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($list) > 0) {
                    $id_promo = $list[0]['id'];
                    $codigo_promo = $list[0]['inicio_codigo'] . "_" . $list[0]['sequencia'];
                    $consulta = $db->con()->prepare("UPDATE pedido set cupom = '$codigo_promo', id_promocao_app = '$id_promo'
          where id = '$id_pedido'");
                    $consulta->execute();
                    $consulta = $db->con()->prepare("UPDATE promocao_app set sequencia = sequencia + 1
          where ativo = 'true' and id_empresa = 1");
                    $consulta->execute();
                }
            }

            if ($id_empresa == 1 || $id_empresa == 19) {
                enviarNotificacaoEmpresa($app, $db, $id_empresa);
            }

            //     if($id_empresa == 4 || $id_empresa == 2 || $id_empresa == 1 || $id_empresa == 5 || $id_empresa == 7 || $id_empresa == 13 || $id_empresa == 9){

            //   }else{
            //      enviarEmailContato('denis.al.dias@gmail.com', "Você tem um novo pedido, verifique no aplicativo ou clique no link http://www.uaipedido.com.br/uaipedido/template2/visualizar_pedido.html?id=$id_pedido");
            //  }

            //  echo json_encode("ok");
            echo "ok";
            enviarEmailContato($email, "Você tem um novo pedido, verifique no aplicativo ou clique no link http://www.uaipedido.com.br/uaipedido/template2/visualizar_pedido.html?id=$id_pedido");

        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->get(
    '/getPedidoComProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome from pedido
        left join cliente on pedido.id_cliente = cliente.id where pedido.id = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'");
        $consulta->execute();
        $list[0]['parcial'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT pedido_produto.*, produto.nome from
        pedido_produto inner join produto on pedido_produto.id_produto = produto.id
        inner join categoria_produto on produto.id_categoria = categoria_produto.id
        where pedido_produto.id_pedido = '$id'    order by categoria_produto.ordem, produto.ordem

     ");
        $consulta->execute();
        $list[0]['produto'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list[0]['produto'] as $item) {
            $id_produto = $item['id_produto'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.descricao,
   adicional_produto_pedido.valor_adicional as valor, adicional_produto_pedido.quantidade as quantidade,
   adicional_produto_pedido.texto_observacao
   from adicional, produto, pedido, adicional_produto_pedido where
   adicional_produto_pedido.id_adicional = adicional.id and
   adicional_produto_pedido.id_produto = produto.id and
   adicional_produto_pedido.id_pedido = pedido.id and
   adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
   adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem

   ");
            $consulta->execute();
            $list[0]['produto'][$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidoComProdutoExemplo',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome from pedido
      left join cliente on pedido.id_cliente = cliente.id  order by id DESC LIMIT 1");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'");
        $consulta->execute();
        $list[0]['parcial'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT pedido_produto.*, produto.nome from
      pedido_produto inner join produto on pedido_produto.id_produto = produto.id
      inner join categoria_produto on produto.id_categoria = categoria_produto.id
      where pedido_produto.id_pedido = '$id'    order by categoria_produto.ordem, produto.ordem

   ");
        $consulta->execute();
        $list[0]['produto'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list[0]['produto'] as $item) {
            $id_produto = $item['id_produto'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.descricao,
 adicional_produto_pedido.valor_adicional as valor, adicional_produto_pedido.quantidade as quantidade,
 adicional_produto_pedido.texto_observacao
 from adicional, produto, pedido, adicional_produto_pedido where
 adicional_produto_pedido.id_adicional = adicional.id and
 adicional_produto_pedido.id_produto = produto.id and
 adicional_produto_pedido.id_pedido = pedido.id and
 adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
 adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem

 ");
            $consulta->execute();
            $list[0]['produto'][$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPromocaoAtiva',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from promocao_app where ativo = 'true' and id_empresa = 1

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/atualizarSistemaArquivos',
    function () use ($app, $db) {
        $diretorio = "../../beta/";
        $files = array_diff(scandir($diretorio), array('.', '..'));
        foreach ($files as $key) {
            unlink($diretorio . $key);
        }
        $filesApi = array_diff(scandir($diretorio . "api/"), array('.', '..'));
        echo json_encode($filesApi);
        foreach ($filesApi as $key) {
            unlink($diretorio . "api/" . $key);
        }
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://www.onesolucoes.com.br/gestaoapp/api/index.php/getListaArquivosSistema');
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        $result = json_decode($result);
        curl_close($ch);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://www.onesolucoes.com.br/gestaoapp/api/index.php/getListaArquivosSistemaApi');
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $result = curl_exec($ch);
        $result = json_decode($result);
        curl_close($ch);

        chdir("../../beta/");
        file_put_contents("beta.zip", file_get_contents("https://www.onesolucoes.com.br/gestaoapp/api/beta.zip"));
        mkdir("api");
        chdir("api/");
        file_put_contents("api.zip", file_get_contents("https://www.onesolucoes.com.br/gestaoapp/api/api.zip"));
        $file = 'api.zip';
        $path = pathinfo(realpath($file), PATHINFO_DIRNAME);
        $zip = new ZipArchive;
        $res = $zip->open($file);
        if ($res === true) {
            //     $zip->extractTo($path);
            $zip->close();
        }
        echo "foi";
    }
);

$app->get(
    '/getPromocaoDesativa',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from promocao_app where ativo = 'false' and id_empresa = 1

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getCupons/:id_cliente',
    function ($id_cliente) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT promocao_app.titulo, pedido.cupom, promocao_app.data_inicio, promocao_app.data_termino,
      promocao_app.data_sorteio, promocao_app.horario
      from pedido, promocao_app where pedido.id_promocao_app = promocao_app.id and
      promocao_app.ativo = 'true' and pedido.cancelado = 'false' and pedido.id_cliente = '$id_cliente' and promocao_app.id_empresa = 1

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getCuponsEmpresa/:id_cliente/:id_empresa',
    function ($id_cliente, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT promocao_app.titulo, pedido.cupom, promocao_app.data_inicio, promocao_app.data_termino,
      promocao_app.data_sorteio, promocao_app.horario
      from pedido, promocao_app where pedido.id_promocao_app = promocao_app.id and
      promocao_app.ativo = 'true' and pedido.cancelado = 'false' and pedido.id_cliente = '$id_cliente' and promocao_app.id_empresa = '$id_empresa'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getCuponsAntigo/:id_cliente',
    function ($id_cliente) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT promocao_app.titulo, pedido.cupom, promocao_app.data_inicio, promocao_app.data_termino,
      promocao_app.data_sorteio, promocao_app.data_sorteio
      from pedido, promocao_app where pedido.id_promocao_app = promocao_app.id and
      promocao_app.ativo = 'false' and pedido.cancelado = 'false' and pedido.id_cliente = '$id_cliente' and promocao_app.id_empresa = 1

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getCuponsAntigoEmpresa/:id_cliente/:id_empresa',
    function ($id_cliente, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT promocao_app.titulo, pedido.cupom, promocao_app.data_inicio, promocao_app.data_termino,
      promocao_app.data_sorteio, promocao_app.data_sorteio
      from pedido, promocao_app where pedido.id_promocao_app = promocao_app.id and
      promocao_app.ativo = 'false' and pedido.cancelado = 'false' and pedido.id_cliente = '$id_cliente' and promocao_app.id_empresa = '$id_empresa'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/atualizarPedidoAdmin',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $nome = (isset($data->cliente_nome)) ? $data->cliente_nome : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $delivery = (isset($data->delivery)) ? $data->delivery : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $data_finalizacao = date_create()->format('Y-m-d H:i:s');
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : 0;
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $consumacao = (isset($data->consumacao)) ? $data->consumacao : "";
        $fechamento_muitos = (isset($data->fechamento_muitos)) ? $data->fechamento_muitos : "false";
        $pedido_fechamento_muitos = (isset($data->pedido_fechamento_muitos)) ? $data->pedido_fechamento_muitos : "";
        $status = (isset($data->status)) ? $data->status : "Finalizado";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $taxa_entregador = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $vendedor = (isset($data->vendedor)) ? $data->vendedor : "";
        $cpf_vendedor = (isset($data->cpf_vendedor)) ? $data->cpf_vendedor : "";
        $porcentagem_vendedor = (isset($data->porcentagem_vendedor)) ? $data->porcentagem_vendedor : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo_desconto = (isset($data->tipo_desconto)) ? $data->tipo_desconto : "";
        $entrada_paga = (isset($data->entrada_paga)) ? $data->entrada_paga : "";
        $porcentagem_garcom_pago = (isset($data->porcentagem_garcom_pago)) ? $data->porcentagem_garcom_pago : "0";
        $produto = json_decode(json_encode($data->produtos), true);
        $embalar_viagem = (isset($data->embalar_viagem)) ? $data->embalar_viagem : false;
        $auto_atendimento = (isset($data->auto_atendimento)) ? $data->auto_atendimento : 'false';
        $sequencia = 0;
        if ($status == 'Orçamento') {
            $status = 'Finalizado';
        }
        if (isset($data->comanda_parcial)) {
            $comanda_parcial = json_decode(json_encode($data->parcial), true);

        } else {
            $comanda_parcial = [];
        }

        try {
            $db->con()->beginTransaction();

            $datetime = date_create()->format('Y-m-d H:i:s');
            if ($data_finalizacao != "" && $tipo != 'app') {
                $data_finalizacao = $datetime;
                $consulta = $db->con()->prepare("SELECT senha_atendimento from parametro where usar_senha_atendimento_pedido = 'true'");
                $consulta->execute();
                $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($resultado) > 0) {
                    $senha_atendimento = $resultado[0]['senha_atendimento'];
                    $consulta = $db->con()->prepare("UPDATE parametro set senha_atendimento = senha_atendimento + 1;

          ");
                    $consulta->execute();
                } else {
                    $senha_atendimento = 0;
                }
            } else {
                $senha_atendimento = 0;
            }

            $consulta = $db->con()->prepare("SELECT id from pedido where
            data_finalizacao is null or data_finalizacao = '0000-00-00 00:00:00'");
            $consulta->execute();
            $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($resultado) > 0) {
                $consulta = $db->con()->prepare("UPDATE pedido set data_finalizacao = '$data_finalizacao' where
            id = '$id' ");
                $consulta->execute();
            }

            if ($desconto > 0 && $tipo_desconto != 'por produto') {
                $desconto_total = floatval($desconto);
                $consulta = $db->con()->prepare("SELECT id, valor_total from pedido_produto where id_pedido = '$id'");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                foreach ($list as $item) {
                    $id_update = $item['id'];
                    $valor_produto = $item['valor_total'];
                    $desconto_produto = floatval($valor_produto) * floatval($desconto) / floatval($valor_total);
                    $desconto_total = floatval(number_format($desconto_total, 2)) - floatval(number_format($desconto_produto, 2));
                    $consulta = $db->con()->prepare("UPDATE pedido_produto set desconto = '$desconto_produto' where id = '$id_update'");
                    $consulta->execute();
                }

                $desconto_total = floatval(number_format($desconto_total, 2));
                $consulta = $db->con()->prepare("UPDATE pedido_produto set desconto = desconto + '$desconto_total' where id = '$id_update'");
                $consulta->execute();

            } else {
                $consulta = $db->con()->prepare("SELECT sum(desconto) as desconto from pedido_produto where id_pedido = '$id'");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $desconto = $list[0]['desconto'];
            }

            $consulta = $db->con()->prepare("UPDATE pedido set taxa_entrega = '$taxa_entrega', valor_total = '$valor_total',
       id_cliente = '$id_cliente', nome_mesa = '$nome_mesa', id_usuario = '$id_usuario', fechamento_muitos = '$fechamento_muitos',
       forma_pagamento = '$forma_pagamento', troco = '$troco', observacao = '$observacao', endereco = '$endereco',
       numero = '$numero', complemento = '$complemento', bairro = '$bairro',cidade = '$cidade', estado = '$estado',
       cep = '$cep', referencia = '$referencia', retira_local = '$retira_local', desconto = '$desconto', delivery = '$delivery',
       porcentagem_garcom = '$porcentagem_garcom', status = '$status', tipo_desconto = '$tipo_desconto',
       consumacao = '$consumacao', pedido_fechamento_muitos = '$pedido_fechamento_muitos',
       senha_atendimento = '$senha_atendimento', taxa_entregador = '$taxa_entregador',
       vendedor = '$vendedor', cpf_vendedor = '$cpf_vendedor', porcentagem_vendedor = '$porcentagem_vendedor',
       entrada_paga = '$entrada_paga', porcentagem_garcom_pago = '$porcentagem_garcom_pago',
       embalar_viagem = '$embalar_viagem', auto_atendimento = '$auto_atendimento'
       where id = '$id' ");
            $consulta->execute();

            $dadosHistorico = new stdClass();
            $dados->usuario = $usuario;
            $dados->id_pedido = $id;
            $dados->tipo = $tipo;
            $dados->evento = "Usuário " . $usuario . " alterou o status do pedido " . $id . " para " . $status;
            salvarHistoricoPedido($dados, $app, $db);

            $db->con()->commit();
            echo json_encode($id);
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo "Failed: " . json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/atualizarTaxaEntregador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $taxa_entregador = (isset($data->taxa_entregador)) ? $data->taxa_entregador : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";

        $consulta = $db->con()->prepare("UPDATE pedido set taxa_entregador = '$taxa_entregador'
         where id = '$id'  ");
        $consulta->execute();

        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set data_editar = '$datetime', usuario_editar = '$usuario' where id = '$id'  ");
        $consulta->execute();

        $dados = new stdClass();
        $dados->usuario = $usuario;
        $dados->id_pedido = $id;
        $dados->tipo = 'gerencial';
        $dados->evento = "Usuário " . $usuario . " alterou a taxa de entrega (entregador) do pedido " . $id . " para " . $taxa_entregador . ".";
        salvarHistoricoPedido($dados, $app, $db);

        echo json_encode("ok");

    }
);

$app->post(
    '/salvarItensNfceErro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        set_time_limit(0);

        foreach ($lista as $item) {
            $cfop = $item['cfop'];
            $codigo_ncm = $item['codigo_ncm'];
            $codigo_produto = $item['codigo_produto'];
            $descricao = $item['descricao'];
            $icms_origem = $item['icms_origem'];
            $icms_situacao_tributaria = $item['icms_situacao_tributaria'];
            $id_nfce = $item['id_nfce'];
            $numero_item = $item['numero_item'];
            $quantidade_comercial = $item['quantidade_comercial'];
            $quantidade_tributavel = $item['quantidade_tributavel'];
            $unidade_comercial = $item['unidade_comercial'];
            $unidade_tributavel = $item['unidade_tributavel'];
            $valor_bruto = $item['valor_bruto'];
            $valor_frete = $item['valor_frete'];
            $consulta = $db->con()->prepare("SELECT id from nfce_item where id_nfce = '$id_nfce' and numero_item = '$numero_item'");
            $consulta->execute();
            $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($resultado) == 0) {
                $consulta = $db->con()->prepare("INSERT INTO nfce_item (cfop, codigo_ncm, codigo_produto,descricao,icms_origem,
              icms_situacao_tributaria,id_nfce,numero_item,quantidade_comercial,quantidade_tributavel,unidade_comercial,
              unidade_tributavel,valor_bruto,valor_frete) VALUES
              ('$cfop', '$codigo_ncm', '$codigo_produto','$descricao','$icms_origem',
              '$icms_situacao_tributaria','$id_nfce','$numero_item','$quantidade_comercial','$quantidade_tributavel','$unidade_comercial',
              '$unidade_tributavel','$valor_bruto','$valor_frete')");
                $consulta->execute();
            }
        }

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarValorDescontoProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $desconto_pedido = (isset($data->desconto)) ? $data->desconto : "";
        foreach ($lista as $item) {
            $desconto = $item['desconto'];
            $id = $item['id'];
            $consulta = $db->con()->prepare("UPDATE pedido_produto set desconto = '$desconto'
            where id = '$id'");
            $consulta->execute();
        }
        $consulta = $db->con()->prepare("UPDATE pedido set tipo_desconto = 'por produto',
        desconto = '$desconto_pedido' where id = '$id_pedido'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarValorPago',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $produtos = json_decode(json_encode($data->produtos), true);
        foreach ($produtos as $item) {
            $valor_pago = $item['valor_a_pagar'];
            $id = $item['id_pedido_produto'];
            $consulta = $db->con()->prepare("UPDATE pedido_produto set valor_pago = valor_pago + '$valor_pago'
            where id = '$id'");
            $consulta->execute();
        }

        echo json_encode($produtos);

    }
);

$app->post(
    '/limparPagamentoPedidoProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE pedido_produto set valor_pago = 0
            where id = '$id'");
        $consulta->execute();

        echo json_encode($produtos);

    }
);

$app->post(
    '/salvarPedidoFechamentoMuitos',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $nome = (isset($data->cliente_nome)) ? $data->cliente_nome : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $delivery = (isset($data->delivery)) ? $data->delivery : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $data_finalizacao = date_create()->format('Y-m-d H:i:s');
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : 0;
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $consumacao = (isset($data->consumacao)) ? $data->consumacao : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $fechamento_muitos = (isset($data->fechamento_muitos)) ? $data->fechamento_muitos : "false";
        $pedido_fechamento_muitos = (isset($data->pedido_fechamento_muitos)) ? $data->pedido_fechamento_muitos : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $entrada = (isset($data->entrada)) ? $data->entrada : 0;
        $entrada_paga = (isset($data->entrada_paga)) ? $data->entrada_paga : 0;
        $produto = json_decode(json_encode($data->produtos), true);
        $parcial = json_decode(json_encode($data->parcial), true);
        $sequencia = 0;
        if (isset($data->comanda_parcial)) {
            $comanda_parcial = json_decode(json_encode($data->parcial), true);

        } else {
            $comanda_parcial = [];
        }

        try {
            $db->con()->beginTransaction();

            $datetime = date_create()->format('Y-m-d H:i:s');
            if ($data_finalizacao != "") {
                $data_finalizacao = $datetime;
            }
            $consulta = $db->con()->prepare("INSERT INTO pedido (taxa_entrega, valor_total,
        id_cliente, nome_mesa, id_usuario, fechamento_muitos, forma_pagamento, troco,
        observacao, endereco, numero, complemento , bairro,cidade, estado,
        cep, referencia, retira_local, desconto, delivery, porcentagem_garcom,
        status, data_finalizacao, consumacao, pedido_fechamento_muitos, id_empresa,
        data_pedido, tipo, entrada,entrada_paga)
       VALUES  ('$taxa_entrega', '$valor_total',
        '$id_cliente', '$nome_mesa', '$id_usuario', '$fechamento_muitos',
        '$forma_pagamento', '$troco', '$observacao', '$endereco', '$numero',
        '$complemento', '$bairro','$cidade', '$estado',
        '$cep', '$referencia', '$retira_local', '$desconto', '$delivery', '$porcentagem_garcom',
        'Finalizado', '$datetime', '$consumacao', '$pedido_fechamento_muitos', '$id_empresa', '$datetime', '$tipo', '$entrada', '$entrada_paga')");
            if ($consulta->execute()) {
                $id_pedido = $db->con()->lastInsertId();
                foreach ($parcial as $item) {
                    $valor_parcial = $item['valor'];
                    $forma_pagamento_parcial = $item['forma_pagamento'];

                    if (strpos(strtolower($forma_pagamento_parcial), 'din') !== false) {
                        $tipo_pagamento = "DINHEIRO";
                    } else if (strpos(strtolower($forma_pagamento_parcial), 'debi') !== false) {
                        $tipo_pagamento = "CARTÃO DE DÉBITO";
                    } else if (strpos(strtolower($forma_pagamento_parcial), 'débi') !== false) {
                        $tipo_pagamento = "CARTÃO DE DÉBITO";
                    } else if (strpos(strtolower($forma_pagamento_parcial), 'cred') !== false) {
                        $tipo_pagamento = "CARTÃO DE CRÉDITO";
                    } else if (strpos(strtolower($forma_pagamento_parcial), 'créd') !== false) {
                        $tipo_pagamento = "CARTÃO DE CRÉDITO";
                    } else if (strpos(strtolower($forma_pagamento_parcial), 'pix') !== false) {
                        $tipo_pagamento = "PIX";
                    } else {
                        $tipo_pagamento = $forma_pagamento_parcial;
                    }

                    $consulta = $db->con()->prepare("INSERT INTO parcial_pedido
                     (id_pedido, valor, forma_pagamento, tipo_pagamento) VALUES
            ('$id_pedido', '$valor_parcial', '$forma_pagamento_parcial', '$tipo_pagamento') ");
                    $consulta->execute();
                }
                $sequencia = 0;
                foreach ($produto as $item) {
                    $id_produto = $item['id'];
                    $valor_produto = $item['valor'];
                    $quantidade_produto = $item['quantidade'];
                    $valor_total_produto = $item['valor_total'];
                    $observacao_pedido = $item['observacao'];
                    $valor_produto = $item['valor'];
                    $consulta = $db->con()->prepare("INSERT INTO pedido_produto (id_produto, id_pedido, quantidade, valor_produto, valor_total, observacao, sequencia) VALUES
            ('$id_produto', '$id_pedido', '$quantidade_produto', '$valor_produto', '$valor_total_produto', '$observacao_pedido', '$sequencia') ");
                    $consulta->execute();
                    foreach ($item['listAdicional'] as $item2) {
                        $id_adicional = $item2['id'];
                        $valor_adicional = $item2['valor'];
                        $quantidade_adicional = $item2['quantidade'];
                        if (isset($item2['observacao'])) {
                            $obs_adicional = $item2['observacao'];
                        } else {
                            $obs_adicional = "";
                        }

                        $consulta = $db->con()->prepare("INSERT INTO adicional_produto_pedido (id_adicional, id_produto, id_pedido, valor_adicional, sequencia, texto_observacao, quantidade) VALUES
            ('$id_adicional', '$id_produto', '$id_pedido', '$valor_adicional', '$sequencia', '$obs_adicional', '$quantidade_adicional') ");
                        $consulta->execute();
                    }
                    $sequencia++;
                }

            }

            $db->con()->commit();
            echo json_encode($id_pedido);
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo "Failed: " . json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/salvarPedidoAdmin',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $email = (isset($data->email)) ? $data->email : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $nome = (isset($data->cliente_nome)) ? $data->cliente_nome : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "";
        $delivery = (isset($data->delivery)) ? $data->delivery : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
        $status = (isset($data->status)) ? $data->status : "";
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : "";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";
        $tag = (isset($data->tag)) ? $data->tag : "";
        $id_referencia_pedido_online = (isset($data->id_referencia_pedido_online)) ? $data->id_referencia_pedido_online : "0";
        $codigo_autoatendimento = (isset($data->codigo_autoatendimento)) ? $data->codigo_autoatendimento : "";
        $consumacao = (isset($data->consumacao)) ? $data->consumacao : "0";
        $consumacao_real = (isset($data->consumacao_real)) ? $data->consumacao_real : "0";
        $entrada = (isset($data->entrada)) ? $data->entrada : "0";
        $complemento_entrada = (isset($data->complemento_entrada)) ? $data->complemento_entrada : "0";
        $consumidor_final = (isset($data->consumidor_final)) ? $data->consumidor_final : "false";
        $auto_atendimento = (isset($data->auto_atendimento)) ? $data->auto_atendimento : "false";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $responsavel_pedido = (isset($data->responsavel_pedido)) ? $data->responsavel_pedido : 0;
        $sequencia = 0;
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("select pedido.id
       from pedido, empresa where
       pedido.id_empresa = empresa.id and pedido.id_empresa = '$id_empresa' and
       pedido.cancelado = 'false' and
       (pedido.status = 'Finalizado') and extract(DAY from data_pedido) = extract(DAY from '$datetime') and
       extract(MONTH from data_pedido) = extract(MONTH from '$datetime') and
       extract(YEAR from data_pedido) = extract(YEAR from '$datetime') order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("UPDATE empresa set sequencia_pedido = 0 where id = '$id_empresa' ");
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("INSERT INTO pedido (id_empresa,  id_cliente, taxa_entrega, valor_total, endereco, numero,
       complemento, bairro,id_referencia_mesa, cidade, estado, cep, data_pedido, numero_pedido, referencia, nome_mesa,nome_mesa2,
       retira_local, tipo, desconto, status, delivery, id_usuario, data_visualizacao,  id_caixa, porcentagem_garcom, tag, id_referencia_pedido_online,
       codigo_autoatendimento, consumacao, entrada,consumidor_final,
        complemento_entrada, consumacao_real, responsavel_pedido,auto_atendimento)
      VALUES ('$id_empresa', '$id_cliente', '$taxa_entrega', '$valor_total', '$endereco', '$numero', '$complemento',
       '$bairro','$id_referencia_mesa',
       '$cidade', '$estado', '$cep', '$datetime', (select sequencia_pedido + 1 from empresa where id = '$id_empresa'),
       '$referencia', '$nome_mesa', '$nome_mesa2', '$retira_local', 'gerencial',
       '$desconto', '$status', '$delivery', '$id_usuario', '$datetime',
       (SELECT id from caixa where id_empresa = '$id_empresa' and status = 'aberto'), '$porcentagem_garcom', '$tag', '$id_referencia_pedido_online',
       '$codigo_autoatendimento', '$consumacao','$entrada','$consumidor_final', '$complemento_entrada',
        '$consumacao_real', '$responsavel_pedido', '$auto_atendimento') ");
        if ($consulta->execute()) {
            $id_pedido = $db->con()->lastInsertId();

            $consulta = $db->con()->prepare("UPDATE empresa set sequencia_pedido = sequencia_pedido + 1
      where id = '$id_empresa'");
            $consulta->execute();
            $dadosHistorico = new stdClass();
            $dados->usuario = $usuario;
            $dados->id_pedido = $id_pedido;
            $dados->tipo = "gerencial";
            $dados->evento = "Usuário " . $usuario . " abriu o pedido " . $id_pedido;
            salvarHistoricoPedido($dados, $app, $db);

            echo json_encode($id_pedido);
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

function salvarHistoricoPedido($dados, $app, $db)
{
    $datetime = date_create()->format('Y-m-d H:i:s');
    $consulta = $db->con()->prepare("INSERT INTO historico_pedido (data_evento, evento, usuario, id_pedido, tipo) VALUES
  (:data_evento, :evento, :usuario, :id_pedido, :tipo) ");
    $consulta->bindParam(':data_evento', $datetime);
    $consulta->bindParam(':evento', $dados->evento);
    $consulta->bindParam(':usuario', $dados->usuario);
    $consulta->bindParam(':id_pedido', $dados->id_pedido);
    $consulta->bindParam(':tipo', $dados->tipo);
    $consulta->execute();
}

$produtos = json_decode(json_encode($dados->produtos), true);

$app->post(
    '/atualizarCodigoAutoAtendimento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $codigo_autoatendimento = (isset($data->codigo_autoatendimento)) ? $data->codigo_autoatendimento : "";
        $consulta = $db->con()->prepare("UPDATE pedido set codigo_autoatendimento = '$codigo_autoatendimento' where id = '$id'

        ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $forcar_observacao = (isset($data->forcar_observacao)) ? $data->forcar_observacao : "";
        $texto_observacao = (isset($data->texto_observacao)) ? $data->texto_observacao : "";
        $item_escolher = (isset($data->item_escolher)) ? $data->item_escolher : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $texto = (isset($data->texto)) ? $data->texto : "";
        $ordem_exibicao = (isset($data->ordem_exibicao)) ? $data->ordem_exibicao : "";
        $extra = (isset($data->extra)) ? $data->extra : "";
        $impressao_individual = (isset($data->impressao_individual)) ? $data->impressao_individual : "";

        $consulta = $db->con()->prepare("UPDATE adicional set
        valor = '$valor', descricao = '$descricao', texto_observacao = '$texto_observacao', ordem = '$ordem',
        forcar_observacao = '$forcar_observacao', item_escolher = '$item_escolher', texto = '$texto',
        ordem_exibicao = '$ordem_exibicao', extra = '$extra', impressao_individual = '$impressao_individual' where
        id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarProdutoComAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $mostrar_dia = (isset($data->mostrar_dia)) ? $data->mostrar_dia : 10;
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_grupo_impressao = (isset($data->id_grupo_impressao)) ? $data->id_grupo_impressao : "";
        $adicional = json_decode(json_encode($data->adicional), true);
        $id = (isset($data->id)) ? $data->id : "";
        $descricao = str_replace('"', " ", $descricao);
        $descricao = str_replace("'", " ", $descricao);
        $nome = str_replace('"', " ", $nome);
        $nome = str_replace("'", " ", $nome);
        $consulta = $db->con()->prepare("DELETE from adicional_produto where id_produto = '$id' ");
        $consulta->execute();

        foreach ($adicional as $item) {
            $consulta = $db->con()->prepare("INSERT INTO adicional_produto (id_adicional, id_produto)
         VALUES ('$item', '$id') ");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarProdutoSemAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $mostrar_dia = (isset($data->mostrar_dia)) ? $data->mostrar_dia : 10;
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_grupo_impressao = (isset($data->id_grupo_impressao)) ? $data->id_grupo_impressao : 0;
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";
        $produto_sugestao = (isset($data->produto_sugestao)) ? $data->produto_sugestao : "";
        $duracao_execucao = (isset($data->duracao_execucao)) ? $data->duracao_execucao : 0;
        $a_partir = (isset($data->a_partir)) ? $data->a_partir : "";
        $adicional = json_decode(json_encode($data->adicional), true);
        $hora_inicio = (isset($data->hora_inicio)) ? $data->hora_inicio : "";
        $hora_final = (isset($data->hora_final)) ? $data->hora_final : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $impressao_individual = (isset($data->impressao_individual)) ? $data->impressao_individual : "false";
        $descricao = str_replace('"', " ", $descricao);
        $descricao = str_replace("'", " ", $descricao);
        $nome = str_replace('"', " ", $nome);
        $nome = str_replace("'", " ", $nome);
        $imagem = (isset($data->imagem)) ? $data->imagem : "";
        $placeholder_observacao = (isset($data->placeholder_observacao)) ? $data->placeholder_observacao : "";

        $consulta = $db->con()->prepare("INSERT INTO produto
        (valor, descricao, nome, id_categoria, id_empresa, tipo, mostrar_dia, ordem, id_grupo_impressao,
         tipo_produto, produto_sugestao, duracao_execucao,a_partir,hora_inicio,hora_final,
         observacao,imagem, impressao_individual, placeholder_observacao)
      VALUES ('$valor','$descricao','$nome', '$id_categoria', '$id_empresa', '$tipo',
        '$mostrar_dia', '$ordem', '$id_grupo_impressao', '$tipo_produto',
        '$produto_sugestao', '$duracao_execucao','$a_partir','$hora_inicio',
         '$hora_final', '$observacao','$imagem', '$impressao_individual', '$placeholder_observacao')");
        if ($consulta->execute()) {
            $id_produto = $db->con()->lastInsertId();
            echo json_encode($id_produto);
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarProdutoGrupoImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_grupo_impressao = (isset($data->id_grupo_impressao)) ? $data->id_grupo_impressao : "";
        $selecao = (isset($data->selecao)) ? $data->selecao : "";
        $produtos = json_decode(json_encode($data->produtos), true);

        foreach ($produtos as $item) {
            $id = $item['id'];
            if ($selecao == 'grupo1') {
                $consulta = $db->con()->prepare("UPDATE produto set id_grupo_impressao = '$id_grupo_impressao' where id = '$id' ");
            } else {
                $consulta = $db->con()->prepare("UPDATE produto set id_grupo_impressao2 = '$id_grupo_impressao' where id = '$id' ");
            }

            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/finalizarPedidoAReceber',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $listaPedidos = json_decode(json_encode($data->listaPedidos), true);
        $datetime = date_create()->format('Y-m-d H:i:s');
        foreach ($listaPedidos as $item) {
            $id = $item['id'];
            $valor = $item['valor_liquido'];
            $consulta = $db->con()->prepare("UPDATE pedido set
                 data_finalizacao = '$datetime', forma_pagamento = '$forma_pagamento' where  id = '$id' ");
            $consulta->execute();
            $consulta = $db->con()->prepare("DELETE FROM parcial_pedido where  id_pedido = '$id' ");
            $consulta->execute();

            if (strpos(strtolower($forma_pagamento), 'din') !== false) {
                $tipo_pagamento = "DINHEIRO";
            } else if (strpos(strtolower($forma_pagamento), 'debi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'débi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'cred') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'créd') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'pix') !== false) {
                $tipo_pagamento = "PIX";
            } else {
                $tipo_pagamento = $forma_pagamento;
            }

            $consulta = $db->con()->prepare("INSERT INTO parcial_pedido (id_pedido,forma_pagamento,valor, tipo_pagamento)
                VALUES ('$id','$forma_pagamento','$valor', '$tipo_pagamento') ");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/finalizarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE pedido set
               data_finalizacao = '$datetime', status = 'Finalizado' where  id = '$id' ");
        $consulta->execute();

        echo json_encode("ok");

    }
);

$app->post(
    '/backupBancoDados',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT id from empresa where
       DATEDIFF('$datetime', empresa.ultimo_backup) > 1 and id = '$id'

       ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/atualizarDataUltimoBackup',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE empresa set
        ultimo_backup = '$datetime' where id = '$id'

        ");

        $consulta->execute();
        echo json_encode("ok");
    }
);

$app->post(
    '/salvarProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $mostrar_dia = (isset($data->mostrar_dia)) ? $data->mostrar_dia : 10;
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_grupo_impressao = (isset($data->id_grupo_impressao)) ? $data->id_grupo_impressao : "";
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";

        $consulta = $db->con()->prepare("INSERT INTO produto
        (valor, descricao, nome, id_categoria, id_empresa, tipo, mostrar_dia, ordem, id_grupo_impressao, tipo_produto)
        VALUES ('$valor','$descricao','$nome', '$id_categoria', '$id_empresa', '$tipo', '$mostrar_dia',
          '$ordem', '$id_grupo_impressao', '$tipo_produto')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/enviarSugestaoFidelidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $email_empresa = (isset($data->email_empresa)) ? $data->email_empresa : "";
        $email_cliente = (isset($data->email_cliente)) ? $data->email_cliente : "";

        enviarEmailContato($email_empresa, "$email_cliente está sugerindo que você utilize cartão fidelidade no aplicativo!");
    }
);

$app->post(
    '/enviarSugestaoDeBairro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $email_empresa = (isset($data->email_empresa)) ? $data->email_empresa : "";
        $email_cliente = (isset($data->email_cliente)) ? $data->email_cliente : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";

        enviarEmailContato($email_empresa, "$email_cliente está sugerindo que você atenda o bairro '$bairro'!");
    }
);

$app->post(
    '/validarCupom',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cupom = (isset($data->cupom)) ? $data->cupom : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("SELECT * from cupom_fidelidade where cupom = '$cupom' and id_empresa = '$id_empresa' and id_cliente = '$id_cliente' and ativo = 'true' ");
        if ($consulta->execute()) {
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            echo json_encode(array("list" => $list));
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarCupomFidelidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $cupom = (isset($data->cupom)) ? $data->cupom : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO cupom_fidelidade
        (id_cliente, id_empresa, cupom, data, ativo, valor, data_termino) VALUES ('$id_cliente','$id_empresa',
          '$cupom', '$datetime', 'true', '$valor', '2030-12-31')");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("UPDATE empresa set sequencia_fidelidade = sequencia_fidelidade + 1 where id = '$id_empresa'  ");
            $consulta->execute();
            $consulta = $db->con()->prepare("UPDATE pedido set fidelidade = 'false', cupom_fidelidade = '$cupom' where id_cliente = '$id_cliente' and id_empresa = '$id_empresa' and fidelidade = 'true'
          LIMIT  $quantidade ");
            $consulta->execute();
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/apagarPromocoesAntigas',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d');

        $consulta = $db->con()->prepare("DELETE from promocao where id_empresa = '$id' and data_promocao < '$datetime' and data_promocao is not null
        ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarBairroEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $valor = (isset($data->valor)) ? $data->valor : "";
        $id = (isset($data->id)) ? $data->id : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO bairro_empresa (valor, id_bairro, id_empresa)
        VALUES('$valor', '$id', '$id_empresa')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarBairro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";

        $consulta = $db->con()->prepare("INSERT INTO bairro
        (nome, cidade) VALUES ('$nome','$cidade')");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarBairroCidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($id == '-1') {
            $consulta = $db->con()->prepare("SELECT id from bairro where nome = '$nome'
        and cidade = '$cidade' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) > 0) {
                echo json_encode("existe");
            } else {
                $consulta = $db->con()->prepare("INSERT INTO bairro
        (nome, cidade) VALUES ('$nome','$cidade')");
                if ($consulta->execute()) {
                    echo json_encode("ok");
                } else {
                    echo json_encode(array("erro" => true));
                }
            }
        } else {
            $consulta = $db->con()->prepare("UPDATE bairro set nome = '$nome' where id = '$id' ");
            $consulta->execute();
            echo json_encode("ok");
        }
    }
);

$app->post(
    '/salvarBairroCidadeNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome = (isset($data->nome)) ? $data->nome : "";
        $id_cidade = (isset($data->id_cidade)) ? $data->id_cidade : "";
        $id = (isset($data->id)) ? $data->id : "";
        $nome = trim($nome);
        if ($id == '-1') {
            $consulta = $db->con()->prepare("SELECT id from bairro where nome = '$nome'
        and id_cidade = '$id_cidade' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) > 0) {
                echo json_encode("existe");
            } else {
                $consulta = $db->con()->prepare("INSERT INTO bairro
        (nome, id_cidade) VALUES ('$nome','$id_cidade')");
                if ($consulta->execute()) {
                    echo json_encode("ok");
                } else {
                    echo json_encode(array("erro" => true));
                }
            }
        } else {
            $consulta = $db->con()->prepare("UPDATE bairro set nome = '$nome' where id = '$id' ");
            $consulta->execute();
            echo json_encode("ok");
        }
    }
);

$app->post(
    '/salvarFormaPagamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $formas = json_decode(json_encode($data->formas), true);
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("DELETE from forma_pagamento where id_empresa = '$id_empresa'");
        $consulta->execute();
        foreach ($formas as $item) {
            $descricao = $item;
            $consulta = $db->con()->prepare("INSERT INTO forma_pagamento
         (descricao, id_empresa) VALUES ('$descricao','$id_empresa')");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarBandeiraCartao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $bandeiras = json_decode(json_encode($data->bandeiras), true);
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("DELETE from bandeira_empresa where id_empresa = '$id_empresa'");
        $consulta->execute();
        foreach ($bandeiras as $item) {
            $id = $item;
            $consulta = $db->con()->prepare("INSERT INTO bandeira_empresa
         (id_bandeira_cartao, id_empresa) VALUES ('$id','$id_empresa')");
            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->post(
    '/salvarHorario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $hora_inicio = (isset($data->hora_inicio)) ? $data->hora_inicio : "";
        $hora_fechar = (isset($data->hora_fechar)) ? $data->hora_fechar : "";
        $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO horario_funcionamento
       (hora_inicio, hora_fechar, dia_semana, id_empresa)
       VALUES ('$hora_inicio','$hora_fechar', '$dia_semana', '$id_empresa')");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/salvarTaxaEntrega',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $km = (isset($data->km)) ? $data->km : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("INSERT INTO taxa_entrega
       (km, valor, id_empresa) VALUES ('$km','$valor', '$id_empresa')");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/salvarNovoEndereco',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $rua = (isset($data->rua)) ? $data->rua : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->nome_cidade)) ? $data->nome_cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $lat = (isset($data->lat)) ? $data->lat : "";
        $lng = (isset($data->lng)) ? $data->lng : "";
        $id = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";

        $consulta = $db->con()->prepare("update cliente set endereco = '$rua', numero = '$numero', complemento = '$complemento', referencia = '$referencia',
       bairro = '$bairro', cidade = '$cidade', estado = '$estado', cep = '$cep', lat = '$lat', lng = '$lng' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/atualizarEnderecoCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->nome_cidade)) ? $data->nome_cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $lat = (isset($data->lat)) ? $data->lat : "";
        $lng = (isset($data->lng)) ? $data->lng : "";
        $id = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";

        $consulta = $db->con()->prepare("update cliente set endereco = '$endereco', numero = '$numero', complemento = '$complemento', referencia = '$referencia',
       bairro = '$bairro', cidade = '$cidade', estado = '$estado', cep = '$cep' where id = '$id' ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }

    }
);

$app->post(
    '/salvarClienteAdminApp',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_cliente = (isset($data->id)) ? $data->id : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $endereco = str_replace("'", "", $endereco);
        $endereco = str_replace('"', "", $endereco);
        $numero = (isset($data->numero)) ? $data->numero : "";
        $numero = str_replace("'", "", $numero);
        $numero = str_replace('"', "", $numero);
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $complemento = str_replace("'", "", $complemento);
        $complemento = str_replace('"', "", $complemento);
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $bairro = str_replace("'", "", $bairro);
        $bairro = str_replace('"', "", $bairro);
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $referencia = str_replace("'", "", $referencia);
        $referencia = str_replace('"', "", $referencia);
        $cep = (isset($data->cep)) ? $data->cep : "";
        $cep = str_replace("'", "", $cep);
        $cep = str_replace('"', "", $cep);
        $nome = (isset($data->nome)) ? $data->nome : "";
        $nome = str_replace("'", "", $nome);
        $nome = str_replace('"', "", $nome);
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $email = (isset($data->email)) ? $data->email : "";
        $email = str_replace("'", "", $email);
        $email = str_replace('"', "", $email);
        $cpf = (isset($data->cpf)) ? $data->cpf : "";
        $cpf = str_replace("'", "", $cpf);
        $cpf = str_replace('"', "", $cpf);
        $id_referencia = (isset($data->id_referencia)) ? $data->id_referencia : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $data_nascimento = (isset($data->data_nascimento)) ? $data->data_nascimento : "";
        $observacao = str_replace("'", "", $observacao);
        $observacao = str_replace('"', "", $observacao);
        $datetime = date_create()->format('Y-m-d H:i:s');
        if ($id_referencia == '') {
            $id_referencia = 0;
        }

        if ($id_cliente == -1) {
            $consulta = $db->con()->prepare("SELECT id from cliente where (telefone = '$telefone') and telefone <> '' and telefone is not null and id_empresa = '$id_empresa' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) == 0) {
                $consulta = $db->con()->prepare("INSERT INTO cliente (nome, endereco, numero, complemento, bairro,
         cidade, estado, referencia, id_empresa, cep, telefone, email, id_referencia, cpf,
         data_nascimento, data_cadastro, observacao) VALUES
        ('$nome', '$endereco', '$numero', '$complemento', '$bairro', '$cidade', '$estado', '$referencia',
          '$id_empresa', '$cep', '$telefone', '$email', '$id_referencia', '$cpf',
          '$data_nascimento', '$datetime', '$observacao') ");
                $consulta->execute();
                $id_cliente = $db->con()->lastInsertId();
                echo json_encode($db->con()->lastInsertId());
            } else {
                echo json_encode('existe');
            }

        } else {
            $consulta = $db->con()->prepare("SELECT id from cliente where (telefone = '$telefone') and telefone <> '' and telefone is not null and id_empresa = '$id_empresa' and id <> '$id_cliente' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($list) == 0) {
                $consulta = $db->con()->prepare("UPDATE cliente set endereco = '$endereco', numero = '$numero', nome = '$nome', complemento = '$complemento', bairro = '$bairro',
        cidade = '$cidade', estado = '$estado', referencia = '$referencia',
        data_nascimento = '$data_nascimento', cpf = '$cpf', cep = '$cep', telefone = '$telefone', observacao = '$observacao' where id = '$id_cliente' ");
                $consulta->execute();
                echo json_encode($id_cliente);
            } else {
                echo json_encode("existe");
            }
        }

    }
);

$app->post(
    '/getRelatorioAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $agrupar = (isset($data->agrupar)) ? $data->agrupar : "";

        if ($agrupar = 'sim') {
            $sql = "SELECT adicional.descricao, adicional.id, sum(adicional_produto_pedido.quantidade * pedido_produto.quantidade) as quantidade,
            pedido.data_pedido, produto.nome as produto,
                   sum(adicional_produto_pedido.valor_adicional * (adicional_produto_pedido.quantidade * pedido_produto.quantidade)) as valor from
                   adicional_produto_pedido inner join adicional on adicional_produto_pedido.id_adicional = adicional.id
                   inner join pedido on adicional_produto_pedido.id_pedido = pedido.id
                   inner join produto on adicional_produto_pedido.id_produto = produto.id
                   inner join pedido_produto on pedido_produto.sequencia = adicional_produto_pedido.sequencia
                    and pedido_produto.id_produto = adicional_produto_pedido.id_produto
                    and pedido_produto.id_pedido = adicional_produto_pedido.id_pedido
         where pedido.id_empresa = '$id' and pedido.tipo <> 'app' and
        pedido.cancelado = 'false' and pedido.status = 'Finalizado' and
        pedido.fechamento_muitos = 'false' and pedido.data_finalizacao between '$inicio' and '$termino'
        group by adicional_produto_pedido.id_adicional, adicional_produto_pedido.id_produto
        order by adicional.descricao    ";
        } else {
            $sql = "SELECT adicional.descricao, adicional.id, (adicional_produto_pedido.quantidade * pedido_produto.quantidade) as quantidade,
         pedido.data_pedido, produto.nome as produto,
        (adicional_produto_pedido.valor_adicional * (adicional_produto_pedido.quantidade * pedido_produto.quantidade)) as valor from
        adicional_produto_pedido inner join adicional on adicional_produto_pedido.id_adicional = adicional.id
        inner join pedido on adicional_produto_pedido.id_pedido = pedido.id
        inner join produto on adicional_produto_pedido.id_produto = produto.id
        inner join pedido_produto on pedido_produto.sequencia = adicional_produto_pedido.sequencia
         and pedido_produto.id_produto = adicional_produto_pedido.id_produto
         and pedido_produto.id_pedido = adicional_produto_pedido.id_pedido
         where pedido.id_empresa = '$id' and pedido.tipo <> 'app' and
        pedido.cancelado = 'false' and pedido.status = 'Finalizado' and
        pedido.fechamento_muitos = 'false' and pedido.data_finalizacao between '$inicio' and '$termino'
        order by adicional.descricao    ";
        }

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getRelatorioProdutoItemAdicional',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $dataInicial = (isset($data->dataInicial)) ? $data->dataInicial : "";
        $dataFinal = (isset($data->dataFinal)) ? $data->dataFinal : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";

        $sql = "SELECT produto.nome, pedido_produto.valor_total, pedido_produto.id_pedido as id_pedido,
          pedido_produto.id_produto as id_produto, pedido_produto.sequencia,
           pedido_produto.quantidade FROM
          pedido_produto inner join produto
          on pedido_produto.id_produto = produto.id
          inner join pedido
          on pedido_produto.id_pedido = pedido.id
          where pedido.cancelado = 'false'  and pedido.status = 'Finalizado'
          and data_pedido BETWEEN '$dataInicial' and '$dataFinal'" . $tipo;

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_pedido = $item['id_pedido'];
            $id_produto = $item['id_produto'];
            $sequencia = $item['sequencia'];
            $sql = "SELECT adicional_produto_pedido.quantidade, adicional_produto_pedido.valor_adicional,
        adicional.descricao FROM
        adicional_produto_pedido inner join adicional
        on adicional_produto_pedido.id_adicional = adicional.id
        where adicional_produto_pedido.id_pedido = '$id_pedido' AND
        adicional_produto_pedido.id_produto = '$id_produto' and
        adicional_produto_pedido.sequencia = '$sequencia' ";
            $consulta = $db->con()->prepare($sql);
            $consulta->execute();
            $list[$i]['listaAdicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;
        }
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getRelatorioProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $agrupar = (isset($data->agrupar)) ? $data->agrupar : "";

        $sql = "SELECT produto.id, produto.nome, pedido_produto.quantidade, pedido_produto.data_cadastro,
            pedido_produto.valor_total as valor,
            CASE WHEN pedido.ifood = 'true' THEN 'ifood'
            WHEN pedido.origem_pedido = 'app' and ifood = 'false' THEN 'aplicativo'
            ELSE 'local' END as origem_pedido,
            cliente.nome as cliente, pedido_produto.nome_usuario, pedido_produto.plataforma,
            (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
    where parcial_pedido.id_pedido = pedido_produto.id_pedido) as forma_pagamento,
              pedido_produto.id_pedido, categoria_produto.descricao as categoria,
              produto_estoque.classificacao,
              pedido_produto.valor_total * pedido.porcentagem_garcom / 100 as porcentagem_garcom,
              pedido.porcentagem_garcom_pago
            from
            pedido_produto inner join produto on pedido_produto.id_produto = produto.id
            inner join pedido on pedido_produto.id_pedido = pedido.id
            inner join categoria_produto on produto.id_categoria = categoria_produto.id
            left join cliente on pedido.id_cliente = cliente.id
            left join produto_estoque on produto_estoque.id_produto = produto.id
          where pedido.id_empresa = '$id' and pedido.fechamento_muitos = 'false' and
          pedido.cancelado = 'false' and pedido.status = 'Finalizado' and pedido.data_finalizacao between '$inicio' and '$termino'
          and pedido.tipo = 'gerencial'
          order by pedido.data_finalizacao";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getRelatorioClienteDataCadastro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $data_inicio = $data_inicio . " 00:00:01";
        $data_final = $data_final . " 23:59:59";

        $sql = "SELECT * from cliente where data_cadastro BETWEEN '$data_inicio' and '$data_final' ";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getRelatorioPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $data_referencia = (isset($data->data_referencia)) ? $data->data_referencia : "";

        if ($tipo == "Finalizados") {
            $sql = "SELECT pedido.bairro, pedido.data_pedido, pedido.id, pedido.shortReference, usuario.usuario, pedido.taxa_entrega, pedido.valor_total, pedido.motivo_cancelamento,
      pedido.retira_local, pedido.desconto, pedido.nome_mesa,  CASE WHEN pedido.ifood = 'true' THEN 'ifood'
        WHEN pedido.origem_pedido = 'app' and ifood = 'false' THEN 'aplicativo'
        ELSE 'local' END as origem_pedido,
        (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
where parcial_pedido.id_pedido = pedido.id) as forma_pagamento,
porcentagem_garcom_pago as porcentagem_garcom, cliente.nome,
      pedido.observacao, pedido.data_transporte, pedido.data_finalizacao, cupom_fidelidade, id_usuario,
      fidelidade,  plataforma, data_impressao, consumacao, entrada, data_agendamento,
      versao_app, complemento_entrada, vendedor, porcentagem_vendedor,CASE WHEN pedido.retira_local = 'true' THEN 'sim'
        WHEN pedido.retira_local = true THEN 'sim'
        ELSE 'não' END as retira_local,CASE WHEN pedido.delivery = 'true' THEN 'sim'
        WHEN pedido.delivery = true THEN 'sim'
        ELSE 'não' END as delivery,
        pedido.custo_adicional, cliente.cpf, cliente.telefone
      from
      pedido left join cliente on pedido.id_cliente = cliente.id
      left join usuario on pedido.id_entregador = usuario.id
      where pedido.id_empresa = '$id' and pedido.fechamento_muitos = 'false' and
      pedido.cancelado = 'false' and pedido.status = 'Finalizado' and " .
                $data_referencia . " between '$inicio' and '$termino'
      and tipo = 'gerencial'
      order by pedido.data_finalizacao    ";
        } else if ($tipo == "Cancelados") {
            $sql = "SELECT pedido.bairro, pedido.data_pedido, pedido.id, usuario.usuario, pedido.shortReference, pedido.taxa_entrega, pedido.valor_total, pedido.motivo_cancelamento,
      pedido.retira_local, pedido.desconto, pedido.nome_mesa,  CASE WHEN pedido.ifood = 'true' THEN 'ifood'
        WHEN pedido.origem_pedido = 'app' and ifood = 'false' THEN 'aplicativo'
        ELSE 'local' END as origem_pedido,
        (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
where parcial_pedido.id_pedido = pedido.id) as forma_pagamento,
porcentagem_garcom_pago as porcentagem_garcom, cliente.nome,
      pedido.observacao, pedido.data_transporte, pedido.data_finalizacao, cupom_fidelidade, id_usuario,
      fidelidade, plataforma, data_impressao, consumacao, entrada, data_agendamento,
      versao_app, complemento_entrada, vendedor, porcentagem_vendedor,CASE WHEN pedido.retira_local = 'true' THEN 'sim'
        WHEN pedido.retira_local = true THEN 'sim'
        ELSE 'não' END as retira_local,CASE WHEN pedido.delivery = 'true' THEN 'sim'
        WHEN pedido.delivery = true THEN 'sim'
        ELSE 'não' END as delivery,
        pedido.custo_adicional, cliente.telefone, cliente.cpf
      from
      pedido left join cliente on pedido.id_cliente = cliente.id
      left join usuario on pedido.id_entregador = usuario.id
      where pedido.id_empresa = '$id' and pedido.fechamento_muitos = 'false' and
      pedido.cancelado = 'true' and " .
                $data_referencia . " between '$inicio' and '$termino'
      and tipo = 'gerencial'
      order by pedido.data_finalizacao    ";
        }

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getRelatorioPedidoEntregadorV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $data_referencia = (isset($data->data_referencia)) ? $data->data_referencia : "";

        $sql = "SELECT pedido.bairro, pedido.data_pedido, pedido.id, usuario.usuario, pedido.taxa_entrega, pedido.cancelado,
           pedido.valor_total, pedido.motivo_cancelamento, pedido.retira_local, data_editar, usuario_editar,taxa_entregador,
      CASE WHEN pedido.ifood = 'true' THEN 'ifood'
      WHEN pedido.origem_pedido = 'app' and ifood = 'false' THEN 'aplicativo'
      ELSE 'local' END as origem_pedido,
      (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
where parcial_pedido.id_pedido = pedido.id) as forma_pagamento,
    cliente.nome, pedido.observacao, pedido.data_finalizacao, id_usuario,
      CASE WHEN pedido.retira_local = 'true' THEN 'sim'
      WHEN pedido.retira_local = true THEN 'sim'
      ELSE 'não' END as retira_local,
      CASE WHEN pedido.delivery = 'true' THEN 'sim'
      WHEN pedido.delivery = true THEN 'sim'
      ELSE 'não' END as delivery
    from
    pedido left join cliente on pedido.id_cliente = cliente.id
    inner join usuario on pedido.id_entregador = usuario.id
    where pedido.fechamento_muitos = 'false' and
    pedido.status = 'Finalizado' and " . $data_referencia . " between '$inicio' and '$termino'
    and tipo = 'gerencial'
    order by pedido.data_finalizacao";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getPagamentosPorMes',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $data_referencia = (isset($data->data_referencia)) ? $data->data_referencia : "";
        $lista = json_decode(json_encode($data->lista), true);

        $sql = "SELECT sum(parcial_pedido.valor) as valor, parcial_pedido.tipo_pagamento, EXTRACT(MONTH from "
            . $data_referencia . ") as mes, EXTRACT(YEAR from " . $data_referencia . ") as ano,
        CONCAT(EXTRACT(MONTH from "
            . $data_referencia . "), EXTRACT(YEAR from " . $data_referencia . ")) as mesAno from parcial_pedido
    inner join pedido on parcial_pedido.id_pedido = pedido.id
    where pedido.fechamento_muitos = 'false' and pedido.cancelado = 'false' and
    pedido.status = 'Finalizado' and (";
        $i = 0;
        foreach ($lista as $item) {
            $mes = $item['mes'];
            $ano = $item['ano'];
            $sql = $sql . "EXTRACT(MONTH from " . $data_referencia . ") = '$mes' and EXTRACT(YEAR from " . $data_referencia . ") = '$ano'";
            $i++;
            if ($i != count($lista)) {
                $sql = $sql . " or ";
            }
        }
        $sql = $sql . ") and tipo = 'gerencial' GROUP BY mesAno, tipo_pagamento";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getDadosPedidoDemonstrativo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $data_referencia = (isset($data->data_referencia)) ? $data->data_referencia : "";

        $sql = "SELECT sum(COALESCE(porcentagem_garcom_pago, 0)) as porcentagem_garcom,
      sum(COALESCE(taxa_entregador, taxa_entrega)) as taxa_entrega,
      CONCAT(EXTRACT(MONTH from "
            . $data_referencia . "), '/', EXTRACT(YEAR from " . $data_referencia . ")) as mesAno from pedido
  where pedido.fechamento_muitos = 'false' and pedido.cancelado = 'false' and
  pedido.status = 'Finalizado' and (";

        $i = 0;
        foreach ($lista as $item) {
            $mes = $item['mes'];
            $ano = $item['ano'];
            $sql = $sql . "EXTRACT(MONTH from " . $data_referencia . ") = '$mes' and EXTRACT(YEAR from " . $data_referencia . ") = '$ano'";
            $i++;
            if ($i != count($lista)) {
                $sql = $sql . " or ";
            }
        }
        $sql = $sql . ") and tipo = 'gerencial' group by mesAno";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getRelatorioGarcom',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $data_referencia = (isset($data->data_referencia)) ? $data->data_referencia : "";

        $sql = "SELECT pedido_produto.quantidade, pedido_produto.valor_total, pedido_produto.desconto,
        pedido.porcentagem_garcom_pago, pedido_produto.id_pedido, pedido.porcentagem_garcom,
         pedido_produto.nome_usuario
        from pedido_produto inner join pedido on pedido_produto.id_pedido = pedido.id
    where pedido.fechamento_muitos = 'false' and
    pedido.status = 'Finalizado' and " . $data_referencia . " between '$inicio' and '$termino'
    and tipo = 'gerencial' and pedido_produto.nome_usuario is not null and
    pedido_produto.nome_usuario <> ''";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getRelatorioPedidoentrada',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";

        $sql = "SELECT pedido.data_pedido, pedido.id, pedido.valor_total, data_editar,
        (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
where parcial_pedido.id_pedido = pedido.id) as forma_pagamento, entrada_paga,
    cliente.nome,  pedido.data_finalizacao, entrada, desconto, valor_total - desconto as valor_liquido
    from
    pedido left join cliente on pedido.id_cliente = cliente.id
    where status = 'Finalizado' and cancelado = 'false' and fechamento_muitos = 'false'
and data_finalizacao BETWEEN '$inicio' and '$termino'
    order by pedido.data_finalizacao";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getRelatorioPedidoEntregador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_caixa = (isset($data->id_caixa)) ? $data->id_caixa : "";

        $sql = "SELECT pedido.bairro,pedido.id as id_pedido, pedido.id as id, pedido.tipo,  pedido.data_pedido, pedido.numero_pedido,
      pedido.taxa_entrega, pedido.valor_total, usuario.usuario, pedido.id_entregador, pedido.origem_pedido, pedido.baixa_entregador,
      pedido.retira_local, pedido.desconto, pedido.nome_mesa, (pedido.valor_total * pedido.porcentagem_garcom / 100) as porcentagem_garcom, cliente.nome, pedido.forma_pagamento
      from
      pedido left join cliente on pedido.id_cliente = cliente.id
      left join usuario on pedido.id_entregador = usuario.id
      where pedido.id_empresa = '$id' and (pedido.delivery = 'true' or pedido.delivery = true or pedido.tipo = 'app') and pedido.retira_local <> true and pedido.retira_local <> 'true' and
      pedido.cancelado = 'false' and pedido.id_caixa = '$id_caixa' and pedido.status <> 'Orçamento'
      order by pedido.data_pedido    ";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/salvarEnderecoCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $endereco = str_replace("'", "", $endereco);
        $endereco = str_replace('"', "", $endereco);
        $numero = (isset($data->numero)) ? $data->numero : "";
        $numero = str_replace("'", "", $numero);
        $numero = str_replace('"', "", $numero);
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $complemento = str_replace("'", "", $complemento);
        $complemento = str_replace('"', "", $complemento);
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $bairro = str_replace("'", "", $bairro);
        $bairro = str_replace('"', "", $bairro);
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $referencia = str_replace("'", "", $referencia);
        $referencia = str_replace('"', "", $referencia);
        $cep = (isset($data->cep)) ? $data->cep : "";
        $cep = str_replace("'", "", $cep);
        $cep = str_replace('"', "", $cep);
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $descricao = str_replace("'", "", $descricao);
        $descricao = str_replace('"', "", $descricao);

        if ($id == "-1") {
            $consulta = $db->con()->prepare("INSERT INTO endereco (descricao, endereco, numero, complemento, bairro, cidade, estado, referencia, id_cliente, cep) VALUES
         ('$descricao', '$endereco', '$numero', '$complemento', '$bairro', '$cidade', '$estado', '$referencia', '$id_cliente', '$cep') ");
            $consulta->execute();
            $id_cliente = $db->con()->lastInsertId();
            echo json_encode($db->con()->lastInsertId());

        } else {
            $consulta = $db->con()->prepare("UPDATE endereco set endereco = '$endereco', numero = '$numero', descricao = '$descricao', complemento = '$complemento', bairro = '$bairro',
          cidade = '$cidade', estado = '$estado', referencia = '$referencia', cep = '$cep' where id = '$id' ");
            $consulta->execute();
            echo json_encode("ok");
        }

    }
);

$app->post(
    '/salvarClienteAdmin',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_cliente = (isset($data->id)) ? $data->id : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $email = (isset($data->email)) ? $data->email : "";

        if ($id_cliente == -1) {
            $consulta = $db->con()->prepare("INSERT INTO cliente (nome, endereco, numero, complemento, bairro, cidade, estado, referencia, id_empresa, cep, telefone, email) VALUES
         ('$nome', '$endereco', '$numero', '$complemento', '$bairro', '$cidade', '$estado', '$referencia', '$id_empresa', '$cep', '$telefone', '$email') ");
            $consulta->execute();
            $id_cliente = $db->con()->lastInsertId();
        } else {
            $consulta = $db->con()->prepare("UPDATE cliente set endereco = '$endereco', numero = '$numero', complemento = '$complemento', bairro = '$bairro',
        cidade = '$cidade', estado = '$estado', referencia = '$referencia', cep = '$cep', telefone = '$telefone' where id = '$id_cliente' ");
            $consulta->execute();
        }
        echo 'ok';
    }
);

$app->post(
    '/salvarClienteWeb',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $rua = (isset($data->rua)) ? $data->rua : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->nome_cidade)) ? $data->nome_cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $cep = (isset($data->cep)) ? $data->cep : "";
        $lat = (isset($data->lat)) ? $data->lat : "";
        $lng = (isset($data->lng)) ? $data->lng : "";
        $email = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $telefone = (isset($data->telefone)) ? $data->telefone : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";

        $consulta = $db->con()->prepare("select id from cliente where email = '$email'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO cliente (endereco, numero, complemento, bairro, cidade, estado, cep, lat, lng,
        email,senha, nome, telefone, referencia)
       VALUES ('$rua', '$numero', '$complemento', '$bairro', '$cidade', '$estado', '$cep', '$lat', '$lng', '$email','$senha', '$nome', '$telefone', '$referencia') ");
            if ($consulta->execute()) {
                echo $db->con()->lastInsertId();
            } else {
                echo json_encode(array("erro" => true));
            }
        } else {
            echo "existe";
        }
    }
);

$app->post(
    '/salvarAdicionalProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_adicional = (isset($data->id_adicional)) ? $data->id_adicional : "";
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";

        $consulta = $db->con()->prepare("INSERT INTO adicional_produto (id_adicional, id_produto)
       VALUES ('$id_adicional', '$id_produto') ");
        if ($consulta->execute()) {
            echo $db->con()->lastInsertId();
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarCidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $cidade = trim($cidade);
        $estado = trim($estado);

        $consulta = $db->con()->prepare("INSERT INTO cidade (cidade, estado)
     VALUES ('$cidade', '$estado') ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/atualizarStatusEmpresa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $status = (isset($data->status)) ? $data->status : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("UPDATE empresa set aberto = '$status' where id = '$id_empresa'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/baixaEntregador',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE pedido set baixa_entregador = 'true' where id = '$id'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->get(
    '/getCaixa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa where id_empresa = '$id' and status = 'aberto' order by id DESC LIMIT 1

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            $id_caixa = $list[0]['id'];
            $consulta = $db->con()->prepare("SELECT sum(valor_total) as valor_total from pedido where id_caixa = '$id_caixa' and status = 'Finalizado'
        and cancelado = 'false' and pedido.id_empresa = '$id'

        ");
            $consulta->execute();
            $temp = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $list[0]['valor_total'] = $temp[0]['valor_total'];
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCaixaAberto',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa where status = 'aberto' order by id DESC LIMIT 1 ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCategoriasFinanceiro',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from categoria_financeiro order by descricao ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/getPagamentosCaixaAberto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";

        if ($data_fechamento == "" || $data_fechamento == "0000-00-00 00:00:00") {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.* from parcial_pedido inner join
            pedido on parcial_pedido.id_pedido = pedido.id
            where pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
            and parcial_pedido.forma_pagamento <> 'A receber' and pedido.data_finalizacao > '$data_abertura' ");
        } else {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.* from parcial_pedido inner join
            pedido on parcial_pedido.id_pedido = pedido.id
            where pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
            and parcial_pedido.forma_pagamento <> 'A receber' and pedido.data_finalizacao BETWEEN '$data_abertura'
            and '$data_fechamento' ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/atualizarConta',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $data_vencimento = (isset($data->data_vencimento)) ? $data->data_vencimento : "";
        $data_pagamento = (isset($data->data_pagamento)) ? $data->data_pagamento : null;
        $valor_bruto = (isset($data->valor_bruto)) ? $data->valor_bruto : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : 0;
        $recorrente = (isset($data->recorrente)) ? $data->recorrente : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $categoria = (isset($data->categoria)) ? $data->categoria : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $valor_liquido = floatval($valor_bruto) - floatval($desconto);

        if ($data_pagamento == "") {
            $data_pagamento = null;
        }
        try {
            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE contas SET descricao = :descricao, data_vencimento = :data_vencimento,
           data_pagamento = :data_pagamento, valor_bruto = :valor_bruto, desconto = :desconto, recorrente = :recorrente, tipo = :tipo,
            valor_liquido = :valor_liquido, forma_pagamento = :forma_pagamento where id = :id ");
            $consulta->bindValue(':id', $id);
            $consulta->bindValue(':descricao', $descricao);
            $consulta->bindValue(':data_vencimento', $data_vencimento);
            $consulta->bindValue(':data_pagamento', $data_pagamento);
            $consulta->bindValue(':valor_bruto', $valor_bruto);
            $consulta->bindValue(':desconto', $desconto);
            $consulta->bindValue(':recorrente', $recorrente);
            $consulta->bindValue(':tipo', $tipo);
            $consulta->bindValue(':valor_liquido', $valor_liquido);
            $consulta->bindValue(':forma_pagamento', $forma_pagamento);
            $consulta->execute();
            $db->con()->commit();
            echo json_encode("ok");
        } catch (Exception $e) {
            $db->con()->rollBack();
        }

    }
);

$app->post(
    '/salvarContas',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $data_vencimento = (isset($data->data_vencimento)) ? $data->data_vencimento : "";
        $data_pagamento = (isset($data->data_pagamento)) ? $data->data_pagamento : null;
        $valor_bruto = (isset($data->valor_bruto)) ? $data->valor_bruto : "";
        $desconto = (isset($data->desconto)) ? $data->desconto : 0;
        $recorrente = (isset($data->recorrente)) ? $data->recorrente : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $categoria = (isset($data->categoria)) ? $data->categoria : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $taxa_desconto = (isset($data->taxa_desconto)) ? $data->taxa_desconto : "";
        $id_conta_banco = (isset($data->id_conta_banco)) ? $data->id_conta_banco : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        $valor_liquido = floatval($valor_bruto) - floatval($desconto);
        $valor_liquido = $valor_liquido - ($valor_liquido * floatval($taxa_desconto) / 100);
        $parcelas = (isset($data->parcelas)) ? $data->parcelas : "1";
        $numero_parcela = "1" . "/" . $parcelas;
        if ($data_pagamento == "") {
            $data_pagamento = null;
        }

        try {
            $db->con()->beginTransaction();
            if ($id == -1) {
                $consulta = $db->con()->prepare("INSERT INTO contas (descricao, data_vencimento, data_pagamento, valor_bruto, desconto, recorrente, tipo,
             data_criacao, valor_liquido, forma_pagamento, taxa_desconto, parcelas, numero_parcela, id_conta_banco)
            VALUES (:descricao, :data_vencimento, :data_pagamento, :valor_bruto, :desconto, :recorrente,
             :tipo, :data_criacao, :valor_liquido, :forma_pagamento, :taxa_desconto, :parcelas, :numero_parcela, :id_conta_banco) ");
                $consulta->bindValue(':data_criacao', $datetime);
                $consulta->bindValue(':parcelas', $parcelas);
                $consulta->bindValue(':numero_parcela', $numero_parcela);
            } else {
                $consulta = $db->con()->prepare("UPDATE contas SET descricao = :descricao, data_vencimento = :data_vencimento,
             data_pagamento = :data_pagamento, valor_bruto = :valor_bruto, desconto = :desconto, recorrente = :recorrente, tipo = :tipo,
              valor_liquido = :valor_liquido, forma_pagamento = :forma_pagamento, taxa_desconto = :taxa_desconto,
              id_conta_banco = :id_conta_banco where id = :id ");
                $consulta->bindValue(':id', $id);
            }

            $consulta->bindValue(':descricao', $descricao);
            $consulta->bindValue(':data_vencimento', $data_vencimento);
            $consulta->bindValue(':data_pagamento', $data_pagamento);
            $consulta->bindValue(':valor_bruto', $valor_bruto);
            $consulta->bindValue(':desconto', $desconto);
            $consulta->bindValue(':recorrente', $recorrente);
            $consulta->bindValue(':tipo', $tipo);
            $consulta->bindValue(':valor_liquido', $valor_liquido);
            $consulta->bindValue(':forma_pagamento', $forma_pagamento);
            $consulta->bindValue(':taxa_desconto', $taxa_desconto);
            $consulta->bindValue(':id_conta_banco', $id_conta_banco);
            $consulta->execute();
            if ($id == -1) {
                $id_conta = $db->con()->lastInsertId();
            } else {
                $id_conta = $id;
            }

            if ($id_categoria == "") {
                $consulta = $db->con()->prepare("INSERT INTO categoria_financeiro (descricao) VALUES (:categoria) ");
                $consulta->bindValue(':categoria', strtoupper($categoria));
                $consulta->execute();
                $id_categoria = $db->con()->lastInsertId();
            }

            if ($id != -1) {
                $consulta = $db->con()->prepare("DELETE from categoria_conta where id_conta = :id ");
                $consulta->bindValue(':id', $id);
                $consulta->execute();
            }

            $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria) VALUES (:id_conta, :id_categoria) ");
            $consulta->bindValue(':id_conta', $id_conta);
            $consulta->bindValue(':id_categoria', $id_categoria);
            $consulta->execute();

            $db->con()->commit();
            echo json_encode("ok");
        } catch (Exception $e) {
            $db->con()->rollBack();
        }

    }
);

$app->post(
    '/salvarContasParcelado',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);
        $data_vencimento = $lista[0]['data_vencimento'];
        $id_categoria = "";
        $index = 0;
        foreach ($lista as $item) {
            if ($item['data_pagamento'] == "") {
                $item['data_pagamento'] = null;
            }
            $recorrente = 'false';
            try {

                $db->con()->beginTransaction();
                $consulta = $db->con()->prepare("INSERT INTO contas (descricao, data_vencimento, data_pagamento, valor_bruto, desconto, recorrente, tipo,
             data_criacao, valor_liquido, forma_pagamento, taxa_desconto, parcelas, numero_parcela)
            VALUES (:descricao, :data_vencimento, :data_pagamento, :valor_bruto, :desconto, :recorrente,
             :tipo, :data_criacao, :valor_liquido, :forma_pagamento, :taxa_desconto, :parcelas, :numero_parcela) ");
                $consulta->bindValue(':data_criacao', $datetime);
                $consulta->bindValue(':parcelas', $item['parcelas']);
                $consulta->bindValue(':numero_parcela', $item['numero_parcela']);
                $consulta->bindValue(':descricao', $item['descricao']);
                $consulta->bindValue(':data_vencimento', $item['data_vencimento']);
                $consulta->bindValue(':data_pagamento', $item['data_pagamento']);
                $consulta->bindValue(':valor_bruto', $item['valor_bruto']);
                $consulta->bindValue(':desconto', $item['desconto']);
                $consulta->bindValue(':recorrente', $recorrente);
                $consulta->bindValue(':tipo', $item['tipo']);
                $consulta->bindValue(':valor_liquido', $item['valor_liquido']);
                $consulta->bindValue(':forma_pagamento', $item['forma_pagamento']);
                $consulta->bindValue(':taxa_desconto', $item['taxa_desconto']);
                $consulta->execute();
                $id_conta = $db->con()->lastInsertId();

                if ($item['id_categoria'] == "" && $id_categoria == "") {
                    $consulta = $db->con()->prepare("INSERT INTO categoria_financeiro (descricao) VALUES (:categoria) ");
                    $consulta->bindValue(':categoria', strtoupper($item['categoria']));
                    $consulta->execute();
                    $id_categoria = $db->con()->lastInsertId();
                } else {
                    if ($id_categoria == "") {
                        $id_categoria = $item['id_categoria'];
                    }
                }

                $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria) VALUES (:id_conta, :id_categoria) ");
                $consulta->bindValue(':id_conta', $id_conta);
                $consulta->bindValue(':id_categoria', $id_categoria);
                $consulta->execute();

                $index++;
                $db->con()->commit();
            } catch (Exception $e) {
                $db->con()->rollBack();
            }
        }

        echo json_encode("ok");
    }
);

$app->post(
    '/getContasFinanceiro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $mes = (isset($data->mes)) ? $data->mes : "";
        $ano = (isset($data->ano)) ? $data->ano : "";
        $criar_recorrente = (isset($data->criar_recorrente)) ? $data->criar_recorrente : false;

        $consulta = $db->con()->prepare("SELECT contas.*, categoria_financeiro.descricao as categoria from categoria_conta
      inner join categoria_financeiro on categoria_conta.id_categoria = categoria_financeiro.id
      inner join contas on categoria_conta.id_conta = contas.id
      where cancelado = 'false' and EXTRACT(MONTH from data_vencimento) = :mes and  EXTRACT(YEAR from data_vencimento) = :ano");
        $consulta->bindParam(':mes', $mes);
        $consulta->bindParam(':ano', $ano);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if ($criar_recorrente == true) {
            $consulta = $db->con()->prepare("SELECT contas.*,
            EXTRACT(DAY from data_vencimento) as dia, categoria_conta.id_categoria from contas
            inner join categoria_conta on categoria_conta.id_conta = contas.id where recorrente = 'true' and cancelado = 'false' and
            EXTRACT(MONTH from data_vencimento) < :mes and EXTRACT(YEAR from data_vencimento) <= :ano and
        contas.id not in (SELECT COALESCE(id_pai, -1) FROM contas WHERE (EXTRACT(MONTH from data_vencimento) = :mes1 and EXTRACT(YEAR from data_vencimento) = :ano1))");
            $consulta->bindParam(':mes', $mes);
            $consulta->bindParam(':ano', $ano);
            $consulta->bindParam(':mes1', $mes);
            $consulta->bindParam(':ano1', $ano);
            $consulta->execute();
            $lista = $consulta->fetchAll(PDO::FETCH_ASSOC);
            foreach ($lista as $item) {
                $id_pai = $item['id'];
                $descricao = $item['descricao'];
                $data_vencimento = $ano . '-' . $mes . '-' . $item['dia'];
                $valor_bruto = $item['valor_bruto'];
                $desconto = $item['desconto'];
                $valor_liquido = floatval($valor_bruto) - floatval($desconto);
                $recorrente = 'false';
                $tipo = $item['tipo'];
                $datetime = date_create()->format('Y-m-d H:i:s');
                $id_categoria = $item['id_categoria'];
                $consulta = $db->con()->prepare("INSERT INTO contas (id_pai, descricao, data_vencimento,
          valor_bruto, desconto, valor_liquido, recorrente, tipo, data_criacao) VALUES
          (:id_pai, :descricao, :data_vencimento, :valor_bruto, :desconto,
           :valor_liquido, :recorrente, :tipo, :data_criacao)");
                $consulta->bindParam(':id_pai', $id_pai);
                $consulta->bindParam(':descricao', $descricao);
                $consulta->bindParam(':data_vencimento', $data_vencimento);
                $consulta->bindParam(':valor_bruto', $valor_bruto);
                $consulta->bindParam(':desconto', $desconto);
                $consulta->bindParam(':valor_liquido', $valor_liquido);
                $consulta->bindParam(':recorrente', $recorrente);
                $consulta->bindParam(':tipo', $tipo);
                $consulta->bindParam(':data_criacao', $datetime);
                $consulta->execute();
                $id_conta = $db->con()->lastInsertId();
                $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria) VALUES (:id_conta,:id_categoria) ");
                $consulta->bindParam(':id_conta', $id_conta);
                $consulta->bindParam(':id_categoria', $id_categoria);
                $consulta->execute();
            }
            $consulta = $db->con()->prepare("SELECT contas.*, categoria_financeiro.descricao as categoria from categoria_conta
      inner join categoria_financeiro on categoria_conta.id_categoria = categoria_financeiro.id
      inner join contas on categoria_conta.id_conta = contas.id
      where cancelado = 'false' and EXTRACT(MONTH from data_vencimento) = :mes and  EXTRACT(YEAR from data_vencimento) = :ano");
            $consulta->bindParam(':mes', $mes);
            $consulta->bindParam(':ano', $ano);
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        echo json_encode($list);

    }
);

$app->post(
    '/getContasFinanceiroPorFiltro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";

        $consulta = $db->con()->prepare("SELECT contas.*, categoria_financeiro.descricao as categoria from categoria_conta
      inner join categoria_financeiro on categoria_conta.id_categoria = categoria_financeiro.id
      inner join contas on categoria_conta.id_conta = contas.id
      where cancelado = 'false' and data_vencimento BETWEEN :inicio and :termino ");
        $consulta->bindParam(':inicio', $inicio);
        $consulta->bindParam(':termino', $termino);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/atualizarParametroMP',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $public_key_mp = (isset($data->public_key_mp)) ? $data->public_key_mp : "";
        $token_mp = (isset($data->token_mp)) ? $data->token_mp : "";

        $consulta = $db->con()->prepare("UPDATE parametro set
        public_key_mp = :public_key_mp, token_mp = :token_mp");
        $consulta->bindParam(':public_key_mp', $public_key_mp);
        $consulta->bindParam(':token_mp', $token_mp);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getContasFinanceiroPorFiltroDRE',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $lista = json_decode(json_encode($data->lista), true);

        $sql = "SELECT sum(contas.valor_liquido) as valor, contas.tipo, categoria_financeiro.descricao as categoria,
      CONCAT(EXTRACT(MONTH from data_pagamento),'/', EXTRACT(YEAR from data_pagamento)) as mesAno from categoria_conta
    inner join categoria_financeiro on categoria_conta.id_categoria = categoria_financeiro.id
    inner join contas on categoria_conta.id_conta = contas.id
    where cancelado = 'false' and tipo = '$tipo' and (";
        $i = 0;
        foreach ($lista as $item) {
            $mes = $item['mes'];
            $ano = $item['ano'];
            $sql = $sql . "EXTRACT(MONTH from data_pagamento) = '$mes' and EXTRACT(YEAR from data_pagamento) = '$ano'";
            $i++;
            if ($i != count($lista)) {
                $sql = $sql . " or ";
            }
        }
        $sql = $sql . ") group by mesAno, categoria_financeiro.descricao";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getEntradaSaidaCaixaMesDRE',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);

        $sql = "SELECT sum(valor) as valor, tipo,
        CONCAT(EXTRACT(MONTH from data_entrada_saida),'/', EXTRACT(YEAR from data_entrada_saida)) as mesAno from entrada_saida_caixa
    where ";

        $i = 0;
        foreach ($lista as $item) {
            $mes = $item['mes'];
            $ano = $item['ano'];
            $sql = $sql . "EXTRACT(MONTH from data_entrada_saida) = '$mes' and EXTRACT(YEAR from data_entrada_saida) = '$ano'";
            $i++;
            if ($i != count($lista)) {
                $sql = $sql . " or ";
            }
        }
        $sql = $sql . " group by mesAno, tipo";

        $consulta = $db->con()->prepare($sql);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getEntradaSaidaCaixaMes',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";

        $consulta = $db->con()->prepare("SELECT sum(valor) as valor, tipo as titulo from entrada_saida_caixa
      where data_entrada_saida BETWEEN :inicio and :termino ");
        $consulta->bindParam(':inicio', $inicio);
        $consulta->bindParam(':termino', $termino);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/salvarArquivoMensagemWhats',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $arquivo = (isset($data->arquivo)) ? $data->arquivo : "";
        $tipo_arquivo = (isset($data->tipo_arquivo)) ? $data->tipo_arquivo : "";
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE whatsapp_cadastro set arquivo = :arquivo, tipo_arquivo = :tipo_arquivo
        where id = :id ");
        $consulta->bindParam(':arquivo', $arquivo);
        $consulta->bindParam(':tipo_arquivo', $tipo_arquivo);
        $consulta->bindParam(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getNfceItemCFOP',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $inicio = (isset($data->inicio)) ? $data->inicio : "";
        $termino = (isset($data->termino)) ? $data->termino : "";
        $status = 'autorizado';

        $consulta = $db->con()->prepare("SELECT cfop, SUM(nfce_item.valor_bruto) as valor
         from nfce_item inner join nfce on nfce_item.id_nfce = nfce.id
         where data_nfce BETWEEN :inicio and :termino and nfce.status = :status
         GROUP BY cfop");
        $consulta->bindParam(':inicio', $inicio);
        $consulta->bindParam(':termino', $termino);
        $consulta->bindParam(':status', $status);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getCaixasDataInicio',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio_financeiro = (isset($data->data_inicio_financeiro)) ? $data->data_inicio_financeiro : "";

        $consulta = $db->con()->prepare("SELECT * from caixa where status = 'fechado' and
        data_abertura >= :data_inicio_financeiro and importado_financeiro = 'false'");
        $consulta->bindParam(':data_inicio_financeiro', $data_inicio_financeiro);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/atualizarValorFinalCaixa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor_liquido = (isset($data->valor_liquido)) ? $data->valor_liquido : "";

        $consulta = $db->con()->prepare("UPDATE caixa SET valor_final = :valor_final where
        id = :id");
        $consulta->bindParam(':id', $id);
        $consulta->bindParam(':valor_final', $valor_liquido);
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/getDetalhesCaixaFinanceiro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";

        $consulta = $db->con()->prepare("SELECT sum(valor) as valor, tipo_pagamento as descricao from parcial_pedido inner join
        pedido on parcial_pedido.id_pedido = pedido.id
        where pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
        and data_finalizacao BETWEEN :data_abertura and :data_fechamento
        and tipo_pagamento <> 'A Receber'
        GROUP BY tipo_pagamento");
        $consulta->bindParam(':data_abertura', $data_abertura);
        $consulta->bindParam(':data_fechamento', $data_fechamento);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/importarReceitas',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $lista = json_decode(json_encode($data->lista), true);

        $consulta = $db->con()->prepare("SELECT id from categoria_financeiro WHERE descricao = 'CAIXA'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO categoria_financeiro (descricao) VALUES ('CAIXA')");
            $consulta->execute();
            $id_categoria = $db->con()->lastInsertId();
        } else {
            $id_categoria = $list[0]['id'];
        }

        $datetime = date_create()->format('Y-m-d H:i:s');
        $desconto = 0;

        $recorrente = 'false';
        foreach ($lista as $item) {
            $valor_bruto = $item['valor'];
            $valor_liquido = floatval($valor_bruto) - (floatval($valor_bruto) * floatval($item['taxa_desconto']) / 100);
            $consulta = $db->con()->prepare("INSERT INTO contas (descricao, data_vencimento, data_pagamento, valor_bruto, desconto, recorrente, tipo,
            data_criacao, valor_liquido, forma_pagamento,id_caixa, taxa_desconto)
           VALUES (:descricao, :data_vencimento, :data_pagamento, :valor_bruto, :desconto,
            :recorrente, :tipo, :data_criacao, :valor_liquido, :forma_pagamento,:id_caixa, :taxa_desconto) ");
            $id_caixa = $item['id_caixa'];
            $consulta->bindParam(':data_criacao', $datetime);
            $consulta->bindParam(':descricao', $item['descricao']);
            $consulta->bindParam(':data_vencimento', $item['data_vencimento']);
            $consulta->bindParam(':data_pagamento', $item['data_pagamento']);
            $consulta->bindParam(':valor_bruto', $valor_bruto);
            $consulta->bindParam(':desconto', $desconto);
            $consulta->bindParam(':recorrente', $recorrente);
            $consulta->bindParam(':tipo', $item['tipo']);
            $consulta->bindParam(':valor_liquido', $valor_liquido);
            $consulta->bindParam(':forma_pagamento', $item['forma_pagamento']);
            $consulta->bindParam(':id_caixa', $item['id_caixa']);
            $consulta->bindParam(':taxa_desconto', $item['taxa_desconto']);
            $consulta->execute();
            $id_conta = $db->con()->lastInsertId();
            $consulta = $db->con()->prepare("INSERT INTO categoria_conta (id_conta, id_categoria)
            VALUES (:id_conta, :id_categoria)");
            $consulta->bindParam(':id_conta', $id_conta);
            $consulta->bindParam(':id_categoria', $id_categoria);
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("UPDATE caixa set importado_financeiro = 'true'
        where id = :id_caixa");
        $consulta->bindParam(':id_caixa', $id_caixa);
        $consulta->execute();

        echo json_encode('ok');

    }
);

$app->post(
    '/cancelarConta',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $recorrente = (isset($data->recorrente)) ? $data->recorrente : "";
        $data_vencimento = (isset($data->data_vencimento)) ? $data->data_vencimento : "";
        $id_pai = (isset($data->id_pai)) ? $data->id_pai : "";

        $consulta = $db->con()->prepare("UPDATE contas set cancelado = 'true' where id = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();

        if ($recorrente == 'true') {
            $consulta = $db->con()->prepare("UPDATE contas set cancelado = 'true' where id_pai = :id_pai and data_pagamento is null");
            $consulta->bindValue(':id_pai', $id_pai);
            $consulta->execute();
        }

        echo json_encode('ok');

    }
);

$app->get(
    '/getPedidosRecuperador',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT cliente.nome, cliente.telefone, TIMESTAMPDIFF(MINUTE, data_pedido, now()) from pedido inner join cliente on pedido.id_cliente = cliente.id
        where status = 'Aplicativo' and cancelado = 'false' AND mensagem_recuperador = 'false' and
        TIMESTAMPDIFF(MINUTE, data_pedido, '$datetime') BETWEEN 10 and 30");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("UPDATE pedido set mensagem_recuperador = 'true'
        where status = 'Aplicativo' and cancelado = 'false' AND mensagem_recuperador = 'false' and
        TIMESTAMPDIFF(MINUTE, data_pedido, '$datetime') BETWEEN 10 and 30");
        $consulta->execute();
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getContasPorID',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT contas.*, categoria_financeiro.descricao as categoria from categoria_conta
      inner join categoria_financeiro on categoria_conta.id_categoria = categoria_financeiro.id
      inner join contas on categoria_conta.id_conta = contas.id
      where contas.id = :id");
        $consulta->bindValue(':id', $id);
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getPedidosCaixaAberto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_abertura = (isset($data->data_abertura)) ? $data->data_abertura : "";
        $data_fechamento = (isset($data->data_fechamento)) ? $data->data_fechamento : "";
        if ($data_fechamento == "" || $data_fechamento == "0000-00-00 00:00:00") {
            $consulta = $db->con()->prepare("SELECT pedido.* from pedido
        where pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
        and pedido.forma_pagamento <> 'A receber' and pedido.data_finalizacao > '$data_abertura' ");
        } else {
            $consulta = $db->con()->prepare("SELECT pedido.* from pedido
        where pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
        and pedido.forma_pagamento <> 'A receber' and pedido.data_finalizacao BETWEEN '$data_abertura' and '$data_fechamento' ");
        }
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->get(
    '/getCaixaUsuario/:id_usuario/:id_caixa',
    function ($id_usuario, $id_caixa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa_usuario
      where id_caixa = '$id_caixa' and data_fechamento is not null and
      id_usuario = '$id_usuario'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCaixas/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa where id_empresa = '$id' and status = 'fechado' order by data_abertura DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_caixa = $item['id'];
            $consulta = $db->con()->prepare("SELECT sum(valor_total) as valor_total from pedido where id_caixa = '$id_caixa' and status = 'Finalizado'
        and cancelado = 'false' and pedido.id_empresa = '$id'

        ");
            $consulta->execute();
            $temp = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $list[$i]['valor_total'] = $temp[0]['valor_total'];

            $consulta = $db->con()->prepare("SELECT sum(valor) as entrada from entrada_saida_caixa where id_caixa = '$id_caixa' and tipo = 'Entrada'

       ");
            $consulta->execute();
            $temp = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $list[$i]['entrada'] = $temp[0]['entrada'];
            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCaixasSimples/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa where id_empresa = '$id' and status = 'fechado' order by data_abertura DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUltimosCaixas',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from caixa order by data_abertura DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/salvarAvaliacao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $sabor = (isset($data->sabor)) ? $data->sabor : "";
        $entrega = (isset($data->entrega)) ? $data->entrega : "";
        $custo_beneficio = (isset($data->custo_beneficio)) ? $data->custo_beneficio : "";
        $embalagem = (isset($data->embalagem)) ? $data->embalagem : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $comentario = (isset($data->comentario)) ? $data->comentario : "";
        $media = (isset($data->media)) ? $data->media : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("INSERT INTO avaliacao (sabor, entrega, custo_beneficio, embalagem, id_empresa, id_cliente, media, data, comentario)
       VALUES ('$sabor', '$entrega', '$custo_beneficio', '$embalagem', '$id_empresa', '$id_cliente', '$media', '$datetime', '$comentario') ");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("UPDATE empresa set avaliacao = (select sum(media) from avaliacao where id_empresa = '$id_empresa') / (select count(id) from avaliacao where id_empresa = '$id_empresa') where id = '$id_empresa'");
            $consulta->execute();
            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarRespostaAvaliacao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $resposta_empresa = (isset($data->resposta_empresa)) ? $data->resposta_empresa : "";
        $id = (isset($data->id)) ? $data->id : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE avaliacao set resposta = '$resposta_empresa', data_resposta = '$datetime' where id = '$id' ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarParcialPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $troco = (isset($data->troco)) ? $data->troco : "";
        $forma_pagamento = (isset($data->forma_pagamento)) ? $data->forma_pagamento : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        if ($troco == "") {
            $troco = 0;
        }

        if (strpos(strtolower($forma_pagamento), 'din') !== false) {
            $tipo_pagamento = "DINHEIRO";
        } else if (strpos(strtolower($forma_pagamento), 'debi') !== false) {
            $tipo_pagamento = "CARTÃO DE DÉBITO";
        } else if (strpos(strtolower($forma_pagamento), 'débi') !== false) {
            $tipo_pagamento = "CARTÃO DE DÉBITO";
        } else if (strpos(strtolower($forma_pagamento), 'cred') !== false) {
            $tipo_pagamento = "CARTÃO DE CRÉDITO";
        } else if (strpos(strtolower($forma_pagamento), 'créd') !== false) {
            $tipo_pagamento = "CARTÃO DE CRÉDITO";
        } else if (strpos(strtolower($forma_pagamento), 'pix') !== false) {
            $tipo_pagamento = "PIX";
        } else {
            $tipo_pagamento = $forma_pagamento;
        }

        $consulta = $db->con()->prepare("INSERT INTO parcial_pedido (id_pedido, valor, forma_pagamento, observacao, troco, tipo_pagamento, data_pagamento)
         VALUES ('$id_pedido', '$valor', '$forma_pagamento', '$observacao', '$troco', '$tipo_pagamento', '$datetime') ");
        if ($consulta->execute()) {
            $dadosHistorico = new stdClass();
            $dados->usuario = $usuario;
            $dados->id_pedido = $id_pedido;
            $dados->tipo = $tipo_pedido;
            $id_parcial = $db->con()->lastInsertId();
            $dados->evento = "Usuário " . $usuario . " adicionou pagamento: " . $forma_pagamento . " no valor de R$" . $valor . " ID: " . $id_parcial . " ao pedido " . $id_pedido;
            salvarHistoricoPedido($dados, $app, $db);

            echo json_encode($id_parcial);
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->post(
    '/salvarParcialPedidoEmMassa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $lista = json_decode(json_encode($data->lista), true);
        foreach ($lista as $item) {
            $id_pedido = (isset($item['id_pedido'])) ? $item['id_pedido'] : "";
            $consulta = $db->con()->prepare("DELETE FROM parcial_pedido where id_pedido = '$id_pedido' ");
            $consulta->execute();
        }

        foreach ($lista as $item) {
            $id_pedido = (isset($item['id_pedido'])) ? $item['id_pedido'] : "";
            $valor = (isset($item['valor'])) ? $item['valor'] : "";
            $troco = (isset($item['troco'])) ? $item['troco'] : "";
            $forma_pagamento = (isset($item['forma_pagamento'])) ? $item['forma_pagamento'] : "";
            $observacao = (isset($item['observacao'])) ? $item['observacao'] : "";
            $id = $item['id'];

            if ($troco == "") {
                $troco = 0;
            }

            if (strpos(strtolower($forma_pagamento), 'din') !== false) {
                $tipo_pagamento = "DINHEIRO";
            } else if (strpos(strtolower($forma_pagamento), 'debi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'débi') !== false) {
                $tipo_pagamento = "CARTÃO DE DÉBITO";
            } else if (strpos(strtolower($forma_pagamento), 'cred') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'créd') !== false) {
                $tipo_pagamento = "CARTÃO DE CRÉDITO";
            } else if (strpos(strtolower($forma_pagamento), 'pix') !== false) {
                $tipo_pagamento = "PIX";
            } else {
                $tipo_pagamento = $forma_pagamento;
            }

            $consulta = $db->con()->prepare("INSERT INTO
             parcial_pedido (id_pedido, valor, forma_pagamento, observacao, troco, tipo_pagamento) VALUES
              ('$id_pedido', '$valor', '$forma_pagamento', '$observacao', '$troco', '$tipo_pagamento') ");
            $consulta->execute();

        }
        echo json_encode("ok");
    }
);

$app->post(
    '/setDataNotificacao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $notificacao = (isset($data->notificacao)) ? $data->notificacao : "";

        $datetime = date_create()->format('Y-m-d H:i:s');

        if ($notificacao == "visualizado") {
            $consulta = $db->con()->prepare("UPDATE pedido set notificacao_visualizacao = '$datetime' where id = '$id' ");
        } else if ($notificacao == 'transporte') {
            $consulta = $db->con()->prepare("UPDATE pedido set notificacao_transporte = '$datetime' where id = '$id' ");
        } else {
            $consulta = $db->con()->prepare("UPDATE pedido set notificacao_cancelado = '$datetime' where id = '$id' ");
        }

        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

function arrumarProdutoEstoqueLista($data, $db, $app)
{
    $id = (isset($data->id)) ? $data->id : "";
    $origem_pedido = (isset($data->origem_pedido)) ? $data->origem_pedido : "";
    $consulta = $db->con()->prepare("SELECT id_produto from movimentacao_estoque
      where id_pedido = '$id' and origem_pedido = '$origem_pedido'

      ");
    $consulta->execute();
    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

    foreach ($list as $item) {
        $id_produto = $item['id_produto'];
        arrumarProdutoEstoque($id_produto, $db);
    }
}

function arrumarProdutoEstoque($id_produto, $db)
{
    $consulta = $db->con()->prepare("UPDATE produto_estoque set produto_estoque.qt_estoque =
     (SELECT (COALESCE((SELECT sum(movimentacao_estoque.quantidade) from movimentacao_estoque
      where id_produto = '$id_produto' and movimentacao_estoque.entrada_saida = 'entrada' and
      movimentacao_estoque.cancelado = 'false'), 0))
    - (COALESCE((SELECT sum(movimentacao_estoque.quantidade) from movimentacao_estoque
      where id_produto = '$id_produto' and movimentacao_estoque.entrada_saida = 'saida'
      and movimentacao_estoque.cancelado = 'false'), 0))) where id_produto = '$id_produto' ");
    $consulta->execute();
}

$app->post(
    '/cancelarTransacao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        cancelarTransacoes($data, $db, $app);
    }
);

function cancelarTransacoes($data, $db, $app)
{
    $data = json_decode($app->request()->getBody());
    $id = (isset($data->id)) ? $data->id : "";
    $origem_pedido = (isset($data->origem_pedido)) ? $data->origem_pedido : "";
    $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

    $consulta = $db->con()->prepare("SELECT id from parametro where estoque = 'true' ");
    $consulta->execute();
    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
    if (count($list) > 0) {
        $consulta = $db->con()->prepare("UPDATE movimentacao_estoque set cancelado = 'true' where
        id_pedido = '$id' and origem_pedido = '$origem_pedido' ");
        $consulta->execute();
        arrumarProdutoEstoqueLista($data, $db, $app);
    }
}

$app->post(
    '/cancelarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $motivo_cancelamento = (isset($data->motivo_cancelamento)) ? $data->motivo_cancelamento : "";
        $quem_cancelou = (isset($data->quem_cancelou)) ? $data->quem_cancelou : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";

        $consulta = $db->con()->prepare("UPDATE pedido set cancelado = 'true', fidelidade  = 'false', id_entregador = null,
       motivo_cancelamento = '$motivo_cancelamento', quem_cancelou = '$quem_cancelou', status = 'Cancelado'
       where id = '$id'  ");
        if ($consulta->execute()) {
            $dados = new stdClass();
            $dados->usuario = $usuario;
            $dados->id_pedido = $id;
            $dados->tipo = $tipo_pedido;
            $dados->evento = "Usuário " . $usuario . " cancelou o pedido " . $id . " pelo motivo " . $motivo_cancelamento;
            salvarHistoricoPedido($dados, $app, $db);
            echo json_encode("ok");
            cancelarTransacoes($data, $db, $app);
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);

$app->get(
    '/getComandas/:id',
    function ($id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set status = 'Orçamento' where
      status = 'agendado' AND status2 = 'aguardando' and
      TIMESTAMPDIFF(MINUTE,'$datetime' , data_agendamento) <= 120 and id_empresa <> '60'");
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido left join cliente on pedido.id_cliente = cliente.id
      where (status = 'Orçamento' || status = 'Aguardando autorização')
      and cancelado = 'false' and auto_atendimento = 'false' order by  pedido.id_referencia_mesa");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;

        foreach ($list as $item) {
            $id_comanda = $item['id'];
            $consulta = $db->con()->prepare("select * from parcial_pedido where id_pedido = '$id_comanda'

       ");
            $consulta->execute();
            $list[$i]['parcial'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("SELECT produto.id, pedido_produto.id as id_pedido_produto, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
        pedido_produto.observacao as observacao, pedido.referencia, pedido.porcentagem_garcom, pedido_produto.status, pedido.nome_mesa, pedido.nome_mesa2,
        pedido_produto.valor_total as valor_total, pedido_produto.valor_pago, produto.valor as valor, pedido_produto.quantidade from pedido, pedido_produto,
        produto where
        pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id
        and pedido_produto.id_pedido = '$id_comanda'

        ");
            $consulta->execute();
            $list[$i]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i2 = 0;
            foreach ($list[$i]['produtos'] as $item2) {
                $id_produto = $item2['id'];
                $sequencia_produto = $item2['sequencia'];
                $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
          adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
          from adicional, produto, pedido, adicional_produto_pedido where
          adicional_produto_pedido.id_adicional = adicional.id and
          adicional_produto_pedido.id_produto = produto.id and
          adicional_produto_pedido.id_pedido = pedido.id and
          adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id_comanda' and
          adicional_produto_pedido.sequencia = '$sequencia_produto'

          ");
                $consulta->execute();
                $list[$i]['produtos'][$i2]['listAdicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $i2++;
            }
            $i++;
        }

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getResponsaveisComanda',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, cliente.nome from pedido inner join cliente
      on pedido.id_cliente = cliente.id
      where (status = 'Orçamento') and cancelado = 'false' and
      TIMESTAMPDIFF(YEAR, data_nascimento, CURDATE()) >= 18
      and data_nascimento is not null and data_nascimento <> '1800-01-01'
       order by  cliente.nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosComResponsavel',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.responsavel_pedido, pedido.id from pedido
      where status = 'Orçamento' and cancelado = 'false' and responsavel_pedido <> 0");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);


$app->get(
    '/getComandasAppGarom',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.tipo, pedido.nome_mesa, pedido.nome_mesa2, cliente.nome, cliente.telefone from pedido left join cliente on pedido.id_cliente = cliente.id
      where consumidor_final != 'true' and pedido.delivery <> 'true' and (status = 'Orçamento' || status = 'Aguardando autorização') and pedido.cancelado = 'false' order by  pedido.id_referencia_mesa");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getComandasAppGarcomConsumidorFinal',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.tipo, pedido.nome_mesa, pedido.nome_mesa2,
         cliente.nome, cliente.telefone from pedido
         left join cliente on pedido.id_cliente = cliente.id
      where consumidor_final = 'true' and
       (status = 'Orçamento' || status = 'Aguardando autorização') and pedido.cancelado = 'false' order by  pedido.id_referencia_mesa");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/checarComandasEmAberto',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from pedido
        where status <> 'Finalizado' and status <> 'Aplicativo' and status <> 'agendado' and (forma_pagamento <> 'A receber' or forma_pagamento is null) and status <> 'Aguardando Pagamento PIX' and cancelado = 'false'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sugestao_mesa where id_empresa = '$id' order by sugestao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesaComanda/:mesa',
    function ($mesa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sugestao_mesa where mesa = '$mesa' order by CAST(sugestao as SIGNED)

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $i = 0;
        foreach ($list as $item) {
            $mesa = $item['mesa'];
            $nome_mesa = $item['sugestao'];
            if ($mesa == 'true') {
                $consulta = $db->con()->prepare("SELECT GROUP_CONCAT(COALESCE(nome_mesa2) SEPARATOR ', ') as comandas from pedido where cancelado = 'false' and status = 'Orçamento'
          and nome_mesa = '$nome_mesa' and nome_mesa2 is not null and nome_mesa2 <> '' ");
                $consulta->execute();
                $list[$i]['pedidos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $list[$i]['pedidos'] = array();
            }
            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesaComandaAberto/:mesa',
    function ($mesa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sugestao_mesa where mesa = '$mesa' and
       status = 'aberto' order by CAST(sugestao as UNSIGNED)

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesaReferenciaNFC/:referencia_nfc',
    function ($referencia_nfc) use ($app, $db) {
        $referencia_nfc = floatval($referencia_nfc);
        $consulta = $db->con()->prepare("SELECT * from sugestao_mesa where referencia_nfc = '$referencia_nfc'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesaAberto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sugestao_mesa where id_empresa = '$id' and status = 'aberto' order by sugestao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getParcialPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClienteEndereco/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from endereco where id_cliente = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutos/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_fiscal.ean, categoria_produto.descricao as categoria,
         produto.*  from produto
         inner join categoria_produto on produto.id_categoria = categoria_produto.id
         left join produto_fiscal on produto_fiscal.id_produto = produto.id
       where produto.id_empresa = '$id'
       and cancelado = 'false'
       order by disponivel DESC, categoria, produto.nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosAtivos/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_fiscal.ean, categoria_produto.descricao as categoria,
         produto.*  from produto
         inner join categoria_produto on produto.id_categoria = categoria_produto.id
         left join produto_fiscal on produto_fiscal.id_produto = produto.id
       where produto.id_empresa = '$id'
       and cancelado = 'false' and disponivel = 'true'
       order by disponivel DESC, categoria, produto.nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);


$app->get(
    '/getPedidoRandom',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, tipo FROM pedido
        ORDER BY RAND()
        LIMIT 1");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getTodosProdutos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_fiscal.ean, categoria_produto.descricao as categoria,
         produto.*  from produto
         inner join categoria_produto on produto.id_categoria = categoria_produto.id
         left join produto_fiscal on produto_fiscal.id_produto = produto.id
       order by disponivel DESC, categoria, produto.nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosPDV',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_estoque.qt_estoque,
       unidades_entrada_saida.sigla, produto.valor, produto.nome, produto.descricao, produto_fiscal.ean, categoria_produto.descricao as categoria,
       produto.ordem  from produto
       inner join categoria_produto on produto.id_categoria = categoria_produto.id
       left join produto_fiscal on produto_fiscal.id_produto = produto.id
       right join produto_estoque on produto_estoque.id_produto = produto.id
       left join unidades_entrada_saida on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
       where cancelado = 'false' and disponivel = 'true'
     order by  produto.nome

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getVendedores',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from vendedor order by nome ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/limparPedidosAntigos/:senha',
    function ($senha) use ($app) {

        if ($senha == "onesolucoes") {
            $listaBancos = retornarListaBancoDeDados();
            foreach ($listaBancos as $banco) {
                try {
                    $db = new criarConexao($banco);
                    $consulta = $db->con()->prepare("DELETE adicional_produto_pedido from adicional_produto_pedido
        inner join pedido on adicional_produto_pedido.id_pedido = pedido.id
        where pedido.status = 'Aplicativo'");
                    $consulta->execute();
                    $consulta = $db->con()->prepare("DELETE pedido_produto from pedido_produto
        inner join pedido on pedido_produto.id_pedido = pedido.id
        where pedido.status = 'Aplicativo'");
                    $consulta->execute();
                    $consulta = $db->con()->prepare("DELETE from pedido where pedido.status = 'Aplicativo';");
                    $consulta->execute();
                } catch (Exception $e) {
                    $db->con()->rollBack();
                }
            }
        }
    }
);

$app->get(
    '/getSaboresPorNumero/:numero/:id_produto',
    function ($numero, $id_produto) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from sabor where numero = '$numero' and id_produto = '$id_produto'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPagamentosEntregador/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT parcial_pedido.*, pedido.ifood from parcial_pedido
     inner join pedido on parcial_pedido.id_pedido = pedido.id where parcial_pedido.id_pedido in ($id)

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosArray/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT parcial_pedido.*, pedido.*,
       parcial_pedido.forma_pagamento as forma_pagamento, cliente.nome from parcial_pedido
   inner join pedido on parcial_pedido.id_pedido = pedido.id
   left join cliente on pedido.id_cliente = cliente.id where parcial_pedido.id_pedido in ($id)
   order by id_pedido

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosServico/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto where tipo_produto = 'S' and
       id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getParcialPedidoEmMassa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido in $id

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getComandaReferenciaNFC/:id',
    function ($id) use ($app, $db) {
        $id = floatval($id);
        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
       left join cliente on pedido.id_cliente = cliente.id
       left join sugestao_mesa as s on pedido.nome_mesa = s.sugestao
       left join sugestao_mesa as s2 on pedido.nome_mesa2 = s2.sugestao
       where pedido.status = 'Orçamento' and (s2.referencia_nfc = '$id'
        or s.referencia_nfc = '$id')

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getComandaReferenciaNFC2/:id',
    function ($id) use ($app, $db) {
        $id = floatval($id);
        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
     left join cliente on pedido.id_cliente = cliente.id
     left join sugestao_mesa as s on pedido.nome_mesa = s.sugestao
     left join sugestao_mesa as s2 on pedido.nome_mesa2 = s2.sugestao
     where (s2.referencia_nfc = '$id'
      or s.referencia_nfc = '$id')

    ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getComandaReferenciaNFC3/:id',
    function ($id) use ($app, $db) {
        $id = floatval($id);
        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
   left join cliente on pedido.id_cliente = cliente.id
   left join sugestao_mesa as s on pedido.nome_mesa = s.sugestao
   left join sugestao_mesa as s2 on pedido.nome_mesa2 = s2.sugestao
   where (s2.referencia_nfc = '$id'
    or s.referencia_nfc = '$id') and pedido.status = 'Orçamento' and pedido.cancelado = 'false'

  ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getComandaReferenciaNFCFinalizado/:id',
    function ($id) use ($app, $db) {
        $id = floatval($id);
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT pedido.id from pedido
   left join sugestao_mesa as s on pedido.nome_mesa = s.sugestao
   left join sugestao_mesa as s2 on pedido.nome_mesa2 = s2.sugestao
   where (s2.referencia_nfc = '$id'
    or s.referencia_nfc = '$id') and pedido.status = 'Finalizado' and pedido.cancelado = 'false'
    and TIMESTAMPDIFF(hour, data_finalizacao, '$datetime') < 12

  ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosPorMesa/:mesa/:id',
    function ($mesa, $id) use ($app, $db) {
        $id = floatval($id);
        $consulta = $db->con()->prepare("SELECT pedido.id, cliente.nome, pedido.nome_mesa2  from pedido
       left join cliente on pedido.id_cliente = cliente.id where pedido.nome_mesa = '$mesa'
       and pedido.id <> '$id' and pedido.status = 'Orçamento'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosFiscal/:data_inicio/:data_final',
    function ($data_inicio, $data_final) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT date_format(pedido.data_pedido,'%d/%m/%Y %h:%i:%s') as data_pedido,
       date_format(pedido.data_finalizacao,'%d/%m/%Y %h:%i:%s') as data_finalizacao, pedido.tipo,
       pedido.ifood, nfce.id_pedido, (pedido.valor_total - pedido.desconto) as valor_liquido, pedido.id as id, pedido.*,
       cliente.nome from
       pedido left join nfce on (pedido.id = nfce.id_pedido and nfce.tipo_pedido = pedido.tipo)
       left join cliente on pedido.id_cliente = cliente.id where pedido.cancelado = 'false'
       and pedido.status = 'Finalizado' and pedido.data_finalizacao BETWEEN '$data_inicio' and '$data_final'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id = $item['id'];
            $consulta = $db->con()->prepare("SELECT forma_pagamento from parcial_pedido
        where id_pedido = '$id'

        ");
            $consulta->execute();
            $list[$i]['pagamentos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getMovimentoEstoqueRelatorio/:data_inicio/:data_final',
    function ($data_inicio, $data_final) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT movimentacao_estoque.*, produto.nome as produto,
      produto_estoque.classificacao,
      adicional.descricao as adicional,
      (movimentacao_estoque.valor_unitario_produto * movimentacao_estoque.quantidade) as valor_total,
      (movimentacao_estoque.quantidade * movimentacao_estoque.valor_custo) as total_custo,
      ((movimentacao_estoque.valor_unitario_produto * movimentacao_estoque.quantidade) -
      (movimentacao_estoque.quantidade * movimentacao_estoque.valor_custo)) as valor_lucro,
      CASE
      WHEN tipo_produto = 'M' THEN 'Mercadoria'
      WHEN tipo_produto = 'PA' THEN 'Produto Acabado'
      WHEN tipo_produto = 'MA' THEN 'Materia Prima'
      END as tipo_produto
      from movimentacao_estoque
      left join produto on movimentacao_estoque.id_produto = produto.id
      left join adicional on movimentacao_estoque.id_adicional = adicional.id
      left join produto_estoque on produto_estoque.id_produto = produto.id
      where dataMovimento BETWEEN '$data_inicio' and '$data_final' and
      movimentacao_estoque.cancelado = 'false'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosFiscalLocal/:data_inicio',
    function ($data_inicio) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id_pedido, tipo_pedido from nfce
      where tipo_pedido = 'app' and data_nfce >= '$data_inicio'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDetalhesNFCe/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from nfce where id = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("SELECT * from nfce_item where id_nfce = '$id'

       ");
        $consulta->execute();
        $list[0]['items'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("SELECT * from nfce_forma_pagamento where id_nfce = '$id'

       ");
        $consulta->execute();
        $list[0]['formas_pagamento'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosProdutoFiscal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto_fiscal.id as codigo_produto, produto.id as id_produto, produto_fiscal.codigo_ncm,
      COALESCE(NULLIF(produto_fiscal.nome_fiscal, ''), produto.nome) as descricao, pedido_produto.quantidade as quantidade_comercial, produto_fiscal.cfop,
      (COALESCE(produto_fiscal.valor_fiscal,pedido_produto.valor_produto)) as valor_unitario_comercial,
      produto_fiscal.ean, produto_fiscal.cest, produto.tipo_produto, pedido_produto.valor_produto,
      pedido_produto.sequencia, produto_fiscal.puxar_fiscal,produto_fiscal.pis, produto_fiscal.cofins,
      COALESCE(produto_fiscal.valor_fiscal,pedido_produto.valor_total) as valor_bruto, produto_fiscal.icms_origem, produto_fiscal.icms_situacao_tributaria,
      produto_fiscal.icms_aliquota, produto_fiscal.icms_modalidade_base_calculo from produto inner join pedido_produto
      on pedido_produto.id_produto = produto.id inner join produto_fiscal on
      produto_fiscal.id_produto = produto.id where
      pedido_produto.id_pedido = '$id'


      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $temp = array();
        foreach ($list as $item) {
            $id_produto = $item['id_produto'];
            $sequencia = $item['sequencia'];
            $quantidade_produto = $item['quantidade_comercial'];

            $consulta = $db->con()->prepare("SELECT adicional.id as codigo_produto, produto_fiscal.codigo_ncm,
      COALESCE(NULLIF(produto_fiscal.nome_fiscal, ''),adicional.descricao) as descricao, (adicional_produto_pedido.quantidade * '$quantidade_produto') as quantidade_comercial, produto_fiscal.cfop,
      COALESCE(produto_fiscal.valor_fiscal,adicional_produto_pedido.valor_adicional) as valor_unitario_comercial,
      produto_fiscal.ean, produto_fiscal.cest, adicional.extra, adicional_produto_pedido.sequencia,
      (COALESCE(produto_fiscal.valor_fiscal,adicional_produto_pedido.valor_adicional) * adicional_produto_pedido.quantidade) as valor_bruto,
      produto_fiscal.icms_origem, produto_fiscal.icms_situacao_tributaria, produto_fiscal.puxar_fiscal,
      produto_fiscal.icms_aliquota, produto_fiscal.icms_modalidade_base_calculo from adicional inner join adicional_produto_pedido
      on adicional_produto_pedido.id_adicional = adicional.id
      inner join produto_fiscal on produto_fiscal.id_adicional = adicional.id where
      adicional_produto_pedido.id_pedido = '$id' and adicional_produto_pedido.id_produto = '$id_produto'
      and adicional_produto_pedido.sequencia = '$sequencia'

      ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            foreach ($list2 as $item2) {
                $temp[] = $item2;
            }

            $consulta = $db->con()->prepare("SELECT produto_fiscal.id as codigo_produto, produto.id as id_produto, produto_fiscal.codigo_ncm,
        COALESCE(NULLIF(produto_fiscal.nome_fiscal, ''), produto.nome) as descricao, composicao_fiscal.quantidade as quantidade_comercial, produto_fiscal.cfop,
        (composicao_fiscal.valor / composicao_fiscal.quantidade) as valor_unitario_comercial,
        produto_fiscal.ean, produto_fiscal.cest, produto.tipo_produto, composicao_fiscal.valor,
        produto_fiscal.puxar_fiscal,
        composicao_fiscal.valor as valor_bruto, produto_fiscal.icms_origem, produto_fiscal.icms_situacao_tributaria,
        produto_fiscal.icms_aliquota, produto_fiscal.icms_modalidade_base_calculo
        from composicao_fiscal inner join produto on composicao_fiscal.id_composicao = produto.id
         inner join produto_fiscal on
        produto_fiscal.id_produto = produto.id
         where
        composicao_fiscal.id_produto = '$id_produto'


      ");
            $consulta->execute();
            $list3 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            foreach ($list3 as $item2) {
                $temp[] = $item2;
            }

        }
        foreach ($temp as $item2) {
            $list[] = $item2;
        }

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosProdutoFiscalGeral/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_fiscal.id as codigo_produto, produto_fiscal.codigo_ncm, produto.favorito,
      COALESCE(NULLIF(produto_fiscal.nome_fiscal, ''), produto.nome) as descricao, produto_fiscal.cfop, produto.valor,
      produto_fiscal.icms_origem, produto_fiscal.icms_situacao_tributaria, produto_fiscal.cest, produto_fiscal.ean,
      produto_fiscal.icms_aliquota, produto_fiscal.icms_modalidade_base_calculo, produto.id as id_produto from produto
      inner join produto_fiscal on produto_fiscal.id_produto = produto.id where
      produto.id_empresa = '$id' order by produto.nome


      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosFavoritos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id as id, produto_fiscal.id as codigo_produto, produto_fiscal.codigo_ncm, produto.favorito,
      COALESCE(NULLIF(produto_fiscal.nome_fiscal, ''), produto.nome) as descricao, produto_fiscal.cfop, produto.valor,
      produto_fiscal.icms_origem, produto_fiscal.icms_situacao_tributaria, produto_fiscal.cest, produto_fiscal.ean,
      produto_fiscal.icms_aliquota, produto_fiscal.icms_modalidade_base_calculo, produto.id as id_produto from produto
      inner join produto_fiscal on produto_fiscal.id_produto = produto.id where
      produto.favorito = 'true' order by produto.nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosClienteFiscal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT cliente.nome as nome_destinatario, cliente.cpf as cpf_destinatario,
       cliente.endereco as logradouro_destinatario, cliente.numero as numero_destinatario, cliente.bairro as bairro_destinatario,
       cliente.cidade as municipio_destinatario, cliente.estado as uf_destinatario, cliente.cep as cep_destinatario
       from cliente inner join pedido on pedido.id_cliente = cliente.id
       where pedido.id = '$id'


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutoFiscal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto_fiscal where id_produto = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO produto_fiscal (id_produto, puxar_fiscal) VALUES ('$id', 'false') ");
            $consulta->execute();
            $consulta = $db->con()->prepare("SELECT * from produto_fiscal where id_produto = '$id' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalGeral',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from adicional order by descricao

 ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalFiscal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto_fiscal where id_adicional = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO produto_fiscal (id_adicional, puxar_fiscal) VALUES ('$id', 'false') ");
            $consulta->execute();
            $consulta = $db->con()->prepare("SELECT * from produto_fiscal where id_adicional = '$id' ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidoNFCE/:id/:tipo',
    function ($id, $tipo) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT nfce.id from nfce where id_pedido = '$id' and tipo_pedido = '$tipo' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/criarPedidoNFCe',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("INSERT INTO pedido
            (tipo, valor_total, data_pedido, data_finalizacao, status)
            VALUES ('gerencial', 0, '$datetime', '$datetime', 'Finalizado') ");
        $consulta->execute();
        $id = $db->con()->lastInsertId();

        $consulta = $db->con()->prepare("SELECT * from pedido where id = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/getPedidoNFCEv2',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT nfce.id from nfce where id_pedido = '$id' and tipo_pedido = '$tipo'
      and status <> 'inutilizado' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        if (count($list) == 0) {

            $consulta = $db->con()->prepare("UPDATE parametro set sequencia_nfce = sequencia_nfce + 1");
            $consulta->execute();

            $consulta = $db->con()->prepare("SELECT sequencia_nfce, serie_nfce from parametro");
            $consulta->execute();
            $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $parametro = $parametro[0];

            $ref = $parametro['sequencia_nfce'];
            $serie = $parametro['serie_nfce'];

            $consulta = $db->con()->prepare("INSERT INTO nfce (id_pedido, tipo_pedido, ref, serie, status, data_nfce) VALUES
        ('$id', '$tipo', '$ref', '$serie', 'aguardando', '$datetime')");
            $consulta->execute();

        }

        $consulta = $db->con()->prepare("SELECT nfce.id, nfce.status, nfce.ref, nfce.serie from nfce where id_pedido = '$id' and tipo_pedido = '$tipo' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getPedidosAnalytcs',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $data_incial = (isset($data->data_incial)) ? $data->data_incial : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT taxa_entrega, valor_total, bairro, cidade, data_finalizacao,
        cancelado, retira_local, desconto, cupom, cupom_fidelidade, plataforma, ifood, consumacao, tipo,
        entrada, data_agendamento from pedido where data_finalizacao BETWEEN '$data_incial' and '$data_final' and
        fechamento_muitos = 'false' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getPedidosAnalytcsFormas',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $data_incial = (isset($data->data_incial)) ? $data->data_incial : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT parcial_pedido.*, cancelado, tipo, ifood
        from pedido inner join parcial_pedido on parcial_pedido.id_pedido = pedido.id
        where data_finalizacao BETWEEN '$data_incial' and '$data_final' and
        fechamento_muitos = 'false' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->get(
    '/getAdicionalEtapa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao,
         COALESCE(sabor.valor, adicional.valor) as valor, sabor.id as id_sabor from sabor inner join adicional
       on sabor.id_adicional = adicional.id where sabor.id_produto = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAgendamentosPorMes/:mes/:ano',
    function ($mes, $ano) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT agendamento.*, cliente.nome from agendamento
       inner join cliente on agendamento.id_cliente = cliente.id where
       EXTRACT(month from data_inicio) = '$mes' and EXTRACT(year from data_inicio) = '$ano'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAgendamentosPorId/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from agendamento where id = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosGeral',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto order by nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getProdutosGrupoImpressao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, categoria_produto.descricao as categoria,
      g1.grupo as grupo1, g2.grupo as grupo2  from
      produto left join categoria_produto on produto.id_categoria = categoria_produto.id
      left join grupo_impressao as g1 on produto.id_grupo_impressao = g1.id
      left join grupo_impressao as g2 on produto.id_grupo_impressao2 = g2.id
      where produto.cancelado = 'false' and produto.id_empresa = '$id' order by produto.nome

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEntradasSaidas/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from entrada_saida_caixa where id_caixa = '$id' order by data_entrada_saida DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEntradasSaidasUsuario/:id/:id_usuario',
    function ($id, $id_usuario) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from entrada_saida_caixa where id_caixa = '$id'
       and id_usuario = '$id_usuario' order by data_entrada_saida DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUsuariosCaixa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT usuario.*, caixa_usuario.data_abertura, caixa_usuario.valor_inicial from caixa_usuario inner join
       usuario on caixa_usuario.id_usuario = usuario.id where id_caixa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getWhatsappCadastro',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from whatsapp_cadastro

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getWhatsappRegistro/:acao',
    function ($acao) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT numero from whatsapp_registro WHERE
       TIMESTAMPDIFF(MINUTE, data_acao, '$datetime') < 30 and acao = '$acao'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/carregarCaixaUsuario/:id/:id_usuario',
    function ($id, $id_usuario) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT caixa_usuario.* from caixa_usuario inner join caixa
       on caixa_usuario.id_caixa = caixa.id where caixa_usuario.id_caixa = '$id' and caixa_usuario.id_usuario = '$id_usuario'


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosFidelidade/:id/:id_empresa',
    function ($id, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select fidelidade from pedido where id_cliente = '$id' and fidelidade = 'true' and id_empresa = '$id_empresa'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getMeusCupons/:id/:id_empresa',
    function ($id, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cupom_fidelidade where id_cliente = '$id' and id_empresa = '$id_empresa' order by ativo DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUsuarios/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from usuario where id_empresa = '$id' and ativo = 'true'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUsuariosTodos',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from usuario order by ativo DESC, usuario

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTodosUsuarios',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from usuario order by usuario

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/zerarSequenciaPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("update empresa set sequencia_pedido = 0 where id = '$id'
       ");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->get(
    '/checarAvaliacaoCliente/:id_cliente/:id_empresa',
    function ($id_cliente, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select id from pedido where id_empresa = '$id_empresa' and id_cliente = '$id_cliente'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/checarProdutoDisponivel/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from produto where disponivel = 'true' and id = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getAvaliacoesWeb/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select avaliacao.id as id, media, cliente.nome, avaliacao.data, comentario, resposta,
       sabor, entrega, custo_beneficio, embalagem from avaliacao, cliente where
       avaliacao.id_cliente = cliente.id and avaliacao.id_empresa = '$id' order by data desc

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAvaliacoes/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select media, cliente.nome, avaliacao.data, comentario, resposta from avaliacao, cliente where
       avaliacao.id_cliente = cliente.id and avaliacao.id_empresa = '$id' order by avaliacao.id desc

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAvaliacoesAutoAtendimento/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from avaliacao_auto_atendimento where
       id_empresa = '$id' order by id DESC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAvaliacoesCliente/:id/:id_empresa',
    function ($id, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from avaliacao where id_cliente = '$id' and id_empresa = '$id_empresa'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosImagem/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select produto.id, produto.nome, produto.imagem, empresa.descricao as descricao_empresa, tempo_entrega
       from  produto, empresa
       where produto.id_empresa = '$id' and empresa.id = produto.id_empresa
       and cancelado = 'false' and produto.imagem is not null and produto.imagem <> ''
       order by RAND() LIMIT 5


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getDadosImpressao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from pedido where id = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT pedido.data_pedido, pedido.numero_pedido,
       cliente.nome as cliente_nome, pedido.desconto,
       pedido.endereco, pedido.numero, pedido.complemento, pedido.bairro,
       pedido.forma_pagamento, pedido.troco, pedido.retira_local,
       pedido.taxa_entrega, pedido.valor_total, pedido.observacao,
       produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
       pedido_produto.observacao as observacao_produto, pedido.referencia, cliente.telefone,
       pedido_produto.valor_produto as valor, pedido_produto.quantidade from pedido, pedido_produto, cliente,
       produto where
       pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id and pedido.id_cliente = cliente.id
       and pedido_produto.id_pedido = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.descricao,
       adicional_produto_pedido.valor_adicional as valor,
       adicional_produto_pedido.texto_observacao
       from adicional, produto, pedido, adicional_produto_pedido where
       adicional_produto_pedido.id_adicional = adicional.id and
       adicional_produto_pedido.id_produto = produto.id and
       adicional_produto_pedido.id_pedido = pedido.id and
       adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
       adicional_produto_pedido.sequencia = '$sequencia_produto'

       ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }
        echo json_encode($list);

    }
);

$app->get(
    '/getProdutosImagem2/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select empresa.descricao as descricao_empresa, tempo_entrega
       from  empresa where id = '$id'



       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalProdutoPedidoUnico/:id/:id_produto/:sequencia',
    function ($id, $id_produto, $sequencia) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
       adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
       from adicional, produto, pedido, adicional_produto_pedido where
       adicional_produto_pedido.id_adicional = adicional.id and
       adicional_produto_pedido.id_produto = produto.id and
       adicional_produto_pedido.id_pedido = pedido.id and
       adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
       adicional_produto_pedido.sequencia = '$sequencia'



       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getImagemEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from imagem_tela_principal where id_empresa = '$id' and ativo = 'true'



      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getIpServidor/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');
        $id_maquina = uniqid();
        $consulta = $db->con()->prepare("select * from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $list[0]['id_maquina'] = $id_maquina;
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosApp/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, produto.calculo_quantidade,
       produto.valor, categoria_produto.descricao as categoria, produto.imagem, produto.disponivel
       from categoria_produto, produto
       where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
       and cancelado = 'false' and categoria_produto.descricao <> 'Promoção'
       order by categoria, produto.valor

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getNotificacoes/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select numero_pedido, id, cancelado, data_transporte, data_visualizacao, notificacao_cancelado, notificacao_visualizacao, notificacao_transporte from pedido where
       ((data_visualizacao is not null and notificacao_visualizacao is null) or (notificacao_transporte is null and data_transporte is not null) or (cancelado = 'true' and notificacao_cancelado is null)) and
       id_cliente = '$id' and pedido.status <> 'Finalizado'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode(array("list" => $list));
        } else {
            echo 'vazio';
        }

    }
);

$app->get(
    '/getPedidoNotificacao2/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from pedido

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/apagarClienteAdmin/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select id from pedido where id_cliente = '$id'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo "existe";
        } else {
            $consulta = $db->con()->prepare("DELETE from cliente
         where id = '$id'

         ");
            if ($consulta->execute()) {
                echo "ok";
            } else {
                echo "falha";
            }
        }
    }
);

$app->get(
    '/getPedidosArray/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT parcial_pedido.*, pedido.*,
       parcial_pedido.forma_pagamento as forma_pagamento, cliente.nome from parcial_pedido
   inner join pedido on parcial_pedido.id_pedido = pedido.id
   left join cliente on pedido.id_cliente = cliente.id where parcial_pedido.id_pedido in ($id)
   order by id_pedido

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/getPedidosControleFiscal',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.cancelado, pedido.data_pedido, ifood, pedido.tipo,
        (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
      where parcial_pedido.id_pedido = pedido.id) as forma_pagamento,
      pedido.valor_total from pedido

       where pedido.data_pedido BETWEEN '$data_inicio' and '$data_final'
        and pedido.status = 'Finalizado'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getArquivo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("SELECT arquivo from whatsapp_cadastro where id = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/getPedidosControleFiscalV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.cancelado, pedido.data_pedido, ifood, pedido.tipo,
        (SELECT GROUP_CONCAT(parcial_pedido.forma_pagamento SEPARATOR ', ') FROM parcial_pedido
      where parcial_pedido.id_pedido = pedido.id) as forma_pagamento,
      pedido.valor_total, nfce.ref, nfce.chave_nfe as chave, nfce.caminho_danfe, nfce.data_nfce,
      nfce.caminho_xml_nota_fiscal, nfce.desconto, nfce.valor_bruto, nfce.valor_liquido,nfce.status   from pedido
      left join nfce on nfce.id_pedido = nfce.id
      where pedido.data_pedido BETWEEN '$data_inicio' and '$data_final'
        and pedido.status = 'Finalizado'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getPedidosVendedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";

        $consulta = $db->con()->prepare("SELECT pedido.valor_total, pedido.desconto,
        DATE_FORMAT(pedido.data_pedido, '%m/%d/%Y %H:%i') as data_pedido, pedido.vendedor, pedido.porcentagem_vendedor, cliente.nome from pedido
        left join cliente on pedido.id_cliente = cliente.id
        where vendedor is not null and vendedor <> '' and data_pedido BETWEEN
        '$data_inicio' and '$data_final' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getNFCeIntervaloData',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT * from nfce where data_nfce BETWEEN '$data_inicio' and '$data_final'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/apagarBairro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("select id from bairro_empresa where id_bairro = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode("existe");
        } else {
            $consulta = $db->con()->prepare("DELETE from bairro
       where id = '$id'

       ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        }
    }
);

$app->post(
    '/getMovimentoEstoqueRelatorio',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $buscaTipo = (isset($data->buscaTipo)) ? $data->buscaTipo : "";
        $produto = (isset($data->produto)) ? $data->produto : "";
        $complemento1 = (isset($data->complemento1)) ? $data->complemento1 : "";
        $complemento2 = (isset($data->complemento2)) ? $data->complemento2 : "";

        $consulta = $db->con()->prepare("SELECT adicional.descricao, adicional_produto_pedido.id_adicional,
       SUM(adicional_produto_pedido.valor_adicional) as valor_adicional,
      SUM(adicional_produto_pedido.quantidade) as quantidade,
      CASE
    WHEN extra = 'false' THEN 'item'
    WHEN extra = 'true' THEN 'adicional'
    END as extra
       FROM adicional_produto_pedido inner join pedido
      on adicional_produto_pedido.id_pedido = pedido.id
      inner join produto on adicional_produto_pedido.id_produto = produto.id
      inner join adicional on adicional_produto_pedido.id_adicional = adicional.id
      where pedido.data_finalizacao BETWEEN '$data_inicio' and '$data_final' and
      pedido.cancelado = 'false' and adicional_produto_pedido.id_produto = '$produto'"
            . $complemento1 . $complemento2 . "
      GROUP BY adicional_produto_pedido.id_adicional ORDER BY adicional.descricao

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/atualizarStatusSugestaoMesaPorId',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = '$status'
       where id = '$id' and id_empresa = '$id_empresa'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarValorSabor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_sabor = (isset($data->id_sabor)) ? $data->id_sabor : "";
        $valor = (isset($data->valor)) ? $data->valor : "";

        $consulta = $db->con()->prepare("UPDATE sabor set valor = '$valor'
      where id = '$id_sabor'");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarProdutoModoEdicao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nome = (isset($data->nome)) ? $data->nome : "";
        $descricao = (isset($data->descricao)) ? $data->descricao : "";
        $ean = (isset($data->ean)) ? $data->ean : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $id_categoria = (isset($data->id_categoria)) ? $data->id_categoria : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $tipo_produto = (isset($data->tipo_produto)) ? $data->tipo_produto : "";

        $consulta = $db->con()->prepare("UPDATE produto set nome = '$nome', descricao = '$descricao',
      ordem = '$ordem', valor = '$valor', id_categoria = '$id_categoria',
      tipo = '$tipo', tipo_produto = '$tipo_produto'
     where id = '$id'");
        $consulta->execute();
        $consulta = $db->con()->prepare("UPDATE produto_fiscal set ean = '$ean'
     where id_produto = '$id'");
        $consulta->execute();
        echo json_encode($id_categoria);

    }
);

$app->post(
    '/atualizarPedidoComandaMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";
        $comandaAntiga = (isset($data->comandaAntiga)) ? $data->comandaAntiga : "";
        $mesaAntiga = (isset($data->mesaAntiga)) ? $data->mesaAntiga : "";
        $consulta = $db->con()->prepare("UPDATE pedido set nome_mesa = '$nome_mesa',
        nome_mesa2 = '$nome_mesa2'
        where id = '$id'

        ");
        $consulta->execute();

        if (isset($nome_mesa)) {
            $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado'
          where sugestao = '$nome_mesa' and mesa = 'true'

          ");
            $consulta->execute();
        }

        if (isset($nome_mesa2)) {
            $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado'
          where sugestao = '$nome_mesa2' and mesa = 'false'

          ");
            $consulta->execute();
        }

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' WHERE
        sugestao in (SELECT nome_mesa from pedido WHERE
          pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'true'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' WHERE
        sugestao in (SELECT nome_mesa2 from pedido WHERE
          pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'false'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto' WHERE
       sugestao not in (SELECT nome_mesa from pedido WHERE
         pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'true'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto' WHERE
       sugestao not in (SELECT nome_mesa2 from pedido WHERE
         pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'false'");
        $consulta->execute();

        echo json_encode("ok");

    }
);

$app->post(
    '/refreshMesaComnada',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' WHERE
        sugestao in (SELECT nome_mesa from pedido WHERE
          pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'true'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'ocupado' WHERE
        sugestao in (SELECT nome_mesa2 from pedido WHERE
          pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'false'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto' WHERE
       sugestao not in (SELECT nome_mesa from pedido WHERE
         pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'true'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto' WHERE
       sugestao not in (SELECT nome_mesa2 from pedido WHERE
         pedido.cancelado = 'false' and pedido.status = 'Orçamento')
      and mesa = 'false'");
        $consulta->execute();

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarStatusPedidoComandaMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $nome_mesa2 = (isset($data->nome_mesa2)) ? $data->nome_mesa2 : "";

        if (isset($nome_mesa)) {
            $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto'
          where sugestao = '$nome_mesa'

          ");
            $consulta->execute();
        }

        if (isset($nome_mesa2)) {
            $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = 'aberto'
          where sugestao = '$nome_mesa2'

          ");
            $consulta->execute();
        }

        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarStatusSugestaoMesa',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $id_referencia = (isset($data->id_referencia)) ? $data->id_referencia : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $consulta = $db->con()->prepare("UPDATE sugestao_mesa set status = '$status'
       where id_referencia = '$id_referencia' and id_empresa = '$id_empresa'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/fecharComanda',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("UPDATE comanda set status = 'finalizado'
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarParcialComanda',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $consulta = $db->con()->prepare("DELETE from parcial_pedido
       where id = '$id' ");

        $dadosHistorico = new stdClass();
        $dados->usuario = $usuario;
        $dados->id_pedido = $id;
        $dados->tipo = $tipo_pedido;
        $dados->evento = "Usuário " . $usuario . " apagou a forma de pagamento id: " . $id;
        salvarHistoricoPedido($dados, $app, $db);

        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarTodosParcialPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from parcial_pedido
       where id_pedido = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarEntradaSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from entrada_saida_caixa
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarComanda',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from comanda
       where id = '$id'

       ");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("DELETE from parcial_comanda
         where id_comanda = '$id'

         ");
            $consulta->execute();
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarAdicionalProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from adicional_produto
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarEtapaProduto/:id/:numero/:id_produto',
    function ($id, $numero, $id_produto) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from etapa_produto
       where id = '$id'

       ");
        if ($consulta->execute()) {
            $consulta = $db->con()->prepare("update etapa_produto set numero = numero - 1
         where id_produto = '$id_produto' and numero > '$numero'

         ");
            $consulta->execute();
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarTextoHorario/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from texto_horario_funcionamento
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->post(
    '/apagarCategoria',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("select id from produto where id_categoria = '$id'
        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("DELETE from categoria_produto
         where id = '$id'

         ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/apagarFornecedor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("select id from movimentacao_estoque where id_fornecedor = '$id'
        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("DELETE from fornecedor
         where id = '$id'

         ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/apagarUnidadeEntradaSaida',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("select id from produto where id_categoria = '$id'
        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (true) {
            $consulta = $db->con()->prepare("DELETE from unidades_entrada_saida
         where id = '$id'

         ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        } else {
            echo json_encode("existe");
        }

    }
);

$app->post(
    '/setMonteProdutoFalse/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("update produto set monte_produto = 'false'
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->post(
    '/apagarPromocao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from promocao
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->post(
    '/deleteBairroEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from bairro_empresa
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->post(
    '/apagarHorario/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from horario_funcionamento
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from produto
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/cancelarProduto',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("SELECT id from produtos_composicao where id_materia_prima = '$id' ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode("existe_composicao");
        } else {
            $consulta = $db->con()->prepare("UPDATE produto set cancelado = 'true'
       where id = '$id'
       ");
            if ($consulta->execute()) {
                echo json_encode("ok");
            } else {
                echo json_encode("falha");
            }
        }

    }
);

$app->post(
    '/setDisponivel',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $consulta = $db->con()->prepare("UPDATE produto set disponivel = '$status'
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/setBebidaAlcoolica',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $bebida_alcoolica = (isset($data->bebida_alcoolica)) ? $data->bebida_alcoolica : "";
        $consulta = $db->con()->prepare("UPDATE produto set bebida_alcoolica = '$bebida_alcoolica'
     where id = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/apagarAdicional/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from adicional
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarFormaPagamento/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from forma_pagamento
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/apagarTaxaEntrega/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("DELETE from taxa_entrega
       where id = '$id'
       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/setStatusPedido/:status/:id',
    function ($status, $id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $s = $status;
        if ($status == 1) {
            $status = "Em transporte";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_transporte = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 2) {
            $status = "Finalizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_finalizacao = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 0) {
            $status = "Visualizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_visualizacao = '$datetime'
          where id = '$id'
          ");
        }
        if ($consulta->execute()) {
            if ($s == 1 || $s == 0) {
                enviarNotificacaoPedido($app, $db, $id, $s);
            }

            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/setStatusPedidoV2',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $data = json_decode($app->request()->getBody());
        $status = (isset($data->status)) ? $data->status : "";
        $id = (isset($data->id)) ? $data->id : "";
        if ($status == 1) {
            $status = "Em transporte";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_transporte = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 2) {
            $status = "Finalizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_finalizacao = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 0) {
            $status = "Visualizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_visualizacao = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 5) {
            $status = "Aguardando entregador - retira";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_aguardando_entregador_retira = '$datetime'
          where id = '$id'
          ");
        }
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->get(
    '/setStatusPedido2/:status/:id',
    function ($status, $id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        if ($status == 1) {
            $status = "Em transporte";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_transporte = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 2) {
            $status = "Finalizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_finalizacao = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 0) {
            $status = "Visualizado";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_visualizacao = '$datetime'
          where id = '$id'
          ");
        } else if ($status == 5) {
            $status = "Aguardando entregador - retira";
            $consulta = $db->con()->prepare("UPDATE pedido set status = '$status',
          data_aguardando_entregador_retira = '$datetime'
          where id = '$id'
          ");
        }
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/getPedidoFiltro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";
        $origem = (isset($data->origem)) ? $data->origem : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        if ($tipo == "Finalizado") {
            $comp1 = " and status = 'Finalizado' and cancelado = 'false'";
        } else {
            $comp1 = " and cancelado = 'true'";
        }

        if ($dia_semana != "Todos") {
            if ($dia_semana == "Sabado") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 7";
            } else if ($dia_semana == "Domingo") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 1";
            } else if ($dia_semana == "Segunda-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 2";
            } else if ($dia_semana == "Terça-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 3";
            } else if ($dia_semana == "Quarta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 4";
            } else if ($dia_semana == "Quinta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 5";
            } else if ($dia_semana == "Sexta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 6";
            }
        } else {
            $comp2 = "";
        }

        if ($bairro == "Todos") {
            $comp3 = "";
        } else {
            $comp3 = " and pedido.bairro = '$bairro'";
        }

        if ($origem == "Aplicativo") {
            $comp4 = " and pedido.tipo = 'app'";
        } else if ($origem == "Gerencial") {
            $comp4 = " and pedido.tipo = 'gerencial'";
        } else if ($origem == "Link Aplicativo") {
            $comp4 = " and pedido.tipo = 'link app'";
        } else {
            $comp4 = "";
        }

        $consulta = $db->con()->prepare(
            "SELECT pedido.id as id, pedido.valor_total, pedido.forma_pagamento, pedido.nome_mesa, pedido.tipo,
       pedido.taxa_entrega,desconto,DAYOFWEEK(pedido.data_pedido) as semana, DATE_FORMAT(pedido.data_pedido,'%d/%m/%Y %H:%i') as data,
       empresa.valor_pedido as valor_aplicativo, cliente.nome as cliente, pedido.bairro, pedido.tipo, pedido.endereco, pedido.numero, pedido.complemento,
       pedido.cidade, pedido.estado, pedido.referencia
       from pedido left join cliente on pedido.id_cliente = cliente.id
       inner join empresa on pedido.id_empresa = empresa.id where  pedido.id_empresa = '$id_empresa' and
       pedido.data_pedido between '$data_inicio' and '$data_final'" . $comp1 . $comp2 . $comp3 . $comp4

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getUaiGestorDiaSemana',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare(
            "SELECT count(pedido.id) as quantidade, sum(pedido.valor_total) as valor_total,sum(pedido.taxa_entrega) as taxa_entrega,
       sum(desconto) as desconto, DAYOFWEEK(pedido.data_pedido) as data
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id_empresa' and tipo = 'gerencial' and
       pedido.data_pedido between '$data_inicio' and '$data_final'
       and status = 'Finalizado' and cancelado = 'false' group by DAYOFWEEK(pedido.data_pedido)
       order by valor_total desc"

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getUaiGestorBairro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $campo = (isset($data->campo)) ? $data->campo : "";

        if ($campo == "Quantidade") {
            $order = 'quantidade';
        } else if ($campo == "Valor Total") {
            $order = "valor_total";
        }

        $consulta = $db->con()->prepare(
            "SELECT count(pedido.id) as quantidade, sum(pedido.valor_total) as valor_total,sum(pedido.taxa_entrega) as taxa_entrega, sum(desconto) as desconto, pedido.bairro
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id_empresa' and
       tipo = 'gerencial' and
       pedido.data_pedido between '$data_inicio' and '$data_final' and status = 'Finalizado' and cancelado = 'false' group by pedido.bairro
       order by $order desc"

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getUaiGestorCliente',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $campo = (isset($data->campo)) ? $data->campo : "";

        if ($campo == "Quantidade") {
            $order = 'quantidade';
        } else if ($campo == "Valor Total") {
            $order = "valor_total";
        }

        $consulta = $db->con()->prepare(
            "SELECT count(pedido.id) as quantidade,
        sum(pedido.valor_total) as valor_total,sum(pedido.taxa_entrega) as taxa_entrega, sum(desconto) as desconto,
        cliente.telefone, cliente.nome
        from pedido inner join empresa on pedido.id_empresa = empresa.id
        left join  cliente on pedido.id_cliente = cliente.id where
        pedido.id_empresa = '$id_empresa' and
        tipo = 'gerencial' and
        pedido.data_pedido between '$data_inicio' and '$data_final' and status = 'Finalizado' and cancelado = 'false' group by cliente.nome
        order by $order desc"

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getUaiGestorSemanaMes',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare(
            "SELECT count(pedido.id) as quantidade, sum(pedido.valor_total) as valor_total,sum(pedido.taxa_entrega) as taxa_entrega,
       sum(desconto) as desconto, WEEK(pedido.data_pedido) - WEEK(DATE_FORMAT('$datetime' , '%Y-%m-01')) + 5 as semana
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id_empresa' and
       tipo = 'gerencial' and
       pedido.data_pedido between '$data_inicio' and '$data_final' and status = 'Finalizado' and cancelado = 'false' group by WEEK(pedido.data_pedido)
       order by WEEK(pedido.data_pedido) - WEEK(DATE_FORMAT('$datetime' , '%Y-%m-01')) + 5"

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getProdutoFiltro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $data_inicio = (isset($data->data_inicio)) ? $data->data_inicio : "";
        $data_final = (isset($data->data_final)) ? $data->data_final : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
        $dia_semana = (isset($data->dia_semana)) ? $data->dia_semana : "";
        $produto = (isset($data->produto)) ? $data->produto : "";
        $origem = (isset($data->origem)) ? $data->origem : "";
        $agrupar = (isset($data->agrupar)) ? $data->agrupar : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        if ($tipo == "Finalizado") {
            $comp1 = " and pedido.status = 'Finalizado' and pedido.cancelado = 'false'";
        } else {
            $comp1 = " and pedido.cancelado = 'true'";
        }

        if ($dia_semana != "Todos") {
            if ($dia_semana == "Sabado") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 7";
            } else if ($dia_semana == "Domingo") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 1";
            } else if ($dia_semana == "Segunda-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 2";
            } else if ($dia_semana == "Terça-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 3";
            } else if ($dia_semana == "Quarta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 4";
            } else if ($dia_semana == "Quinta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 5";
            } else if ($dia_semana == "Sexta-Feira") {
                $comp2 = " and DAYOFWEEK(data_pedido) = 6";
            }
        } else {
            $comp2 = "";
        }

        if ($bairro == "Todos") {
            $comp3 = "";
        } else {
            $comp3 = " and pedido.bairro = '$bairro'";
        }

        if ($produto == "Todos") {
            $comp4 = "";
        } else {
            $comp4 = " and produto.nome = '$produto'";
        }

        if ($origem == "Aplicativo") {
            $comp5 = " and pedido.tipo = 'app'";
        } else if ($origem == "Gerencial") {
            $comp5 = " and pedido.tipo = 'gerencial'";
        } else if ($origem == "Link Aplicativo") {
            $comp5 = " and pedido.tipo = 'link app'";
        } else {
            $comp5 = "";
        }

        if (!$agrupar == true) {
            $consulta = $db->con()->prepare("SELECT produto.nome as produto, DATE_FORMAT(pedido.data_pedido,'%Y-%m/%d') as data, cliente.nome as cliente, pedido.bairro,
          pedido_produto.valor_produto as valor, pedido_produto.quantidade
          from pedido, produto, pedido_produto, cliente, empresa where pedido.id_cliente = cliente.id and pedido.id_empresa = empresa.id
          and pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id and pedido.id_empresa = '$id_empresa' and
          pedido.data_pedido between '$data_inicio' and '$data_final'" . $comp1 . $comp2 . $comp3 . $comp4 . $comp5 . " order by produto.nome");
        } else {
            $consulta = $db->con()->prepare("SELECT sum(pedido_produto.quantidade) as quantidade, produto.nome as produto, DATE_FORMAT(pedido.data_pedido,'%Y-%m/%d') as data,
         cliente.nome as cliente, pedido.bairro,
         sum(pedido_produto.valor_produto) as valor, pedido_produto.valor_produto as valor_produto
         from pedido, produto, pedido_produto, cliente, empresa where pedido.id_cliente = cliente.id and pedido.id_empresa = empresa.id
         and pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id and pedido.id_empresa = '$id_empresa' and
         pedido.data_pedido between '$data_inicio' and '$data_final'" . $comp1 . $comp2 . $comp3 . $comp4 . $comp5 . " group by produto.nome order by quantidade DESC, produto.nome");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getBairrosPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select DISTINCT pedido.bairro as bairro from pedido where id_empresa = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getAdicionais/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from
       adicional where id_empresa = '$id' and extra = 'true' order by descricao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getTodosAdicionais/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from
       adicional where id_empresa = '$id'  order by descricao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getAvaliacaoAutoAtendimentoPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from avaliacao_auto_atendimento where id_pedido = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getTudo/:tabela/:id_empresa',
    function ($tabela, $id_empresa) use ($app, $db) {
        if ($tabela == 'adicional_produto' || $tabela == "sabor") {
            $comp = "";
        } else if ($tabela == "empresa") {
            $comp = " where id = '$id_empresa'";
        } else {
            $comp = " where id_empresa = '$id_empresa'";
        }

        $consulta = $db->con()->prepare(
            "select * from
       $tabela" . $comp
        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getTabelaGenerico/:tabela/:id',
    function ($tabela, $id) use ($app, $db) {

        $consulta = $db->con()->prepare(
            "select id from
       $tabela where id = '$id'"
        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getItens/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from
       adicional where id_empresa = '$id' and extra = 'false' order by descricao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getGruposImpressao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from grupo_impressao where id_empresa = '$id' order by grupo

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/testeData',
    function () use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');
        echo $datetime;
    }
);

$app->get(
    '/getPromocoesDia/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
       produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria, produto.a_partir,
       produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
       from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and empresa.ativo = 'true' and
       empresa.id = promocao.id_empresa and
       produto.id_categoria = categoria_produto.id and  (DAYOFWEEK('$datetime') = dia_semana or DATE_FORMAT(now(),'%Y-%m-%d') = promocao.data_promocao or promocao.fixo = 'true' )
       and promocao.id_empresa = '$id' and
       promocao.ativo = 'true'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPromocoesEmpresa/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT
       promocao.id_empresa as id, promocao.id as id_promocao, promocao.valor_promocao, produto.descricao, empresa.logo, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
       from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
       empresa.id = promocao.id_empresa and
       produto.id_categoria = categoria_produto.id and DAYOFWEEK('$datetime') = dia_semana and
       promocao.ativo = 'true' and promocao.id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getDetalhesCaixa/:id/:id_empresa',
    function ($id, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select
       caixa.id as id, sum(parcial_pedido.valor) as valor, parcial_pedido.forma_pagamento, pedido.desconto from parcial_pedido, pedido, caixa WHERE
       parcial_pedido.id_pedido = pedido.id and pedido.id_caixa = caixa.id and pedido.id_caixa = '$id' and pedido.status = 'Finalizado' and pedido.id_empresa = '$id_empresa' and
       pedido.cancelado = 'false' group by parcial_pedido.forma_pagamento

       ");
        $consulta->execute();
        $list['formas'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT sum(valor) as valor, forma_pagamento from entrada_saida_caixa where id_caixa = '$id' and
       tipo = 'Entrada' group by forma_pagamento

       ");
        $consulta->execute();
        $list['formas_entrada_saida'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT sum(valor) as valor, forma_pagamento from entrada_saida_caixa where id_caixa = '$id' and
       tipo = 'Saída' group by forma_pagamento

       ");
        $consulta->execute();
        $list['formas_saida'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT sum(valor) as valor, tipo from entrada_saida_caixa where id_caixa = '$id' group by tipo

       ");
        $consulta->execute();
        $list['entrada_saida'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("select DATE_FORMAT(data_abertura, '%d/%m/%Y %H:%i') as data_abertura, caixa.valor_inicial, DATE_FORMAT(data_fechamento, '%d/%m/%Y %H:%i') as data_fechamento,
        sum(pedido.valor_total + (pedido.valor_total * pedido.porcentagem_garcom / 100)) as valor_total, sum(pedido.desconto) as desconto,
        sum(pedido.valor_total * pedido.porcentagem_garcom / 100) as porcentagem_garcom,
        caixa.status FROM pedido, caixa where pedido.id_caixa = caixa.id and pedido.id_caixa = '$id' and pedido.status = 'Finalizado'
        and pedido.cancelado = 'false' and tipo = 'gerencial'

        ");
        $consulta->execute();
        $list['valores'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPromocoesGeral',
    function () use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT
       promocao.id_empresa as id, promocao.valor_promocao, produto.descricao, empresa.logo, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
       from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
       empresa.id = promocao.id_empresa and
       produto.id_categoria = categoria_produto.id and DAYOFWEEK('$datetime') = dia_semana and empresa.ativo = 'true' and
       promocao.ativo = 'true' and promocao.id_empresa <> 1 and promocao.id_empresa <> 2 and (promocao.id > 21 or promocao.id < 15)
       order by RAND()
       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/setNullImagemNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("UPDATE produto set imagem = null where id = '$id'

        ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarFotoProdutoNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $imagem = (isset($data->imagem)) ? $data->imagem : "";
        $consulta = $db->con()->prepare("UPDATE produto set imagem = '$imagem' where id = '$id'

        ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarStatusNFCE',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        $status_sefaz = (isset($data->status_sefaz)) ? $data->status_sefaz : "";
        $consulta = $db->con()->prepare("UPDATE nfce set status = '$status',
        status_sefaz = '$status_sefaz' where id = '$id'

        ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarGrupoImpressao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE produto set id_grupo_impressao = null where id_grupo_impressao = '$id'
       ");
        $consulta->execute();
        $consulta = $db->con()->prepare("DELETE from grupo_impressao
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }

    }
);

$app->post(
    '/apagarPromocaoNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from promocao
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarTabelaGenerico',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tabela = (isset($data->tabela)) ? $data->tabela : "";
        $consulta = $db->con()->prepare("DELETE from " . $tabela . "
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarWhatsappCadastro',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from whatsapp_cadastro
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->get(
    '/getPromocoesEmpresaGerencial/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao, promocao.data_promocao, promocao.fixo,
       promocao.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, produto.nome, produto.a_partir,
       produto.descricao, produto.valor as valor_produto
       from promocao,  produto, empresa where promocao.id_produto = produto.id and
       empresa.id = promocao.id_empresa and
       promocao.id_empresa = '$id'


       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosIntervalo/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
       left join cliente on pedido.id_cliente = cliente.id
       where (status = 'Finalizado' or status = 'cancelado') and
       data_pedido BETWEEN '$dataInicial' and '$dataFinal' and
       pedido.fechamento_muitos = 'false'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/verificarNFCeAguardando',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT id from nfce where status = 'aguardando' and
        EXTRACT(MONTH from '$datetime') = EXTRACT(MONTH from data_nfce)
        and EXTRACT(YEAR from '$datetime') = EXTRACT(YEAR from data_nfce) ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/verificarNFCeContingencia',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("SELECT id, chave_nfe from nfce where status = 'contingencia'
        and TIMESTAMPDIFF(HOUR, data_nfce , '$datetime') >= 24 ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getNFCeIntervalo/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from nfce where
      data_nfce BETWEEN '$dataInicial' and '$dataFinal' order by ref");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getNFCeIntervaloFormaPagamento/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT nfce_forma_pagamento.* from nfce_forma_pagamento inner join nfce on nfce_forma_pagamento.id_nfce = nfce.id where
    data_nfce BETWEEN '$dataInicial' and '$dataFinal' order by ref");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getNFCeIntervaloFormaPagamentoGrupo/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT SUM(valor_pagamento) as valor, forma_pagamento from nfce_forma_pagamento inner join nfce on nfce_forma_pagamento.id_nfce = nfce.id where
    data_nfce BETWEEN '$dataInicial' and '$dataFinal' and nfce.status = 'autorizado' group by forma_pagamento");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/buscarDiferencaPagamento',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT
        id_pedido,
    valor_liquido,
    data_nfce,
        COUNT(id_pedido) as contagem,
            sum(valor_liquido) as valor,
            nfce_forma_pagamento.forma_pagamento as forma_principal,
    GROUP_CONCAT(nfce_forma_pagamento.forma_pagamento) as forma_pagamento,
GROUP_CONCAT(nfce_forma_pagamento.valor_pagamento) as forma_pagamento_valor,
    sum(valor_liquido) - valor_liquido as diferenca
    FROM
        nfce
    inner join nfce_forma_pagamento on nfce_forma_pagamento.id_nfce = nfce.id
    where nfce.data_nfce >= '2023-03-01'
    GROUP BY id_pedido
    HAVING COUNT(id_pedido) > 1");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getNFCeItem/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT nfce.ref, nfce.data_nfce, nfce_item.codigo_produto,nfce_item.descricao,nfce_item.numero_item,nfce_item.valor_bruto,
      nfce_item.cfop,nfce_item.codigo_ncm, icms_situacao_tributaria, nfce_item.quantidade_comercial, nfce_item.valor_bruto from nfce_item
      INNER JOIN nfce on (nfce.id = nfce_item.id_nfce)
      where data_nfce BETWEEN '$dataInicial' and '$dataFinal' order by ref");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getProdutoNfceIntervalo/:dataInicial/:dataFinal',
    function ($dataInicial, $dataFinal) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT sum(nfce_item.quantidade_comercial) as quantidade, descricao from nfce_item
      inner join nfce on nfce_item.id_nfce = nfce.id
      where nfce.data_nfce BETWEEN '$dataInicial' and '$dataFinal'
      and nfce.status = 'autorizado' group by (nfce_item.descricao)
      order by nfce_item.descricao

    ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosEntregador/:dataInicial/:id_entregador',
    function ($dataInicial, $id_entregador) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
       left join cliente on pedido.id_cliente = cliente.id
       where id_entregador = '$id_entregador' AND
       data_pedido >= '$dataInicial'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosEntregadorIntervalo/:dataInicial/:dataFinal/:id_entregador',
    function ($dataInicial, $dataFinal, $id_entregador) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
     left join cliente on pedido.id_cliente = cliente.id
     where id_entregador = '$id_entregador' AND
     data_pedido BETWEEN '$dataInicial' and '$dataFinal'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosSemEntregador/:dataInicial',
    function ($dataInicial) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
       inner join cliente on pedido.id_cliente = cliente.id
       where
       pedido.cancelado = 'false' and pedido.id_entregador is null AND
       data_pedido >= '$dataInicial' and pedido.retira_local <> 'true'
       and pedido.retira_local <> true

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosSemEntregadorNovo/:dataInicial/:idEmpresa',
    function ($dataInicial, $idEmpresa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT puxar_pedido_retira_entregador from parametro");
        $consulta->execute();
        $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $parametro = $parametro[0];

        if ($parametro['puxar_pedido_retira_entregador'] == 'true') {
            $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
            inner join cliente on pedido.id_cliente = cliente.id
            where
            pedido.cancelado = 'false' and pedido.id_entregador is null AND
            data_pedido >= '$dataInicial' and pedido.retira_local <> 'true'
            and status <> 'agendado' and status <> 'Aplicativo'
            ");
        } else {
            $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
       inner join cliente on pedido.id_cliente = cliente.id
       where
       pedido.cancelado = 'false' and pedido.id_entregador is null AND
       data_pedido >= '$dataInicial' and pedido.retira_local <> 'true'
       and pedido.retira_local <> true
       and status <> 'agendado' and status <> 'Aplicativo' ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/checarDataImpressaoPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, data_impressao from pedido where id = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPedidosSemEntregadorv2/:dataInicial',
    function ($dataInicial) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set status = 'Em aberto' where
      status = 'agendado' AND status2 = 'aguardando' and tipo = 'app' and
      TIMESTAMPDIFF(MINUTE,'$datetime' , data_agendamento) <= 120 and id_empresa <> '60'");
        $consulta->execute();


        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_pedido, pedido.ifood, pedido.endereco, pedido.data_preparo,
        pedido.data_visualizacao, pedido.data_transporte, pedido.data_finalizacao, pedido.data_aguardando_entregador_retira,
        pedido.numero, pedido.bairro, pedido.cidade, pedido.estado, pedido.complemento, pedido.valor_total as valor_total, pedido.taxa_entrega,
        pedido.data_impressao, pedido.status, pedido.tipo, pedido.referencia_ifood, pedido.desconto, pedido.id_referencia_mesa,
        pedido.retira_local, pedido.delivery, pedido.id_empresa, pedido.data_agendamento, integracao_ifood, pedido.id_cliente,
        pedido.telefone, pedido.id_entregador, pedido.id_caixa, usuario.usuario, cliente.nome, cliente.telefone from pedido
            left join cliente on pedido.id_cliente = cliente.id
            left join usuario on pedido.id_entregador = usuario.id
            where
            pedido.cancelado = 'false' AND
            data_pedido >= '$dataInicial' and status <> 'Orçamento'
            and status <> 'agendado' and status <> 'Aplicativo' and fechamento_muitos = 'false'
            and pedido.status <> 'Finalizado' ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        if(count($list) >= 15){
            $arquivo = fopen('controle.txt', 'a+');
            if ($arquivo == false) {
                die('Não foi possível criar o arquivo.');
            }
            fwrite($arquivo, '( ' . $list[0]['id_empresa'] . ' - ' . count($list) . ' - ' . $dataInicial . ')');
            fclose($arquivo);
        }

        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getPedidosSemEntregadorv2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $dataInicial = (isset($data->dataInicial)) ? $data->dataInicial : "";
        $versao = (isset($data->versao)) ? $data->versao : "";

        $datetime = date_create()->format('Y-m-d H:i:s');
        $consulta = $db->con()->prepare("UPDATE pedido set status = 'Em aberto' where
      status = 'agendado' AND status2 = 'aguardando' and tipo = 'app' and
      TIMESTAMPDIFF(MINUTE,'$datetime' , data_agendamento) <= 120 and id_empresa <> '60'");
        $consulta->execute();

        $consulta = $db->con()->prepare("UPDATE empresa set versao_sistema = '$versao'");
        $consulta->execute();


        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_pedido, pedido.ifood, pedido.endereco, pedido.plataforma, pedido.data_preparo,
        pedido.data_visualizacao, pedido.data_transporte, pedido.data_finalizacao, pedido.data_aguardando_entregador_retira,
        pedido.numero, pedido.bairro, pedido.cidade, pedido.estado, pedido.complemento, pedido.valor_total as valor_total, pedido.taxa_entrega,
        pedido.data_impressao, pedido.status, pedido.tipo, pedido.referencia_ifood, pedido.desconto, pedido.id_referencia_mesa, pedido.observacao,
        pedido.retira_local, pedido.delivery, pedido.id_empresa, pedido.data_agendamento, integracao_ifood, pedido.id_cliente,
        pedido.id_entregador, pedido.id_caixa, usuario.usuario, cliente.nome, cliente.telefone from pedido
            left join cliente on pedido.id_cliente = cliente.id
            left join usuario on pedido.id_entregador = usuario.id
            where
            pedido.cancelado = 'false' AND
            data_pedido >= '$dataInicial' and status <> 'Orçamento'
            and status <> 'agendado' and status <> 'Aplicativo' and fechamento_muitos = 'false'
            and pedido.status <> 'Finalizado' ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        if(count($list) >= 15){
            $arquivo = fopen('controle.txt', 'a+');
            if ($arquivo == false) {
                die('Não foi possível criar o arquivo.');
            }
            fwrite($arquivo, '( ' . $list[0]['id_empresa'] . ' - ' . count($list) . ' - ' . $dataInicial . ')');
            fclose($arquivo);
        }

        echo json_encode($list);
    }
);

$app->post(
    '/imprimirPedidosAReceber',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());        
        $tamanho_papel = (isset($data->tamanho_papel)) ? $data->tamanho_papel : "";
        $impressora = (isset($data->impressora)) ? $data->impressora : "";
        $lista = json_decode(json_encode($data->lista), true);

        $consulta = $db->con()->prepare("SELECT * from parametro");
        $consulta->execute();
        $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);

 $espacoLinhas = 40;
        $GLOBALS['nomeFonte'] = $parametro[0]['impressao_fonte'];
        $GLOBALS['fontNormal'] = $parametro[0]['impressao_peso_fonte_segunda_coluna'];
        $GLOBALS['fontBold'] = $parametro[0]['impressao_peso_fonte_primeira_coluna'];

        $fonte = $parametro[0]['impressao_tamanho_fonte'];
        $segunda_fonte = 16;
        $primeira_posicao = 150;
        $segunda_posicao = $parametro[0]['impressao_segunda_posicao'];
        $terceira_posicao = $parametro[0]['impressao_terceira_posicao'];
        $quebra_linha = $parametro[0]['impressao_quebra_linha'];
        $posicao_centro = $quebra_linha + 5;
        $peso_fonte_produto = $parametro[0]['impressao_peso_fonte_produto'];
        $peso_fonte_adicional = $parametro[0]['impressao_peso_fonte_adicional'];
        $quebra_linha_produto = $parametro[0]['impressao_quebra_linha_produto'];

        $handle = printer_open($impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);

        printer_start_doc($handle, "Print"); // Name Document

        printer_start_page($handle);
        $posicao = 10;  
        
        foreach ($lista as $pedido) {
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            $data_pedido = date('d/m/Y H:i:s', strtotime($pedido['data_pedido']));
            
            printer_draw_text($handle, trim("Data: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($data_pedido), $segunda_posicao, $posicao);              

            $posicao = $posicao + 40;

            $cliente = $pedido['nome'];
            printer_draw_text($handle, trim("Cliente: "), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, trim($cliente), $segunda_posicao, $posicao);
            $nome_pedido_temp = utf8_decode($cliente);
            if (strlen($nome_pedido_temp) >= 25) {
                $t = explode(" ", $nome_pedido_temp);
                $nome_pedido_temp2 = "";
                foreach ($t as $value) {
                    if (strlen($nome_pedido_temp2 . $value . " ") >= 25) {
                        printer_draw_text($handle, $nome_pedido_temp2, $segunda_posicao, $posicao);
                        $posicao = $posicao + 40;
                        $nome_pedido_temp2 = $value . " ";
                    } else {
                        $nome_pedido_temp2 = $nome_pedido_temp2 . $value . " ";
                    }
                }
                printer_draw_text($handle, $nome_pedido_temp2, 10, $posicao);
            } else {
                printer_draw_text($handle, utf8_decode($cliente), $segunda_posicao, $posicao);
            }

            $posicao = $posicao + 40;

            foreach ($pedido['produtos'] as $item) {
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
    
                    $quantidade = $item['quantidade'];
                    $nome_produto = $item['nome'];
                    $nome_produto = sanitizeString($nome_produto);
                    $valor_produto = $item['valor'];
                    $valor_total_produto = $valor_produto * $quantidade;
                    $valor_total_produto = asDollars($valor_total_produto);
                    $valor_produto = asDollars($valor_produto);
                    $observacao_produto = $item['observacao_produto'];                  
                  
    
     $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $peso_fonte_produto, false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($quantidade . "-" . $nome_produto) > $quebra_linha_produto) {
                    $temp = str_split($quantidade . " - " . $nome_produto, $quebra_linha_produto - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                        if ($a == count($temp) - 1) {
                            printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }
    
                } else {
                    printer_draw_text($handle, utf8_decode($quantidade . " - " . $nome_produto), 10, $posicao);
                    printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
    
    foreach ($item['adicional'] as $item2) {
                        $descricao = $item2['descricao'];
                        $quantidade_adicional = $item2['quantidade'];
                        $descricao = sanitizeString($descricao);
                        if ($item2['valor'] != '0') {
                            $valor_adicional = $item2['valor'];
                            $valor_total_adicional = $valor_adicional;
                            $valor_adicional = asDollars(floatval($valor_adicional) * floatval($quantidade));
                            $valor_total_adicional = asDollars($valor_total_adicional);
                        }
                        for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $peso_fonte_adicional, false, false, false, 0);
                            printer_select_font($handle, $font);
                            if (strlen("-" . $descricao) > $quebra_linha_produto) {
                                $temp = str_split("-" . $descricao, $quebra_linha_produto - 1);
                                $posicao_produto = $posicao;
                                for ($a = 0; $a < count($temp); $a++) {
                                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                                    $posicao = $posicao + $espacoLinhas;
                                }
                                if ($item2['valor'] != '0') {
                                    printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao_produto);
                                }
                            } else {
                                printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                                if ($item2['valor'] != '0') {
                                    printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                                }
                                $posicao = $posicao + $espacoLinhas;
                            }
                        }
                        if ($posicao >= 1400) {
                            printer_end_page($handle);
                            printer_start_page($handle);
                            $posicao = 0;
                        }
                    }

                   
                }

                printer_draw_text($handle, trim("Valor Total: "), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, asDollars($pedido['valor_total']), $segunda_posicao, $posicao);  
                $posicao = $posicao + $espacoLinhas;
                printer_draw_text($handle, "--------------------------------------------------------------------", 10, $posicao);
                $posicao = $posicao + $espacoLinhas;

    
        }    
      

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);
        echo json_encode("ok");
    }
);

$app->get(
    '/getPedidosGerencialGeral/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.tipo,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega, empresa.nome as empresa_nome,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento, pedido.cancelado
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       ((pedido.status = 'Em aberto' and pedido.cancelado = 'false') or
        (pedido.status = 'Visualizado' and pedido.cancelado = 'false'))  order by pedido.status ASC , data_pedido ASC

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosGerencial/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.numero, pedido.numero_pedido,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento, pedido.cancelado
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id' and
       ((pedido.status = 'Em aberto' and pedido.cancelado = 'false') or
        (pedido.status = 'Visualizado' and pedido.cancelado = 'false') or (pedido.status <> 'Visualizado' and pedido.cancelado = 'true')) order by pedido.status ASC , data_pedido ASC

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosEmAberto/:id',
    function ($id) use ($app, $db) {
        $i = 0;
        $consulta = $db->con()->prepare("SELECT pedido.id, cliente.id as id_cliente, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, cliente.id_empresa as cliente_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.referencia, pedido.retira_local, pedido.desconto, pedido.cupom_fidelidade,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega, cliente.telefone,pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       edido.id_empresa = '$id' and pedido.cancelado = 'false'
       and (data_visualizacao is null or pedido.status = 'Em aberto' or pedido.status = 'Visualizado') order by pedido.status ASC , data_pedido ASC

       ");
        $consulta->execute();

        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $datetime = date_create()->format('Y-m-d H:i:s');
        //  $consulta = $db->con()->prepare("UPDATE empresa set ultima_visualizacao = '$datetime' where id = '$id'
        //
        //   ");
        //   $consulta->execute();
        foreach ($list as $item) {
            $id_cliente = $item['id_cliente'];
            $consulta = $db->con()->prepare("select id from pedido where id_cliente = '$id_cliente' and id_empresa = '$id'

         ");
            $consulta->execute();
            $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $list[$i]['quantidade_pedido'] = count($list2);
            $i++;
        }
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosClienteFidelidade/:cupom',
    function ($cupom) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.id, cliente.id as id_cliente, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, cliente.id_empresa as cliente_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.referencia, pedido.retira_local, pedido.desconto, pedido.cupom_fidelidade,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega, cliente.telefone,pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and
       pedido.id_cliente = cliente.id and pedido.cancelado = 'false' and pedido.desconto = '0.00'
       and pedido.cupom_fidelidade = '$cupom' order by data_pedido ASC

       ");
        $consulta->execute();

        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.id, pedido.travado, pedido.endereco, pedido.numero, pedido.numero_pedido, cliente.telefone,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.referencia, pedido.retira_local, pedido.desconto,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega,cliente.telefone,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and pedido.id = '$id' and
       pedido.id_cliente = cliente.id

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidoSimples/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone from pedido
        left join cliente on pedido.id_cliente = cliente.id where pedido.id = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosNaoVisualizados/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.tipo,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local,cliente.telefone,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.tempo_entrega, pedido.cancelado, pedido.desconto,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id' and
       pedido.status = 'Em aberto' order by pedido.status ASC , data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosEmTransporte/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.id, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto, pedido.id_cliente,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento, pedido.tipo
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and pedido.id_empresa = '$id' and
       pedido.id_cliente = cliente.id and pedido.cancelado = 'false' and
       (pedido.status = 'Em transporte') order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosFinalizados/:id',
    function ($id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.nome_mesa, pedido.id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto, pedido.delivery, pedido.data_impressao,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente, pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido
       from pedido left join cliente on pedido.id_cliente = cliente.id
       inner join empresa on pedido.id_empresa = empresa.id where
       pedido.id_empresa = '$id' and
       pedido.cancelado = 'false' and
       (pedido.status = 'Finalizado') and extract(DAY from data_pedido) = extract(DAY from '$datetime') and
       extract(MONTH from data_pedido) = extract(MONTH from '$datetime') and
       extract(YEAR from data_pedido) = extract(YEAR from '$datetime') order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_pedido = $item['id'];
            $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id_pedido'

     ");
            $consulta->execute();
            $list[$i]['pagamentos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;
        }
        ;
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCaixa/:idEmpresa/:dataAbertura/:dataFechamento',
    function ($idEmpresa, $dataAbertura, $dataFechamento) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00' || $dataFechamento == 'null') {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone, usuario.usuario,
            pedido.forma_pagamento as forma from pedido left join
         cliente on pedido.id_cliente = cliente.id
         left join usuario on pedido.id_entregador = usuario.id
         left join parcial_pedido on parcial_pedido.id_pedido = pedido.id
         where pedido.id_empresa = '$idEmpresa' and pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.data_finalizacao >= '$dataAbertura'


         ");
        } else {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone, usuario.usuario,
            pedido.forma_pagamento as forma from pedido left join
          cliente on pedido.id_cliente = cliente.id
          left join usuario on pedido.id_entregador = usuario.id
          left join parcial_pedido on parcial_pedido.id_pedido = pedido.id
           where pedido.id_empresa = '$idEmpresa'  and pedido.fechamento_muitos = 'false' and
          pedido.status = 'Finalizado' and pedido.cancelado = 'false'
          and pedido.data_finalizacao BETWEEN '$dataAbertura' and '$dataFechamento'


          ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCaixaUsuario/:idEmpresa/:dataAbertura/:dataFechamento/:id_usuario',
    function ($idEmpresa, $dataAbertura, $dataFechamento, $id_usuario) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00') {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone,
            pedido.forma_pagamento as forma from pedido left join
         cliente on pedido.id_cliente = cliente.id
         left join parcial_pedido on parcial_pedido.id_pedido = pedido.id
         where pedido.id_empresa = '$idEmpresa' and pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.data_finalizacao >= '$dataAbertura'
         and id_usuario = '$id_usuario'

         ");
        } else {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone,
            pedido.forma_pagamento as forma from pedido left join
          cliente on pedido.id_cliente = cliente.id
          left join parcial_pedido on parcial_pedido.id_pedido = pedido.id
          where pedido.id_empresa = '$idEmpresa'  and
          pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false'
          and pedido.data_finalizacao BETWEEN '$dataAbertura' and '$dataFechamento'
          and id_usuario = '$id_usuario'

          ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCaixaCancelado/:idEmpresa/:dataAbertura/:dataFechamento',
    function ($idEmpresa, $dataAbertura, $dataFechamento) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00') {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone, usuario.usuario
         from pedido left join cliente on pedido.id_cliente = cliente.id
         left join usuario on pedido.id_entregador = usuario.id
          where pedido.id_empresa = '$idEmpresa' and pedido.fechamento_muitos = 'false' and
         pedido.cancelado = 'true' and pedido.data_pedido >= '$dataAbertura'

         ");
        } else {
            $consulta = $db->con()->prepare("SELECT DISTINCT pedido.*, cliente.nome, cliente.telefone, usuario.usuario from pedido
         left join cliente on pedido.id_cliente = cliente.id
         left join usuario on pedido.id_entregador = usuario.id
          where pedido.id_empresa = '$idEmpresa' and pedido.fechamento_muitos = 'false' and
          pedido.cancelado = 'true'
          and pedido.data_pedido BETWEEN '$dataAbertura' and '$dataFechamento'

          ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPagamentosCaixa/:idEmpresa/:dataAbertura/:dataFechamento',
    function ($idEmpresa, $dataAbertura, $dataFechamento) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00' || $dataFechamento == 'null') {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.id, parcial_pedido.id_pedido, parcial_pedido.valor,
            CASE WHEN parcial_pedido.tipo_pagamento is not null and parcial_pedido.tipo_pagamento <> '' THEN parcial_pedido.tipo_pagamento ELSE parcial_pedido.forma_pagamento END
             as forma_pagamento, parcial_pedido.observacao, parcial_pedido.troco,
            pedido.tipo, pedido.data_pedido, pedido.nome_mesa, cliente.nome,
        pedido.delivery, pedido.retira_local, pedido.id_entregador, pedido.ifood from parcial_pedido left join
         pedido on parcial_pedido.id_pedido = pedido.id
         left join cliente on pedido.id_cliente = cliente.id where pedido.id_empresa = '$idEmpresa'  and
         pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.data_finalizacao >= '$dataAbertura'
         and parcial_pedido.forma_pagamento <> 'A receber'
         order by parcial_pedido.id_pedido

         ");
        } else {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.id, parcial_pedido.id_pedido, parcial_pedido.valor,
            CASE WHEN parcial_pedido.tipo_pagamento is not null and parcial_pedido.tipo_pagamento <> '' THEN parcial_pedido.tipo_pagamento ELSE parcial_pedido.forma_pagamento END
             as forma_pagamento, parcial_pedido.observacao, parcial_pedido.troco,
             pedido.tipo, cliente.nome,
        pedido.delivery, pedido.retira_local, pedido.id_entregador, pedido.ifood from parcial_pedido inner join
         pedido on parcial_pedido.id_pedido = pedido.id
         left join cliente on pedido.id_cliente = cliente.id where pedido.id_empresa = '$idEmpresa'  and
         pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false'
         and pedido.data_finalizacao BETWEEN '$dataAbertura' and '$dataFechamento'
         and parcial_pedido.forma_pagamento <> 'A receber'
         order by parcial_pedido.id_pedido
         ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getVendaProdutos/:idEmpresa/:dataAbertura/:dataFechamento',
    function ($idEmpresa, $dataAbertura, $dataFechamento) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00' || $dataFechamento == 'null') {
            $consulta = $db->con()->prepare("SELECT pedido_produto.id_produto as produto,
          sum(pedido_produto.quantidade) as quantidade, sum(pedido_produto.valor_total) as valor
          from pedido_produto
          inner join pedido on pedido_produto.id_pedido = pedido.id
          where data_pedido >= '$dataAbertura' and pedido.cancelado = 'false'
          group by produto
          order by produto


       ");
        } else {
            $consulta = $db->con()->prepare("SELECT pedido_produto.id_produto as produto,
           sum(pedido_produto.quantidade) as quantidade, sum(pedido_produto.valor_total) as valor
          from pedido_produto
          inner join pedido on pedido_produto.id_pedido = pedido.id
          where data_pedido BETWEEN '$dataAbertura' and '$dataFechamento'
          and pedido.cancelado = 'false'
          group by produto
          order by produto
       ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPagamentosCaixaUsuario/:idEmpresa/:dataAbertura/:dataFechamento/:id_usuario',
    function ($idEmpresa, $dataAbertura, $dataFechamento, $id_usuario) use ($app, $db) {

        if ($dataFechamento == '0000-00-00 00:00:00') {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.id, parcial_pedido.id_pedido, parcial_pedido.valor,
            CASE WHEN parcial_pedido.tipo_pagamento is not null and parcial_pedido.tipo_pagamento <> '' THEN parcial_pedido.tipo_pagamento ELSE parcial_pedido.forma_pagamento END
             as forma_pagamento, parcial_pedido.observacao, parcial_pedido.troco, pedido.data_pedido, pedido.nome_mesa, cliente.nome,
        pedido.delivery, pedido.retira_local, pedido.id_entregador from parcial_pedido inner join
         pedido on parcial_pedido.id_pedido = pedido.id
         left join cliente on pedido.id_cliente = cliente.id where pedido.id_empresa = '$idEmpresa'  and
         pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false' and pedido.data_finalizacao >= '$dataAbertura'
         and pedido.id_usuario = '$id_usuario' and parcial_pedido.forma_pagamento <> 'A receber'
         order by parcial_pedido.id_pedido

         ");
        } else {
            $consulta = $db->con()->prepare("SELECT parcial_pedido.id, parcial_pedido.id_pedido, parcial_pedido.valor,
            CASE WHEN parcial_pedido.tipo_pagamento is not null and parcial_pedido.tipo_pagamento <> '' THEN parcial_pedido.tipo_pagamento ELSE parcial_pedido.forma_pagamento END
             as forma_pagamento, parcial_pedido.observacao, parcial_pedido.troco, cliente.nome,
        pedido.delivery, pedido.retira_local, pedido.id_entregador from parcial_pedido inner join
         pedido on parcial_pedido.id_pedido = pedido.id
         left join cliente on pedido.id_cliente = cliente.id where pedido.id_empresa = '$idEmpresa'  and
         pedido.fechamento_muitos = 'false' and
         pedido.status = 'Finalizado' and pedido.cancelado = 'false'
         and pedido.data_finalizacao BETWEEN '$dataAbertura' and '$dataFechamento'
         and pedido.id_usuario = '$id_usuario' and parcial_pedido.forma_pagamento <> 'A receber'
         order by parcial_pedido.id_pedido
         ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosFinalizadosCaixa/:id/:id_caixa',
    function ($id, $id_caixa) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.nome_mesa, pedido.id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto, pedido.delivery, pedido.data_impressao,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.porcentagem_garcom, pedido.tipo
       from pedido left join cliente on pedido.id_cliente = cliente.id
       inner join empresa on pedido.id_empresa = empresa.id
       inner join caixa on pedido.id_caixa = caixa.id where
       pedido.id_empresa = '$id'  and
       pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false' and
       (pedido.status = 'Finalizado') and pedido.id_caixa = '$id_caixa' order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_pedido = $item['id'];
            $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id_pedido'

         ");
            $consulta->execute();
            $list[$i]['pagamentos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;
        }
        ;
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosAReceber/:id',
    function ($id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.nome_mesa, pedido.id_empresa,
         pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto, pedido.delivery, pedido.data_impressao,
         pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente,
         pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.porcentagem_garcom, pedido.tipo
         from pedido left join cliente on pedido.id_cliente = cliente.id
         inner join empresa on pedido.id_empresa = empresa.id
         inner join parcial_pedido on parcial_pedido.id_pedido = pedido.id
        where
         pedido.id_empresa = '$id'  and
         pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false' and
         (pedido.status = 'Finalizado') and parcial_pedido.forma_pagamento = 'A receber' order by data_pedido ASC

         ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosAgendamento',
    function () use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.tipo, pedido.numero, pedido.complemento, pedido.bairro,
       pedido.cidade, pedido.estado, cliente.nome, pedido.desconto, pedido.data_impressao, pedido.data_agendamento, pedido.status2,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente
       from pedido left join cliente on pedido.id_cliente = cliente.id
      where
       pedido.cancelado = 'false' and pedido.fechamento_muitos = 'false' and
       (pedido.status = 'agendado') and pedido.tipo <> 'app' order by data_agendamento ASC, status2

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCanceladosCaixa/:id/:id_caixa',
    function ($id, $id_caixa) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.data_visualizacao, pedido.endereco, pedido.numero, pedido.numero_pedido, pedido.nome_mesa, pedido.id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto, pedido.delivery, pedido.data_impressao,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.referencia, pedido.id_cliente, pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.porcentagem_garcom, pedido.motivo_cancelamento
       from pedido left join cliente on pedido.id_cliente = cliente.id
       inner join empresa on pedido.id_empresa = empresa.id
       inner join caixa on pedido.id_caixa = caixa.id where
       pedido.id_empresa = '$id'  and
       pedido.cancelado = 'true' and pedido.id_caixa = '$id_caixa' order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_pedido = $item['id'];
            $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id_pedido'

         ");
            $consulta->execute();
            $list[$i]['pagamentos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;
        }
        ;
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCancelados/:id',
    function ($id) use ($app, $db) {
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.numero, pedido.numero_pedido,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.retira_local, pedido.desconto,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, cliente.telefone, pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido, pedido.motivo_cancelamento
       from pedido inner join empresa on pedido.id_empresa = empresa.id
       left join  cliente on pedido.id_cliente = cliente.id where
       pedido.id_empresa = '$id' and
       pedido.cancelado = 'true'
       and extract(DAY from data_pedido) = extract(DAY from '$datetime') and
       extract(MONTH from data_pedido) = extract(MONTH from '$datetime') and
       extract(YEAR from data_pedido) = extract(YEAR from '$datetime') order by data_pedido ASC

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosEmAbertoCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.id, pedido.endereco, pedido.numero, empresa.id as id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.referencia, pedido.retira_local,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.logo, empresa.nome as empresa, pedido.desconto,
       pedido.status, empresa.logo, pedido.status_pagamento_cartao, pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and pedido.id_cliente = '$id' and
       pedido.id_cliente = cliente.id and pedido.cancelado = 'false' and
       (pedido.status = 'Em aberto' or pedido.status = 'Em transporte' or
        pedido.status = 'Visualizado') order by pedido.data_pedido DESC

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosCanceladosCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.id, pedido.endereco, pedido.numero, pedido.cancelado, empresa.id as id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.motivo_cancelamento,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.logo, empresa.nome as empresa,pedido.desconto,
       pedido.status,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and pedido.id_cliente = '$id' and
       pedido.id_cliente = cliente.id and
       pedido.cancelado = 'true'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getPedidosFinalizadosCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.id, pedido.endereco, pedido.numero, empresa.id as id_empresa,
       pedido.complemento, pedido.bairro, pedido.cidade, pedido.estado, cliente.nome, pedido.desconto,
       pedido.data_pedido, pedido.status, pedido.valor_total, pedido.observacao, empresa.logo, empresa.nome as empresa,
       pedido.status, pedido.tipo,
       pedido.taxa_entrega, pedido.troco, pedido.forma_pagamento, pedido.numero_pedido
       from pedido, empresa, cliente where
       pedido.id_empresa = empresa.id and pedido.id_cliente = '$id' and
       pedido.id_cliente = cliente.id and pedido.cancelado = 'false' and
       pedido.status = 'Finalizado'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getProdutoPedido2/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT
      produto.id,
      produto.nome,
      produto.descricao,
      pedido_produto.sequencia,
      produto.imagem,
      pedido_produto.observacao as observacao,
      pedido.referencia, pedido.porcentagem_garcom,
      pedido_produto.status,
      grupo_impressao.impressora,
      grupo_impressao.tamanho_papel,
      grupo_impressao.grupo,
      pedido_produto.valor_total as valor_total,
      produto.valor as valor,
      pedido_produto.quantidade,
      pedido_produto.senha_atendimento
      from produto
      inner join pedido_produto on (pedido_produto.id_produto = produto.id)
      left join grupo_impressao on (produto.id_grupo_impressao = grupo_impressao.id)
      inner join pedido on (pedido.id = pedido_produto.id_pedido)
      where
      pedido_produto.id_pedido = pedido.id
      and pedido_produto.id_pedido = '$id'


      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
        adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
        from adicional, produto, pedido, adicional_produto_pedido where
        adicional_produto_pedido.id_adicional = adicional.id and
        adicional_produto_pedido.id_produto = produto.id and
        adicional_produto_pedido.id_pedido = pedido.id and
        adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
        adicional_produto_pedido.sequencia = '$sequencia_produto'


        ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }

        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getProdutoPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
  pedido_produto.observacao as observacao_produto, pedido.referencia, pedido.porcentagem_garcom, pedido_produto.status,
  grupo_impressao.grupo, grupo_impressao.impressora, grupo_impressao.tamanho_papel, produto.impressao_individual,
  pedido_produto.valor_produto as valor, pedido_produto.valor_total, pedido_produto.quantidade from
  pedido_produto inner join pedido on pedido_produto.id_pedido = pedido.id
  inner join produto on pedido_produto.id_produto = produto.id
  left join grupo_impressao on produto.id_grupo_impressao = grupo_impressao.id
  where pedido_produto.id_pedido = '$id'

  ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
    adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao, adicional.impressao_individual
    from adicional, produto, pedido, adicional_produto_pedido where
    adicional_produto_pedido.id_adicional = adicional.id and
    adicional_produto_pedido.id_produto = produto.id and
    adicional_produto_pedido.id_pedido = pedido.id and
    adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
    adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional.ordem

    ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $i++;

        }

        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/finalizarPedidoTipo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_caixa = (isset($data->id_caixa)) ? $data->id_caixa : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("UPDATE pedido set id_caixa = '$id_caixa', status = 'Finalizado', data_finalizacao = '$datetime' where id = '$id' ");
        if ($consulta->execute()) {

            $dados = new stdClass();
            $dados->usuario = $usuario;
            $dados->id_pedido = $id;
            $dados->tipo = $tipo;
            $dados->evento = "Usuário " . $usuario . " finalizou o pedido " . $id . ".";
            salvarHistoricoPedido($dados, $app, $db);

            echo json_encode("ok");
        } else {
            echo json_encode(array("erro" => true));
        }
    }
);



$app->get(
    '/getProdutoPedidoGrupoImpressao/:id/:origem',
    function ($id, $origem) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id, pedido_produto.id as id_pedido_produto, pedido_produto.nome_usuario,
      produto.calculo_quantidade, produto.nome, produto.descricao, produto.impressao_individual, pedido_produto.valor_pago,
      pedido_produto.sequencia, pedido.data_pedido, produto.imagem, pedido_produto.observacao as observacao_produto, pedido.referencia, pedido_produto.data_cadastro,
      pedido.porcentagem_garcom, pedido_produto.status, pedido_produto.valor_produto as valor, pedido_produto.valor_total,
      pedido_produto.quantidade, pedido_produto.senha_atendimento, pedido.nome_mesa, pedido.nome_mesa2 from
      pedido_produto inner join pedido on pedido_produto.id_pedido = pedido.id
      inner join produto on pedido_produto.id_produto = produto.id
      where pedido_produto.id_pedido = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id_produto = $item['id'];
            $sequencia_produto = $item['sequencia'];
            $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
        adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao, adicional.impressao_individual
        from adicional, produto, pedido, adicional_produto_pedido where
        adicional_produto_pedido.id_adicional = adicional.id and
        adicional_produto_pedido.id_produto = produto.id and
        adicional_produto_pedido.id_pedido = pedido.id and
        adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id' and
        adicional_produto_pedido.sequencia = '$sequencia_produto' order by adicional_produto_pedido.ordem_adicionado

        ");
            $consulta->execute();
            $list[$i]['adicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("SELECT g1.* from produto inner join
        grupo_impressao as g1 on produto.id_grupo_impressao = g1.id
        where produto.id = '$id_produto' and (g1.origem = '$origem' or
          g1.origem = 'todos')

      ");
            $consulta->execute();
            $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($resultado) > 0) {
                $list[$i]['grupo'] = $resultado[0]['grupo'];
                $list[$i]['impressora'] = $resultado[0]['impressora'];
                $list[$i]['tamanho_papel'] = $resultado[0]['tamanho_papel'];
            }

            $consulta = $db->con()->prepare("SELECT g2.* from produto inner join
        grupo_impressao as g2 on produto.id_grupo_impressao2 = g2.id
        where produto.id = '$id_produto' and (g2.origem = '$origem' or
          g2.origem = 'todos')

      ");
            $consulta->execute();
            $resultado = $consulta->fetchAll(PDO::FETCH_ASSOC);
            if (count($resultado) > 0) {
                $list[$i]['grupo'] = $resultado[0]['grupo'];
                $list[$i]['impressora'] = $resultado[0]['impressora'];
                $list[$i]['tamanho_papel'] = $resultado[0]['tamanho_papel'];
            }

            $i++;
        }

        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/apagarHorarioNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from horario_funcionamento
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->get(
    '/getHorarios/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from
       horario_funcionamento where id_empresa = '$id' order by dia_semana

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getHorariosFuncionamento/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from
       texto_horario_funcionamento where id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/apagarAdicionalProdutoNovo',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("DELETE from adicional_produto
       where id = '$id'

       ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->get(
    '/getAdicionaisProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select adicional.id as id_adicional,
      adicional.descricao, produto.id as id_produto,
      adicional.valor, adicional_produto.id as idRemover
      from adicional, produto, adicional_produto
      where adicional_produto.id_produto = produto.id and
      adicional_produto.id_adicional = adicional.id and
      adicional_produto.id_produto = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getFormaPagamento/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, descricao, ordem, mostrar_app from
       forma_pagamento where id_empresa = '$id' and descricao <> 'Máquina Móvel' order by ordem");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getFormaPagamentoPedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from parcial_pedido where id_pedido = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/aplicarDescontoPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $desconto = (isset($data->desconto)) ? $data->desconto : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $pagamentos = json_decode(json_encode($data->pagamentos), true);
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("UPDATE pedido set desconto = '$desconto'
       where id = '$id'  ");
        $consulta->execute();

        foreach ($pagamentos as $item) {
            $valor = $item['valor'];
            $forma_pagamento = $item['forma_pagamento'];
            $idParcial = $item['id'];
            if ($valor == "0" || $valor == "0.00") {
                $consulta = $db->con()->prepare("DELETE from parcial_pedido where id = '$idParcial' ");
            } else {

                if (strpos(strtolower($forma_pagamento), 'din') !== false) {
                    $tipo_pagamento = "DINHEIRO";
                } else if (strpos(strtolower($forma_pagamento), 'debi') !== false) {
                    $tipo_pagamento = "CARTÃO DE DÉBITO";
                } else if (strpos(strtolower($forma_pagamento), 'débi') !== false) {
                    $tipo_pagamento = "CARTÃO DE DÉBITO";
                } else if (strpos(strtolower($forma_pagamento), 'cred') !== false) {
                    $tipo_pagamento = "CARTÃO DE CRÉDITO";
                } else if (strpos(strtolower($forma_pagamento), 'créd') !== false) {
                    $tipo_pagamento = "CARTÃO DE CRÉDITO";
                } else if (strpos(strtolower($forma_pagamento), 'pix') !== false) {
                    $tipo_pagamento = "PIX";
                } else {
                    $tipo_pagamento = $forma_pagamento;
                }

                if ($idParcial == -1) {
                    $consulta = $db->con()->prepare("INSERT INTO parcial_pedido
                     (id_pedido, valor, forma_pagamento, tipo_pagamento) VALUES
                      ('$id', '$valor', '$forma_pagamento', '$tipo_pagamento') ");
                } else {
                    $consulta = $db->con()->prepare("UPDATE parcial_pedido
                     set valor = '$valor', tipo_pagamento = '$tipo_pagamento' where id = '$idParcial'");
                }
            }

            $consulta->execute();
        }
        echo json_encode("ok");

    }
);

$app->get(
    '/getFormasPagamentoCaixa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.data_pedido, parcial_pedido.valor, pedido.nome_mesa,
       parcial_pedido.forma_pagamento, cliente.nome, pedido.delivery, pedido.retira_local from parcial_pedido
       inner join pedido on parcial_pedido.id_pedido = pedido.id
       inner join cliente on pedido.id_cliente = cliente.id
       where pedido.id_caixa = '$id' and pedido.fechamento_muitos = 'false' and pedido.cancelado = 'false'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getQuantidadePedidoCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, valor_total, desconto from pedido
       where id_cliente = '$id' and cancelado = 'false' and status = 'Finalizado'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTextoHorario/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from texto_horario_funcionamento where id_empresa = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTaxaEntrega/:id/:km',
    function ($id, $km) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from taxa_entrega where id_empresa = '$id' and '$km' <= km LIMIT 1

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTaxasEntrega/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from taxa_entrega
      where id_empresa = '$id' ORDER BY km

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/atualizarFormaPagamentoMostrarApp',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $mostrar_app = (isset($data->mostrar_app)) ? $data->mostrar_app : "";

        $consulta = $db->con()->prepare("UPDATE forma_pagamento set mostrar_app = '$mostrar_app'
        where id = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarFotoProduto/:id/:imagem',
    function ($id, $imagem) use ($app, $db) {
        $imagem = "http://www.uaipedido.com.br/uaipedido/uploads/" . $imagem;
        $consulta = $db->con()->prepare("UPDATE produto set imagem = '$imagem' where id = '$id'

        ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }
    }
);

$app->post(
    '/destravarPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("UPDATE pedido set travado = 'false' where id = '$id'

        ");
        if ($consulta->execute()) {
            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/atualizarOrdemFormaPagamento',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $consulta = $db->con()->prepare("UPDATE forma_pagamento set ordem = '$ordem' where id = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarOrdemBandeiraCartao',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_bandeira = (isset($data->id_bandeira)) ? $data->id_bandeira : "";
        $ordem = (isset($data->ordem)) ? $data->ordem : "";
        $consulta = $db->con()->prepare("UPDATE bandeira_empresa set ordem = '$ordem' where id = '$id_bandeira'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/setNullImagem/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("UPDATE produto set imagem = null where id = '$id'

      ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->post(
    '/setNullImagemLogo/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("UPDATE empresa set logo = null where id = '$id'

    ");
        if ($consulta->execute()) {
            echo "ok";
        } else {
            echo "falha";
        }

    }
);

$app->get(
    '/getMonteProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select id, nome from produto where monte_produto = 'true'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getCategoria/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from categoria_produto where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getMovimentacaoManual/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT movimentacao_estoque.*,
       produto.nome as produto, produto.tipo_produto from movimentacao_estoque inner join produto on movimentacao_estoque.id_produto = produto.id

       where movimentacao_estoque.id_empresa = '$id' and movimentacao_estoque.tipo = 'Manual'

       ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutoEstoque/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.*, a.sigla as sigla_entrada, a.id as idEntrada, produto_estoque.qtdade_minima,
       b.sigla as sigla_saida, b.id as idSaida, produto_estoque.valor_custo,
       CONVERT(produto_estoque.qt_estoque, CHAR) as qt_estoque,
       (produto_estoque.valor_custo * produto_estoque.qt_estoque) as total_custo,
       (produto.valor * produto_estoque.qt_estoque) as valor_total,
       (produto.valor * produto_estoque.qt_estoque) - (produto_estoque.valor_custo * produto_estoque.qt_estoque) as total_lucro,
        produto_estoque.qt_pedido, produto_estoque.classificacao from produto_estoque
       left join unidades_entrada_saida a on produto_estoque.id_unidade_ent = a.id
       left join unidades_entrada_saida b on produto_estoque.id_unidade_sai = b.id
       right join produto on produto_estoque.id_produto = produto.id
       where produto.id_empresa = '$id' and produto.cancelado = 'false'
       and produto.disponivel = 'true' and produto_estoque.usar_estoque = 'true' order by produto.nome

       ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getRefNFCe',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id from nfce ORDER BY id DESC LIMIT 1

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/verificarProdutoEstoqueQuantidadeMinima/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id from produto_estoque inner join
        produto on produto_estoque.id_produto = produto.id where produto.tipo_produto <> 'PA'
        and produto_estoque.qt_estoque <= produto_estoque.qtdade_minima and
        produto.id_empresa = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosAgrupados/:id_produto/:id_pedido',
    function ($id_produto, $id_pedido) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.*, pedido_produto.sequencia, pedido_produto.quantidade from pedido_produto inner join
        produto on pedido_produto.id_produto = produto.id where
        id_pedido = '$id_pedido' and id_produto = '$id_produto'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutoPedidoDesconto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido_produto.id, produto.nome, quantidade,
        valor_total, desconto from pedido_produto inner join produto
        on pedido_produto.id_produto = produto.id where id_pedido = '$id'");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutoEstoqueUnico/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from produto_estoque where
        id_produto = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/validarCodigo/:id/:codigo/:id_empresa',
    function ($id, $codigo, $id_empresa) use ($app, $db) {

        if ($id == -1) {
            $consulta = $db->con()->prepare("SELECT * from pedido
          where  codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
          and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

          ");
        } else {
            $consulta = $db->con()->prepare("SELECT id from pedido
          where id = '$id' and codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
          and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

          ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/validarCodigoMesa/:id/:codigo/:id_empresa/:numero_mesa',
    function ($id, $codigo, $id_empresa, $numero_mesa) use ($app, $db) {

        if ($id == -1) {
            $consulta = $db->con()->prepare("SELECT * from pedido
        where  codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
        and (nome_mesa = '$numero_mesa' or cast(nome_mesa as unsigned integer) = '$numero_mesa')
        and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

        ");
        } else {
            $consulta = $db->con()->prepare("SELECT id from pedido
        where id = '$id' and codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
        and nome_mesa = '$numero_mesa'
        and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

        ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/validarCodigoComanda/:id/:codigo/:id_empresa/:numero_comanda',
    function ($id, $codigo, $id_empresa, $numero_comanda) use ($app, $db) {

        if ($id == -1) {
            $consulta = $db->con()->prepare("SELECT * from pedido
        where  codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
        and (nome_mesa2 = '$numero_comanda' or cast(nome_mesa2 as unsigned integer) = '$numero_comanda')
        and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

        ");
        } else {
            $consulta = $db->con()->prepare("SELECT id from pedido
        where id = '$id' and codigo_autoatendimento = '$codigo' and id_empresa = '$id_empresa'
        and (nome_mesa2 = '$numero_comanda' or cast(nome_mesa2 as unsigned integer) = '$numero_comanda')
        and (pedido.status = 'Orçamento' || pedido.status = 'Aguardando autorização')

        ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosParaComposicao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, nome, descricao, COALESCE('produto') as tipo from produto where id_empresa = '$id'
        and tipo_produto <> 'MA'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT id, descricao as nome,texto as descricao, COALESCE('adicional') as tipo
        from adicional where id_empresa = '$id'


        ");

        $consulta->execute();
        $list2 = $consulta->fetchAll(PDO::FETCH_ASSOC);

        foreach ($list2 as $item) {
            $list[] = $item;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUnidadesSaidaEntradaProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT a.sigla as sigla_entrada, a.qt_conversao as conversao_entrada,
        b.sigla as sigla_saida, b.qt_conversao as conversao_saida from produto_estoque
        inner join unidades_entrada_saida a on produto_estoque.id_unidade_ent = a.id
        inner join unidades_entrada_saida b on produto_estoque.id_unidade_sai = b.id
        where produto_estoque.id_produto = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getFornecedor/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from fornecedor where id_empresa = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getNfeEntrada/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from nfe_entrada_produto where id = '$id'

      ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUnidadesEntradaSaida/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from unidades_entrada_saida where id_empresa = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getUsuario/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from usuario where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from sugestao_mesa where id = '$id' order by sugestao

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSugestaoMesaPorComanda/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from sugestao_mesa where sugestao = '$id'
        and mesa = 'false'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/getSugestaoMesaPorComandaV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $consulta = $db->con()->prepare("select * from sugestao_mesa where sugestao = '$id'
        and mesa = 'false'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getPromocao/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from promocao where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairro/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from bairro where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getHorario/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from horario_funcionamento where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairroEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from bairro_empresa where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBandeira/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from bandeira_empresa where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getFormaPagamentoUnico/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from forma_pagamento where id = '$id' order by ordem");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getFormasPagamentoPDV',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from forma_pagamento
      where descricao <> 'A receber' and descricao <> 'PIX Whatsapp' order by ordem");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSabor/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from sabor where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalProdutoUnico/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from adicional_produto where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicional/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from adicional where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from produto where id = '$id'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getProdutosMateriaPrima/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome from produto where id_empresa = '$id'
        and (produto.tipo_produto = 'MA' or produto.tipo_produto = 'M' or produto.tipo_produto = 'PA') and
        produto.cancelado = 'false' and produto.disponivel = 'true'

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCategorias/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from categoria_produto where id_empresa = '$id' ORDER BY ordem

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCategoriasNormal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from categoria_produto where id_empresa = '$id'
        and tipo_categoria = 'N' ORDER BY ordem

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAlteracoesLog',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("select * from alteracoes_log where nome_tabela <> 'sugestao_mesa' order by id, nome_tabela

        ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClienteFiltro/:texto/:id_empresa',
    function ($texto, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cliente where (nome like '%$texto%' or telefone like '%$texto%' or endereco like '%$texto%' or bairro like '%$texto%')
       and id_empresa = '$id_empresa' ORDER BY nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/verificarExisteClienteOffline/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select id from cliente where id_referencia = '$id' and id_referencia <> '0'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClientesAdminTodos/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cliente where id_empresa = '$id'  ORDER BY ativo DESC, nome

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClienteTelefone',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, nome, data_nascimento, telefone,
        (SELECT data_pedido from pedido where id_cliente = cliente.id and cancelado = 'false' and status = 'Finalizado'
 order by data_pedido DESC LIMIT 1) as data_pedido
        from cliente where ativo = 'true' and telefone is not null and telefone <> '' and
        nome <> 'Visitante' order by nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClientesAdmin/:id/:inicio/:final',
    function ($id, $inicio, $final) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cliente where id_empresa = '$id'  ORDER BY nome LIMIT 20 OFFSET $final

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("select * from cliente where id_empresa = '$id'  ORDER BY nome

          ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClientePedido/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select cliente.nome, cliente.bairro, cliente.cep, cliente.email, cliente.endereco, cliente.complemento,
        cliente.estado, cliente.id, cliente.id_empresa, cliente.cidade as cidade, cliente.estado,
        cliente.numero, cliente.referencia, cliente.telefone, cliente.endereco as rua from cliente, pedido where pedido.id_cliente = cliente.id and pedido.id = '$id'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getServer',
    function () use ($app, $db) {

        echo json_encode($_SERVER['HTTP_HOST']);
    }
);

$app->get(
    '/getTodosEnderecoCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select pedido.bairro, pedido.cep, pedido.complemento,
        pedido.estado, pedido.cidade as cidade, pedido.estado,
        pedido.numero, pedido.referencia, pedido.endereco as rua from pedido where pedido.id_cliente = '$id'
        GROUP BY pedido.endereco

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/verificarClienteLocal/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cliente where nome = 'local' and id_empresa = '$id'

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            echo json_encode(array("list" => $list));
        } else {
            $consulta = $db->con()->prepare("INSERT INTO cliente (nome, endereco, numero, complemento, bairro, cidade, estado, referencia, id_empresa, cep, telefone, email) VALUES
         ('local', '', '', '', '', '', '', '', '$id', '', '', '') ");
            $consulta->execute();
            $consulta = $db->con()->prepare("select * from cliente where nome = 'local' and id_empresa = '$id'

          ");
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            echo json_encode(array("list" => $list));
        }

    }
);

$app->post(
    '/getHistoricoPedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";

        $consulta = $db->con()->prepare("SELECT * from historico_pedido where tipo = '$tipo' and id_pedido = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/getHistoricoPedidoPorUsuario',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $nome_user = (isset($data->nome_user)) ? $data->nome_user : "";
        if ($nome_user == "--Todos--") {
            $consulta = $db->con()->prepare("SELECT * from historico_pedido where tipo = 'gerencial'");
        } else {
            $consulta = $db->con()->prepare("SELECT * from historico_pedido where usuario = '$nome_user'
        and tipo = 'gerencial'");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);

    }
);

$app->post(
    '/apagarProdutopedido',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $data->id = $id_produto;
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";

        $consulta = $db->con()->prepare(
            "SELECT * from adicional_produto_pedido where
       id_produto = '$id_produto' and sequencia = '$sequencia' and id_pedido = '$id_pedido' "

        );
        $consulta->execute();
        $data->listAdicional = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from pedido_produto where id_pedido = '$id_pedido' and id_produto = '$id_produto' and sequencia = '$sequencia'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = floatval($quantidade);

        foreach ($list as $item) {
            $quant = $item['quantidade'];
            $seq = $item['sequencia'];
            $descricao = $item['descricao'];
            if ($i != 0) {
                if ($quant <= $i) {
                    $consulta = $db->con()->prepare("DELETE from adicional_produto_pedido where id_pedido = '$id_pedido' and id_produto = '$id_produto' and sequencia = '$seq' ");
                    $consulta->execute();

                    $consulta = $db->con()->prepare("DELETE from pedido_produto where id_pedido = '$id_pedido' and id_produto = '$id_produto' and sequencia = '$seq'");
                    $consulta->execute();

                    $dadosHistorico = new stdClass();
                    $dados->usuario = $usuario;
                    $dados->id_pedido = $id_pedido;
                    $dados->tipo = $tipo_pedido;
                    $dados->evento = "Usuário " . $usuario . " removeu o produto " . $id_produto;
                    salvarHistoricoPedido($dados, $app, $db);

                    movimentacaoEstoqueSaida($data, $db, 'entrada'); // abc
                    $i = $i - floatval($quant);
                } else {
                    $quantidade_final = floatval($quant) - floatval($i);

                    $dados->usuario = $usuario;
                    $dados->id_pedido = $id_pedido;
                    $dados->tipo = $tipo;
                    $dados->evento = "Usuário " . $usuario . " removeu " . $i . " do produto ID: " . $id_produto;
                    salvarHistoricoPedido($dados, $app, $db);

                    $i = 0;
                    $valor_atual = floatval($valor) * floatval($quantidade_final);
                    $consulta = $db->con()->prepare("UPDATE pedido_produto set valor_total = '$valor_atual', quantidade = '$quantidade_final' where id_pedido = '$id_pedido' and id_produto = '$id_produto' and sequencia = '$seq'

           ");
                    $consulta->execute();
                    movimentacaoEstoqueSaida($data, $db, 'entrada'); // abc
                }
            }
        }
        echo json_encode($data);
    }
);

function movimentacaoEstoqueSaida($data, $db, $entradaSaida)
{

    $id_produto = (isset($data->id)) ? $data->id : "";
    $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";
    $entrada_saida = $entradaSaida;
    $dataMovimento = date_create()->format('Y-m-d H:i:s');
    $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
    $id_usuario = (isset($data->id_usuario)) ? $data->id_usuario : "";
    $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";
    $id_fornecedor = (isset($data->id_fornecedor)) ? $data->id_fornecedor : null;
    $numero_nota = (isset($data->numero_nota)) ? $data->numero_nota : "";
    $origem_pedido = (isset($data->origem_pedido)) ? $data->origem_pedido : "gerencial";
    $conversao = (isset($data->conversao)) ? $data->conversao : "";
    $unidade = (isset($data->unidade)) ? $data->unidade : "";
    $tipo = (isset($data->tipo)) ? $data->tipo : "pedido";
    $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
    $valor_custo = (isset($data->valor_custo)) ? $data->valor_custo : "";
    $id_produto_fornecedor = (isset($data->id_produto_fornecedor)) ? $data->id_produto_fornecedor : null;
    if (isset($data->listAdicional)) {
        $listAdicional = json_decode(json_encode($data->listAdicional), true);
    } else {
        $listAdicional = [];
    }

    $consulta = $db->con()->prepare("SELECT valor from produto where id = '$id_produto'
      ");
    $consulta->execute();
    $produto = $consulta->fetchAll(PDO::FETCH_ASSOC);
    $produto = $produto[0];
    $valor_unitario_produto = $produto['valor'];

    $consulta = $db->con()->prepare("SELECT valor_custo from produto_estoque where id_produto = '$id_produto'
      ");
    $consulta->execute();
    $produto_estoque = $consulta->fetchAll(PDO::FETCH_ASSOC);
    if (count($produto_estoque)) {
        $produto_estoque = $produto_estoque[0];
        if ($valor_custo == '') {
            $valor_custo = $produto_estoque['valor_custo'];
        }

    }

    $consulta = $db->con()->prepare("SELECT id from parametro where estoque = 'true'
      ");
    $consulta->execute();
    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
    if (count($list) > 0) {
        try {
            if ($unidade == "") {
                $consulta = $db->con()->prepare("SELECT sigla from produto_estoque inner join unidades_entrada_saida
            on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
            where produto_estoque.id_produto = '$id_produto'
            ");
                $consulta->execute();
                $resultadoSigla = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($resultadoSigla) > 0) {
                    $unidade = $resultadoSigla[0]['sigla'];
                } else {
                    $unidade = "";
                }

            }
            $db->con()->beginTransaction();
            $consulta = $db->con()->prepare("INSERT INTO movimentacao_estoque
         (id_produto, entrada_saida, dataMovimento, quantidade, unidade, id_fornecedor, numero_nota,
           tipo, id_pedido, id_usuario, origem_pedido, valor_custo, valor_unitario_produto, conversao, id_produto_fornecedor, id_empresa)
           VALUES
        ('$id_produto', '$entrada_saida', '$dataMovimento', '$quantidade',
         '$unidade', '$id_fornecedor', '$numero_nota',
        '$tipo', '$id_pedido', '$id_usuario', '$origem_pedido',
        '$valor_custo', '$valor_unitario_produto', '$conversao','$id_produto_fornecedor', '$id_empresa') ");
            $consulta->execute();

            if ($entradaSaida == 'saida') {
                $consulta = $db->con()->prepare("UPDATE produto_estoque set
            qt_estoque = qt_estoque - '$quantidade' where id_produto = '$id_produto'");
            } else if ($entradaSaida == 'entrada') {
                $consulta = $db->con()->prepare("UPDATE produto_estoque set
            qt_estoque = qt_estoque + '$quantidade' where id_produto = '$id_produto'");
            }

            $consulta->execute();

            $consulta = $db->con()->prepare(
                "select * from produtos_composicao where id_produto = '$id_produto'"

            );
            $consulta->execute();
            $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
            foreach ($list as $item) {
                $idComposicao = $item['id_materia_prima'];
                $qtdadeComposicao = floatval($item['qt_materia_prima']) * floatval($quantidade);

                $consulta = $db->con()->prepare("SELECT valor from produto where id = '$idComposicao'");
                $consulta->execute();
                $produto = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $produto = $produto[0];
                $valor_unitario_produto = $produto['valor'];

                $consulta = $db->con()->prepare("SELECT valor_custo from produto_estoque where id_produto = '$idComposicao'");
                $consulta->execute();
                $produto_estoque = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $produto_estoque = $produto_estoque[0];
                $valor_custo = $produto_estoque['valor_custo'];

                $consulta = $db->con()->prepare("INSERT INTO movimentacao_estoque
           (id_produto, entrada_saida, dataMovimento, quantidade, unidade,
             tipo, id_pedido, id_usuario, origem_pedido, valor_custo, valor_unitario_produto) VALUES
          ('$idComposicao', '$entrada_saida', '$dataMovimento', '$qtdadeComposicao',
           (SELECT sigla from produto_estoque inner join unidades_entrada_saida
             on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
             where produto_estoque.id_produto = '$idComposicao'),
          '$tipo', '$id_pedido', '$id_usuario', '$origem_pedido',
          '$valor_custo', '$valor_unitario_produto') ");
                $consulta->execute();

                if ($entradaSaida == 'saida') {
                    $consulta = $db->con()->prepare("UPDATE produto_estoque set
              qt_estoque = qt_estoque - '$qtdadeComposicao' where id_produto = '$idComposicao'");
                } else if ($entradaSaida == 'entrada') {
                    $consulta = $db->con()->prepare("UPDATE produto_estoque set
              qt_estoque = qt_estoque + '$qtdadeComposicao' where id_produto = '$idComposicao'");
                }
                $consulta->execute();
            }

            foreach ($listAdicional as $item) {
                if ($entradaSaida == 'entrada') {
                    $id_adicional = $item['id_adicional'];
                } else {
                    $id_adicional = $item['id'];
                }

                $qtdade_adicional = $item['quantidade'];
                $consulta = $db->con()->prepare("select * from produtos_composicao where id_adicional = '$id_adicional'");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                foreach ($list as $item) {
                    $idComposicao = $item['id_materia_prima'];
                    $consulta = $db->con()->prepare("SELECT valor from produto where id = '$idComposicao'");
                    $consulta->execute();
                    $produto = $consulta->fetchAll(PDO::FETCH_ASSOC);
                    $produto = $produto[0];
                    $valor_unitario_produto = $produto['valor'];

                    $consulta = $db->con()->prepare("SELECT valor_custo from produto_estoque where id_produto = '$idComposicao'");
                    $consulta->execute();
                    $produto_estoque = $consulta->fetchAll(PDO::FETCH_ASSOC);
                    $produto_estoque = $produto_estoque[0];
                    $valor_custo = $produto_estoque['valor_custo'];
                    $qtdadeComposicao = floatval($item['qt_materia_prima']) * floatval($quantidade) * floatval($qtdade_adicional);
                    $consulta = $db->con()->prepare("INSERT INTO movimentacao_estoque
             (id_produto, entrada_saida, dataMovimento, quantidade, unidade,
               tipo, id_pedido, id_usuario, origem_pedido, id_adicional,
               valor_custo, valor_unitario_produto) VALUES
            ('$idComposicao', '$entrada_saida', '$dataMovimento', '$qtdadeComposicao',
             (SELECT sigla from produto_estoque inner join unidades_entrada_saida
               on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
               where produto_estoque.id_produto = '$idComposicao'),
            '$tipo', '$id_pedido', '$id_usuario', '$origem_pedido', '$id_adicional',
            '$valor_custo', '$valor_unitario_produto') ");
                    $consulta->execute();

                    if ($entradaSaida == 'saida') {
                        $consulta = $db->con()->prepare("UPDATE produto_estoque set
                qt_estoque = qt_estoque - '$qtdadeComposicao' where id_produto = '$idComposicao'");
                    } else if ($entradaSaida == 'entrada') {
                        $consulta = $db->con()->prepare("UPDATE produto_estoque set
                qt_estoque = qt_estoque + '$qtdadeComposicao' where id_produto = '$idComposicao'");
                    }
                    $consulta->execute();
                }
            }

            $db->con()->commit();
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }

}

$app->post(
    '/addProdutoPedidoOrcamento',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $quantidade = (isset($data->quantidade)) ? $data->quantidade : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $observacao = (isset($data->observacao)) ? $data->observacao : "";
        $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";
        $status = (isset($data->status)) ? $data->status : "";
        $nome_usuario = (isset($data->nome_usuario)) ? $data->nome_usuario : "";
        $plataforma = (isset($data->plataforma)) ? $data->plataforma : "";
        $usuario = (isset($data->usuario)) ? $data->usuario : "";
        $tipo = (isset($data->tipo)) ? $data->tipo : "";
        $tipo_pedido = (isset($data->tipo_pedido)) ? $data->tipo_pedido : "";
        $datetime = date_create()->format('Y-m-d H:i:s');
        if (isset($data->listAdicional)) {
            $listAdicional = json_decode(json_encode($data->listAdicional), true);
        } else {
            $listAdicional = [];
        }

        $sequencia2 = (isset($data->sequencia2)) ? $data->sequencia2 : "";
        if ($sequencia2 == "") {
            $sequencia = (rand(0, 1000000));
        } else {
            $sequencia = $sequencia2;
        }

        try {

            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("SELECT barrar_produto_sem_estoque, senha_atendimento,verificar_bebida_alcoolica  from parametro");
            $consulta->execute();
            $parametro = $consulta->fetchAll(PDO::FETCH_ASSOC);
            $parametro = $parametro[0];
            $adicionarProduto = true;
            $mensagemRetorno = "";

            if ($parametro['barrar_produto_sem_estoque'] == 'true') {
                $consulta = $db->con()->prepare("SELECT id from produto_estoque
                where (qt_estoque - '$quantidade') >= 0 and id_produto = '$id'");
                $consulta->execute();
                $result = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($result) == 0) {
                    $adicionarProduto = false;
                    $mensagemRetorno = "Produto sem estoque";
                }
                foreach ($listAdicional as $adicional) {
                    $id_adicional = $adicional['id'];
                    $consulta = $db->con()->prepare("SELECT id_materia_prima from
                     produtos_composicao where id_adicional = '$id_adicional'");
                    $consulta->execute();
                    $listComposicao = $consulta->fetchAll(PDO::FETCH_ASSOC);
                    foreach ($listComposicao as $item) {
                        $idComposicao = $item['id_materia_prima'];
                        $quantidade_adicional = $adicional['quantidade'];
                        $consulta = $db->con()->prepare("SELECT id from produto_estoque
                where (qt_estoque - '$quantidade_adicional') >= 0 and id_produto = '$idComposicao'");
                        $consulta->execute();
                        $result = $consulta->fetchAll(PDO::FETCH_ASSOC);
                        if (count($result) == 0) {
                            $adicionarProduto = false;
                            $mensagemRetorno = "Produto sem estoque";
                        }
                    }
                }
            }

            if ($parametro['verificar_bebida_alcoolica'] == 'true') {
                $consulta = $db->con()->prepare("SELECT id from produto where bebida_alcoolica = 'true' and id = '$id'");
                $consulta->execute();
                $result = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($result) > 0) {
                    $consulta = $db->con()->prepare("SELECT pedido.id from pedido inner join cliente on pedido.id_cliente = cliente.id
               where TIMESTAMPDIFF(YEAR, cliente.data_nascimento, '$datetime') < 18 and pedido.id = '$id_pedido'");
                    $consulta->execute();
                    $result1 = $consulta->fetchAll(PDO::FETCH_ASSOC);
                    if (count($result1) > 0) {
                        $adicionarProduto = false;
                    }
                }
            }

            if ($adicionarProduto == true) {
                $consulta = $db->con()->prepare("INSERT INTO pedido_produto (id_produto, id_pedido, quantidade, valor_produto,
              valor_total, observacao, sequencia, status, data_cadastro, nome_usuario, plataforma) VALUES
            ('$id', '$id_pedido', '$quantidade', '$valor', '$valor_total',
              '$observacao', '$sequencia', '$status', '$datetime', '$nome_usuario', '$plataforma') ");
                $consulta->execute();
                $id_produto_pedido = $db->con()->lastInsertId();

                $consulta = $db->con()->prepare("SELECT nome from produto where id = '$id' ");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

                $dadosHistorico = new stdClass();
                $dados->usuario = $usuario;
                $dados->id_pedido = $id_pedido;
                $dados->tipo = $tipo_pedido;
                $dados->evento = "Usuário " . $usuario . " adicionou (" . $quantidade . ") - " . $list[0]['nome'] . " no valor total de R$" . $valor_total . ". ID do produto: " . $id . " ao pedido " . $id_pedido;
                if (!empty($observacao)) {
                    $dados->evento = $dados->evento . " com observação: " . $observacao;
                }
                salvarHistoricoPedido($dados, $app, $db);
                $ordem_adicionado = 0;
                foreach ($listAdicional as $item2) {
                    $id_adicional = $item2['id'];
                    $valor_adicional = $item2['valor'];
                    $quantidade_adicional = $item2['quantidade'];
                    $descricao = $item2['descricao'];
                    if (isset($item2['observacao'])) {
                        $obs_adicional = $item2['observacao'];
                    } else {
                        $obs_adicional = "";
                    }

                    $consulta = $db->con()->prepare("INSERT INTO adicional_produto_pedido (id_adicional, id_produto, id_pedido, valor_adicional,
              sequencia, texto_observacao, quantidade, data_cadastro, ordem_adicionado) VALUES
             ('$id_adicional', '$id', '$id_pedido', '$valor_adicional', '$sequencia', '$obs_adicional',
              '$quantidade_adicional', '$datetime', '$ordem_adicionado') ");
                    $consulta->execute();
                    $ordem_adicionado++;
                    $dadosHistorico = new stdClass();
                    $dados->usuario = $usuario;
                    $dados->id_pedido = $id_pedido;
                    $dados->tipo = $tipo_pedido;
                    $dados->evento = "Usuário " . $usuario . " adicionou (" . $quantidade_adicional . ") - " . $descricao . " no valor de R$" . $valor_adicional . ". ID do adicional: " . $id_adicional . " ID do produto" . $id . " ao pedido " . $id_pedido;
                    if (!empty($obs_adicional)) {
                        $dados->evento = $dados->evento . " com observação: " . $obs_adicional;
                    }
                    salvarHistoricoPedido($dados, $app, $db);

                }

                if ($parametro['usar_senha_atendimento'] == 'true') {
                    $senha_atendimento = $parametro[0]['senha_atendimento'];
                    $consulta = $db->con()->prepare("UPDATE pedido_produto set senha_atendimento = '$senha_atendimento'
              where id = '$id_produto_pedido' ");
                    $consulta->execute();
                    $consulta = $db->con()->prepare("UPDATE parametro set senha_atendimento = senha_atendimento + 1 ");
                    $consulta->execute();
                }

                $db->con()->commit();
                movimentacaoEstoqueSaida($data, $db, 'saida'); // abc
                echo json_encode('ok');
            } else {
                if ($mensagemRetorno == "") {
                    echo json_encode('menor');
                } else {
                    echo json_encode($mensagemRetorno);
                }

            }
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/atualizarPedidoOrcamento',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_cliente = (isset($data->id_cliente)) ? $data->id_cliente : "";
        $valor_total = (isset($data->valor_total)) ? $data->valor_total : "";
        $retira_local = (isset($data->retira_local)) ? $data->retira_local : "false";
        $taxa_entrega = (isset($data->taxa_entrega)) ? $data->taxa_entrega : "";
        $endereco = (isset($data->endereco)) ? $data->endereco : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $complemento = (isset($data->complemento)) ? $data->complemento : "";
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $referencia = (isset($data->referencia)) ? $data->referencia : "";
        $nome_mesa = (isset($data->nome_mesa)) ? $data->nome_mesa : "";
        $porcentagem_garcom = (isset($data->porcentagem_garcom)) ? $data->porcentagem_garcom : "";
        $porcentagem_garcom_pago = (isset($data->porcentagem_garcom_pago)) ? $data->porcentagem_garcom_pago : "0";
        $id_referencia_mesa = (isset($data->id_referencia_mesa)) ? $data->id_referencia_mesa : "";
        $id_referencia_pedido_online = (isset($data->id_referencia_pedido_online)) ? $data->id_referencia_pedido_online : "";
        $delivery = (isset($data->delivery)) ? $data->delivery : "false";
        $consumidor_final = (isset($data->consumidor_final)) ? $data->consumidor_final : "false";
        $tag = (isset($data->tag)) ? $data->tag : "";
        $sub_total = (isset($data->sub_total)) ? $data->sub_total : "0";
        $sequencia = 0;

        try {

            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE pedido set valor_total = '$valor_total',taxa_entrega = '$taxa_entrega', id_cliente = '$id_cliente', tag = '$tag',
        endereco = '$endereco', numero = '$numero', complemento = '$complemento', bairro = '$bairro', cidade = '$cidade', estado = '$estado',id_referencia_mesa = '$id_referencia_mesa',
        nome_mesa = '$nome_mesa', delivery = '$delivery', retira_local = '$retira_local', consumidor_final = '$consumidor_final',
        id_referencia_pedido_online = '$id_referencia_pedido_online', referencia = '$referencia', porcentagem_garcom_pago = '$porcentagem_garcom_pago',
        porcentagem_garcom = '$porcentagem_garcom', sub_total = '$sub_total' where id = '$id'");
            $consulta->execute();

            $db->con()->commit();
            echo json_encode($id);
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/setSolicitacaoGarcom/',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_pedido = (isset($data->id)) ? $data->id : "";
        $travado = (isset($data->travado)) ? $data->travado : "";
        $solicitacao_garcom = (isset($data->solicitacao_garcom)) ? $data->solicitacao_garcom : "";

        try {

            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE pedido set solicitacao_garcom = '$solicitacao_garcom',
        travado = '$travado' where id = '$id_pedido' ");
            $consulta->execute();

            $db->con()->commit();
            echo json_encode("ok");
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/atualizarProdutoPedidoOrcamento/',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $id_pedido = (isset($data->id_pedido)) ? $data->id_pedido : "";
        $sequencia = (isset($data->sequencia)) ? $data->sequencia : "";
        $status = (isset($data->status)) ? $data->status : "";
        try {

            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE pedido_produto set status = '$status' where id_produto = '$id' and
        id_pedido = '$id_pedido' and sequencia = '$sequencia' ");
            $consulta->execute();

            $db->con()->commit();
            echo json_encode($id);
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->post(
    '/atualizarStatus2Pedido',
    'auth',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $status = (isset($data->status)) ? $data->status : "";
        try {
            $db->con()->beginTransaction();

            $consulta = $db->con()->prepare("UPDATE pedido set status2 = '$status' where id = '$id' ");
            $consulta->execute();

            $db->con()->commit();
            echo json_encode('ok');
        } catch (Exception $e) {
            $db->con()->rollBack();
            echo json_encode($e->getMessage());
        }
    }
);

$app->get(
    '/checarComandaIdReferenciaMesa/:id/:id_empresa',
    function ($id, $id_empresa) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.* from pedido where id_referencia_mesa = '$id'
       and pedido.id_empresa = '$id_empresa' and (status = 'Orçamento' || status = 'Aguardando autorizacao') and
       cancelado = 'false'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            $i2 = 0;
            $id_pedido = $list[0]['id'];
            $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, pedido_produto.sequencia, produto.imagem,
        pedido_produto.observacao as observacao, pedido.referencia, pedido.porcentagem_garcom, pedido_produto.status,
        pedido_produto.valor_total as valor_total, produto.valor as valor, pedido_produto.quantidade from pedido, pedido_produto,
        produto where
        pedido_produto.id_produto = produto.id and pedido_produto.id_pedido = pedido.id
        and pedido_produto.id_pedido = '$id_pedido'

        ");
            $consulta->execute();
            $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            foreach ($list[0]['produtos'] as $item2) {
                $id_produto = $item2['id'];
                $sequencia_produto = $item2['sequencia'];
                $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional_produto_pedido.valor_adicional as valor,
          adicional_produto_pedido.quantidade, adicional_produto_pedido.texto_observacao
          from adicional, produto, pedido, adicional_produto_pedido where
          adicional_produto_pedido.id_adicional = adicional.id and
          adicional_produto_pedido.id_produto = produto.id and
          adicional_produto_pedido.id_pedido = pedido.id and
          adicional_produto_pedido.id_produto = '$id_produto' and adicional_produto_pedido.id_pedido = '$id_pedido' and
          adicional_produto_pedido.sequencia = '$sequencia_produto'

          ");
                $consulta->execute();
                $list[0]['produtos'][$i2]['listAdicional'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
                $i2++;
            }
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/checarComandaAberta/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone
        from pedido left join cliente on pedido.id_cliente = cliente.id where
        pedido.id = '$id' and
         (pedido.status = 'Orçamento' or pedido.status = 'agendado' or pedido.status = 'Visualizado')
      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            $consulta = $db->con()->prepare("select * from parcial_pedido where id_pedido = '$id'
       ");
            $consulta->execute();
            $list[0]['parcial'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/checarComandaAbertaEditar/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT pedido.*, cliente.nome, cliente.telefone
        from pedido left join cliente on pedido.id_cliente = cliente.id where
        pedido.id = '$id'
      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            $consulta = $db->con()->prepare("select * from parcial_pedido where id_pedido = '$id'
       ");
            $consulta->execute();
            $list[0]['parcial'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        }

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/checkExisteBairro/:bairro/:empresa',
    function ($bairro, $empresa) use ($app, $db) {
        $bairro = trim($bairro);
        $consulta = $db->con()->prepare("select id, nome from bairro where nome like '%$bairro%' and cidade = (select cidade from empresa where id = '$empresa') group by nome

        ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairros/:cidade',
    function ($cidade) use ($app, $db) {

        $consulta = $db->con()->prepare("select id, nome from bairro where cidade = '$cidade' order by cidade

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getParametro/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from parametro

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getIdPixel',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id_pixel, codigo_analytcs from parametro");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairros/:cidade',
    function ($cidade) use ($app, $db) {

        $consulta = $db->con()->prepare("select id, nome from bairro where cidade = '$cidade' order by cidade

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/getCidades',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";
        $consulta = $db->con()->prepare("SELECT * from cidade");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) == 0) {
            $consulta = $db->con()->prepare("INSERT INTO cidade (cidade,estado) VALUES ('$cidade','$estado')");
            $consulta->execute();
        }
        $consulta = $db->con()->prepare("SELECT * from cidade");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCidadesPedido',
    function () use ($app, $db) {

        $consulta = $db->con()->prepare("select DISTINCT bairro.cidade from bairro

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairrosEmpresa/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select bairro_empresa.id, bairro_empresa.valor, bairro.nome, bairro.cidade from
       bairro, empresa, bairro_empresa where bairro_empresa.id_bairro = bairro.id and bairro_empresa.id_empresa = empresa.id
       and bairro_empresa.id_empresa = '$id' order by bairro.nome

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getBairrosEmpresaNovo/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT bairro_empresa.id, bairro_empresa.valor, bairro.nome,
       cidade.cidade, cidade.estado, bairro_empresa.tempo_entrega from
     bairro inner join cidade on bairro.id_cidade = cidade.id, empresa, bairro_empresa where bairro_empresa.id_bairro = bairro.id and bairro_empresa.id_empresa = empresa.id
     and bairro_empresa.id_empresa = '$id' order by bairro.nome

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/getBairrosLista/:cidade/:id',
    function ($cidade, $id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from bairro where bairro.cidade = '$cidade' and id not in
       (select bairro_empresa.id_bairro from bairro, bairro_empresa, empresa where bairro_empresa.id_bairro = bairro.id and
         bairro_empresa.id_empresa = empresa.id and bairro_empresa.id_empresa = '$id') order by bairro.nome

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getBairrosListaNovo/:id_cidade/:id',
    function ($id_cidade, $id) use ($app, $db) {

        $consulta = $db->con()->prepare("UPDATE bairro set id_cidade = '$id_cidade'
    where id_cidade is null");
        $consulta->execute();

        $consulta = $db->con()->prepare("SELECT bairro.*, cidade.cidade as city, cidade.estado
       from bairro inner join cidade on bairro.id_cidade = cidade.id
       where bairro.id_cidade = '$id_cidade' and bairro.id not in
     (select bairro_empresa.id_bairro from bairro, bairro_empresa, empresa where bairro_empresa.id_bairro = bairro.id and
       bairro_empresa.id_empresa = empresa.id and bairro_empresa.id_empresa = '$id') order by bairro.nome");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTaxaBairro/:bairro/:id',
    function ($bairro, $id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from bairro_empresa, bairro, empresa where
       bairro_empresa.id_bairro = bairro.id and bairro_empresa.id_empresa = empresa.id and
       bairro.nome = '$bairro' and bairro_empresa.id_empresa = '$id'

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getTaxaBairroCidade/:bairro/:cidade/:estado',
    function ($bairro, $cidade, $estado) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT * from bairro_empresa
      inner join bairro on bairro_empresa.id_bairro = bairro.id
      inner join cidade on bairro.id_cidade = cidade.id where
      bairro.nome = '$bairro' and cidade.cidade = '$cidade' and cidade.estado = '$estado'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresa/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("select * from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("select hora_inicio, hora_fechar from horario_funcionamento, empresa
       where horario_funcionamento.id_empresa = empresa.id and
       horario_funcionamento.hora_fechar >= TIME_FORMAT('$datetime', '%H:%i:%S')
       and horario_funcionamento.hora_inicio <= TIME_FORMAT('$datetime', '%H:%i:%S')
       and DAYOFWEEK('$datetime') = dia_semana and id_empresa = '$id'

       ");
        $consulta->execute();
        $list[0]['funcionamento'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $consulta = $db->con()->prepare("select * from texto_horario_funcionamento where id_empresa = '$id'

      ");
        $consulta->execute();
        $list[0]['horario_funcionamento'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresaGeral/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT id, cep, nome, endereco, numero, cnpj_cpf, complemento, bairro, email, fidelidade,
      quantidade_fidelidade, valor_fidelidade, ip_impressao, ip_autoatendimento, ip_servidor, impressora, descricao,
       tamanho_papel, retira_local, comer_local, whatsapp,
      data_inicio_fidelidade from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresaCompletoSemBairro/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("select * from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao,
        produto.monte_produto, produto_fiscal.ean, produto.codigo_barras,
        COALESCE((SELECT tabela_preco_produto_adicional.valor FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'gerencial') LIMIT 1),
         produto.valor) as valor,
         categoria_produto.descricao as categoria, produto.imagem, produto.disponivel, produto.ordem,
        grupo_impressao.impressora, grupo_impressao.tamanho_papel, unidades_entrada_saida.sigla,
        grupo_impressao.grupo, produto.sabores
        from produto
        inner join categoria_produto on produto.id_categoria = categoria_produto.id
        left join grupo_impressao on produto.id_grupo_impressao = grupo_impressao.id
        left join produto_estoque on produto_estoque.id_produto = produto.id
        left join produto_fiscal on produto_fiscal.id_produto = produto.id
        left join unidades_entrada_saida on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
        where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
        and cancelado = 'false'
        and (produto.mostrar_dia = 10 or DAYOFWEEK('$datetime') = produto.mostrar_dia)
        and disponivel = 'true'
        and (tipo = 'app' or tipo = 'gerencial')
        and (tipo_produto = 'PA' or tipo_produto = 'M')
        order by  produto.ordem, produto.nome

       ");

        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $list[0]['taxa_entrega'] = [];

        $consulta = $db->con()->prepare("select * from observacao where id_empresa = '$id'

       ");
        $consulta->execute();
        $list[0]['observacoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
       produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria,
       produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
       from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and empresa.ativo = 'true' and
       empresa.id = promocao.id_empresa and
       produto.id_categoria = categoria_produto.id and  (DAYOFWEEK('$datetime') = dia_semana or DATE_FORMAT(now(),'%Y-%m-%d') = promocao.data_promocao or promocao.fixo = 'true' )
       and promocao.id_empresa = '$id' and
       promocao.ativo = 'true'

       ");
        $consulta->execute();
        $list[0]['promocoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresaCompletoAA/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT * from empresa where id = '$id'

    ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $list[0]['funcionamento'] = array();
        $list[0]['horario_funcionamento'] = array();
        $list[0]['taxa_entrega'] = array();
        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, produto.monte_produto,
         COALESCE((SELECT tabela_preco_produto_adicional.a_partir FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'aa' or tipo = 'gerencial') order by data_cadastro DESC LIMIT 1),
         produto.a_partir) as a_partir,
     COALESCE((SELECT tabela_preco_produto_adicional.valor FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'aa' or tipo = 'gerencial') order by data_cadastro DESC LIMIT 1),
         produto.valor) as valor, categoria_produto.descricao as categoria, produto.imagem, produto.disponivel, produto.ordem, produto.sabores,
     produto.status, produto.calculo_quantidade, produto.unidade
     from categoria_produto, produto
     where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
     and cancelado = 'false' and (produto.tipo = 'app' or produto.tipo = 'aa' or tipo = 'gerencial')
     and produto.disponivel = 'true'
     and (produto.mostrar_dia = 10 or DAYOFWEEK('$datetime') = produto.mostrar_dia)
     and DATE_FORMAT('$datetime', '%H:%i:%s') BETWEEN produto.hora_inicio and produto.hora_final
     and produto.tipo_produto != 'MA'
     order by categoria_produto.ordem, produto.ordem, produto.nome, produto.valor

     ");
        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
     produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria,
     produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
     from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
     empresa.id = promocao.id_empresa and
     produto.id_categoria = categoria_produto.id and (DAYOFWEEK('$datetime') = promocao.dia_semana or DATE_FORMAT(now(),'%Y-%m-%d') = promocao.data_promocao or promocao.fixo = 'true' )
     and promocao.id_empresa = '$id' and
     promocao.ativo = 'true'

     ");
        $consulta->execute();
        $list[0]['promocoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresaCompletoGarcom/:id',
    function ($id) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT * from empresa where id = '$id'

  ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $list[0]['funcionamento'] = array();
        $list[0]['horario_funcionamento'] = array();
        $list[0]['taxa_entrega'] = array();
        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, produto.monte_produto,
       COALESCE((SELECT tabela_preco_produto_adicional.a_partir FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'garcom' or tipo = 'gerencial') order by data_cadastro DESC LIMIT 1),
         produto.a_partir) as a_partir,
   COALESCE((SELECT tabela_preco_produto_adicional.valor FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'garcom' or tipo = 'gerencial') order by data_cadastro DESC LIMIT 1),
         produto.valor) as valor, categoria_produto.descricao as categoria, produto.imagem, produto.disponivel, produto.ordem, produto.sabores,
   produto.status, produto.calculo_quantidade, produto.unidade
   from categoria_produto, produto
   where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
   and cancelado = 'false' and (produto.tipo = 'app' or produto.tipo = 'garcom' or tipo = 'gerencial')
   and produto.disponivel = 'true'
   and (produto.mostrar_dia = 10 or DAYOFWEEK('$datetime') = produto.mostrar_dia)
   and DATE_FORMAT('$datetime', '%H:%i:%s') BETWEEN produto.hora_inicio and produto.hora_final
   and produto.tipo_produto != 'MA'
   order by categoria_produto.ordem, produto.ordem, produto.nome, produto.valor

   ");
        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
   produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria,
   produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
   from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
   empresa.id = promocao.id_empresa and
   produto.id_categoria = categoria_produto.id and (DAYOFWEEK('$datetime') = promocao.dia_semana or DATE_FORMAT(now(),'%Y-%m-%d') = promocao.data_promocao or promocao.fixo = 'true' )
   and promocao.id_empresa = '$id' and
   promocao.ativo = 'true'

   ");
        $consulta->execute();
        $list[0]['promocoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/loginClienteNovo',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $id_empresa = (isset($data->id_empresa)) ? $data->id_empresa : "";

        $consulta = $db->con()->prepare("SELECT * FROM cliente where
     email = '$login' and senha = '$senha' and id_empresa = '$id_empresa'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/atualizarCaminhoFotos',
    function () use ($app, $db) {

        try {

            $consulta = $db->con()->prepare("UPDATE produto SET imagem = REPLACE(imagem,
                        'https://www.uaipedido.com.br/uaipedido/uploads/',
                        'https://www.onesolucoes.com.br/imagem/uploads/') ");
            $consulta->execute();

            $consulta = $db->con()->prepare("UPDATE produto SET imagem = REPLACE(imagem,
                        'https://www.onesolucoes.com.br/imagem/produto/',
                        'https://www.onesolucoes.com.br/imagem/uploads/') ");
            $consulta->execute();

            $consulta = $db->con()->prepare("UPDATE produto SET imagem = REPLACE(imagem,
                        'https://www.onesolucoes.com.br/imagem/produtos/',
                        'https://www.onesolucoes.com.br/imagem/uploads/') ");
            $consulta->execute();

        } catch (PDOException $e) {

        }

        echo json_encode("ok");
    }
);

$app->get(
    '/getEmpresaCompleto/:id/:bairro',
    function ($id, $bairro) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("select * from empresa where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao, produto.monte_produto,
       produto.valor, categoria_produto.descricao as categoria, produto.imagem, produto.disponivel, produto.ordem,
       grupo_impressao.impressora, grupo_impressao.tamanho_papel, unidades_entrada_saida.sigla,
       grupo_impressao.grupo, produto.sabores
       from produto
       inner join categoria_produto on produto.id_categoria = categoria_produto.id
       left join grupo_impressao on produto.id_grupo_impressao = grupo_impressao.id
       left join produto_estoque on produto_estoque.id_produto = produto.id
       left join unidades_entrada_saida on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
       where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
       and cancelado = 'false'
       and (produto.mostrar_dia = 10 or DAYOFWEEK('$datetime') = produto.mostrar_dia)
       and disponivel = 'true'
       and (tipo_produto = 'PA' or tipo_produto = 'M')
       order by  produto.ordem, produto.nome

       ");
        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("select * from bairro_empresa, bairro, empresa where
       bairro_empresa.id_bairro = bairro.id and bairro_empresa.id_empresa = empresa.id and
       bairro.nome = '$bairro' and bairro_empresa.id_empresa = '$id'

       ");
        $consulta->execute();
        $list[0]['taxa_entrega'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("select * from observacao where id_empresa = '$id'

       ");
        $consulta->execute();
        $list[0]['observacoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
       produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria,
       produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
       from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
       empresa.id = promocao.id_empresa and
       produto.id_categoria = categoria_produto.id and DAYOFWEEK('$datetime') = dia_semana and promocao.id_empresa = '$id' and
       promocao.ativo = 'true' and produto.cancelado = 'false' and produto.disponivel = 'true'

       ");
        $consulta->execute();
        $list[0]['promocoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));
    }
);

$app->post(
    '/getEmpresaCompletoComCidade',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $bairro = (isset($data->bairro)) ? $data->bairro : "";
        $id = (isset($data->id)) ? $data->id : "";
        $cidade = (isset($data->cidade)) ? $data->cidade : "";
        $estado = (isset($data->estado)) ? $data->estado : "";

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("select * from empresa where id = '$id'

    ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT produto.id, produto.nome, produto.descricao,
     produto.monte_produto, produto_fiscal.ean, produto.codigo_barras,
     COALESCE((SELECT tabela_preco_produto_adicional.valor FROM
         tabela_preco_produto_adicional where id_produto = produto.id
         and (tipo = 'app' or tipo = 'gerencial') LIMIT 1),
         produto.valor) as valor,
     categoria_produto.descricao as categoria,
     produto.imagem, produto.disponivel, produto.ordem, grupo_impressao.impressora,
     grupo_impressao.tamanho_papel, unidades_entrada_saida.sigla,
     grupo_impressao.grupo, produto.sabores
     from produto
     inner join categoria_produto on produto.id_categoria = categoria_produto.id
     left join grupo_impressao on produto.id_grupo_impressao = grupo_impressao.id
     left join produto_estoque on produto_estoque.id_produto = produto.id
     left join produto_fiscal on produto_fiscal.id_produto = produto.id
     left join unidades_entrada_saida on produto_estoque.id_unidade_sai = unidades_entrada_saida.id
     where produto.id_categoria = categoria_produto.id and produto.id_empresa = '$id'
     and cancelado = 'false'
     and (produto.mostrar_dia = 10 or DAYOFWEEK('$datetime') = produto.mostrar_dia)
     and disponivel = 'true'
     and (tipo = 'app' or tipo = 'gerencial')
     and (tipo_produto = 'PA' or tipo_produto = 'M')
     order by  produto.ordem, produto.nome

     ");
        $consulta->execute();
        $list[0]['produtos'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("SELECT * from bairro_empresa
     inner join bairro on bairro_empresa.id_bairro = bairro.id
     inner join cidade on bairro.id_cidade = cidade.id where
     bairro.nome = '$bairro' and cidade.cidade = '$cidade' and cidade.estado = '$estado'

     ");
        $consulta->execute();
        $list[0]['taxa_entrega'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $consulta = $db->con()->prepare("select * from observacao where id_empresa = '$id'

     ");
        $consulta->execute();
        $list[0]['observacoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare("SELECT promocao.ativo, promocao.dia_semana, forcar_observacao,
     produto.id, promocao.id_empresa, promocao.id_produto, promocao.valor_promocao, categoria_produto.descricao as categoria,
     produto.descricao, produto.disponivel, produto.imagem, produto.nome, promocao.valor_promocao as valor, produto.valor as valor_antigo
     from promocao, categoria_produto, produto, empresa where promocao.id_produto = produto.id and
     empresa.id = promocao.id_empresa and
     produto.id_categoria = categoria_produto.id and DAYOFWEEK('$datetime') = dia_semana and promocao.id_empresa = '$id' and
     promocao.ativo = 'true' and produto.cancelado = 'false' and produto.disponivel = 'true'

     ");
        $consulta->execute();
        $list[0]['promocoes'] = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($list);
    }
);

$app->post(
    '/apagarSabor',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id_produto = (isset($data->id_produto)) ? $data->id_produto : "";
        $id = (isset($data->id)) ? $data->id : "";
        $numero = (isset($data->numero)) ? $data->numero : "";
        $consulta = $db->con()->prepare("DELETE from sabor
       where id_produto = '$id_produto' and numero = '$numero'

       ");
        if ($consulta->execute()) {
            if ($id != "") {
                $consulta = $db->con()->prepare("update sabor set numero = numero - 1
           where id_produto = '$id_produto' and numero > '$numero'

           ");
                $consulta->execute();
                $consulta = $db->con()->prepare("SELECT * from sabor where id_produto = '$id_produto'

           ");
                $consulta->execute();
                $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                if (count($list) == 0) {
                    $consulta = $db->con()->prepare("UPDATE produto set sabores = 'false' where id = '$id_produto'

             ");
                    $consulta->execute();
                }

            }

            echo json_encode("ok");
        } else {
            echo json_encode("falha");
        }
    }
);

$app->post(
    '/apagarSaborV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";

        $consulta = $db->con()->prepare("DELETE from sabor where  id = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->post(
    '/atualizarValorSaborV2',
    function () use ($app, $db) {
        $data = json_decode($app->request()->getBody());
        $id = (isset($data->id)) ? $data->id : "";
        $valor = (isset($data->valor)) ? $data->valor : "";
        $ordem_exibicao = (isset($data->ordem_exibicao)) ? $data->ordem_exibicao : "";

        $consulta = $db->con()->prepare("UPDATE sabor set valor = '$valor',
        ordem_exibicao = '$ordem_exibicao' where  id = '$id'");
        $consulta->execute();
        echo json_encode("ok");

    }
);

$app->get(
    '/getSabores/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT adicional.id as id, sabor.id_produto, adicional.descricao,
         CASE
         WHEN sabor.valor is not null and sabor.valor >= 0 THEN sabor.valor
         ELSE adicional.valor END
          as valor, sabor.quantidade_item, sabor.obrigatorio, sabor.manter_maior, adicional.texto, sabor.media_valor, sabor.quantidade_unica,
       sabor.frase, sabor.numero from sabor inner join adicional on sabor.id_adicional = adicional.id where sabor.id_produto = '$id'
       and adicional.ativo = 'true'
       order by numero, sabor.ordem_exibicao, adicional.descricao

       ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSaboresNovo/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT sabor.id, sabor.numero, sabor.media_valor, sabor.frase, sabor.quantidade_item, sabor.obrigatorio,
      sabor.manter_maior, GROUP_CONCAT(adicional.descricao SEPARATOR ' % ')  as adicionais, sabor.id_produto, sabor.quantidade_unica, sabor.ordem_exibicao,
      GROUP_CONCAT(CAST(adicional.id as UNSIGNED) SEPARATOR '%')  as listaId
      from sabor inner join adicional on sabor.id_adicional = adicional.id
      where sabor.id_produto = '$id' group by sabor.numero

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSaboresV2Garcom/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT sabor.*, adicional.descricao, adicional.texto, adicional.valor as valor_adicional from sabor
      inner join adicional on sabor.id_adicional = adicional.id
      where sabor.id_produto = '$id'");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getSaboresV2/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT sabor.*, adicional.ativo from sabor
        inner join adicional on sabor.id_adicional = adicional.id
        where sabor.id_produto = '$id' order by sabor.ordem_exibicao, adicional.descricao");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresas/:complemento',
    function ($complemento) use ($app, $db) {
        if ($complemento == "true") {
            $compl = " and id = 1";
        } else {
            $compl = " and id <> 1 and id <> 2 ";
        }

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare(
            "select * from empresa where ativo = 'true'" . $compl . " order by avaliacao ASC, rand() "

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id = $item['id'];
            $consulta = $db->con()->prepare("select hora_inicio, hora_fechar from horario_funcionamento, empresa
         where horario_funcionamento.id_empresa = empresa.id and
         horario_funcionamento.hora_fechar >= TIME_FORMAT('$datetime', '%H:%i:%S')
         and horario_funcionamento.hora_inicio <= TIME_FORMAT('$datetime', '%H:%i:%S')
         and DAYOFWEEK('$datetime') = dia_semana and id_empresa = '$id'

         ");
            $consulta->execute();
            $list[$i]['funcionamento'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEmpresasComTaxa/:bairro/:cidade',
    function ($bairro, $cidade) use ($app, $db) {

        $datetime = date_create()->format('Y-m-d H:i:s');

        $consulta = $db->con()->prepare(
            "select * from empresa where ativo = 'true' and cidade = '$cidade' and id <> 1 and id <> 2 order by avaliacao ASC, rand() "

        );
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $id = $item['id'];
            $consulta = $db->con()->prepare("select hora_inicio, hora_fechar from horario_funcionamento, empresa
         where horario_funcionamento.id_empresa = empresa.id and
         horario_funcionamento.hora_fechar >= TIME_FORMAT('$datetime', '%H:%i:%S')
         and horario_funcionamento.hora_inicio <= TIME_FORMAT('$datetime', '%H:%i:%S')
         and DAYOFWEEK('$datetime') = dia_semana and id_empresa = '$id'

         ");
            $consulta->execute();
            $list[$i]['funcionamento'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $consulta = $db->con()->prepare("select bairro_empresa.valor, bairro.nome from bairro_empresa, bairro, empresa where
         bairro_empresa.id_bairro = bairro.id and bairro_empresa.id_empresa = empresa.id and
         bairro.nome = '$bairro' and bairro_empresa.id_empresa = '$id'

         ");
            $consulta->execute();
            $list[$i]['taxa_entrega'] = $consulta->fetchAll(PDO::FETCH_ASSOC);

            $i++;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getCliente/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select * from cliente where id = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getClienteCPF/:cpf',
    function ($cpf) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT id, ativo, telefone, cpf, data_nascimento, nome from cliente where cpf = '$cpf'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("SELECT adicional.id, adicional.descricao, adicional.forcar_observacao, adicional.item_escolher,
      adicional.texto_observacao, adicional.valor from produto, adicional, adicional_produto
      where adicional_produto.id_produto = produto.id and adicional_produto.id_adicional = adicional.id
      and adicional_produto.id_produto = '$id' and adicional.ativo = 'true'
      order by adicional.ordem_exibicao, adicional.descricao

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getAdicionalProdutoSomenteId/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select adicional.id from produto, adicional, adicional_produto
      where adicional_produto.id_produto = produto.id and adicional_produto.id_adicional = adicional.id and adicional_produto.id_produto = '$id'

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/getEtapasProduto/:id',
    function ($id) use ($app, $db) {

        $consulta = $db->con()->prepare("select etapa_produto.id, etapa_produto.id_produto, etapa_produto.frase, etapa_produto.numero, etapa_produto.adicional1, etapa_produto.adicional2,
      etapa_produto.adicional3, etapa_produto.adicional4, etapa_produto.adicional5, etapa_produto.adicional6, etapa_produto.adicional7, etapa_produto.adicional8,
      etapa_produto.adicional9, etapa_produto.adicional10, etapa_produto.adicional11, etapa_produto.adicional12, etapa_produto.adicional13, etapa_produto.adicional14,
      etapa_produto.adicional15, etapa_produto.adicional16, etapa_produto.adicional17, etapa_produto.quantidade_item, etapa_produto.obrigatorio
      from etapa_produto, produto where  etapa_produto.id_produto = produto.id and etapa_produto.id_produto = '$id' order by etapa_produto.numero

      ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        $i = 0;
        foreach ($list as $item) {
            $list[$i]['listAdcional'] = array();
            if ($item['adicional1'] != null) {
                $id_adicional = $item['adicional1'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional2'] != null) {
                $id_adicional = $item['adicional2'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional3'] != null) {
                $id_adicional = $item['adicional3'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional4'] != null) {
                $id_adicional = $item['adicional4'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional5'] != null) {
                $id_adicional = $item['adicional5'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional6'] != null) {
                $id_adicional = $item['adicional6'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional7'] != null) {
                $id_adicional = $item['adicional7'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional8'] != null) {
                $id_adicional = $item['adicional8'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional9'] != null) {
                $id_adicional = $item['adicional9'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional10'] != null) {
                $id_adicional = $item['adicional10'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional11'] != null) {
                $id_adicional = $item['adicional11'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional12'] != null) {
                $id_adicional = $item['adicional12'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional13'] != null) {
                $id_adicional = $item['adicional13'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional14'] != null) {
                $id_adicional = $item['adicional14'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional15'] != null) {
                $id_adicional = $item['adicional15'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional16'] != null) {
                $id_adicional = $item['adicional16'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            if ($item['adicional17'] != null) {
                $id_adicional = $item['adicional17'];
                $consulta = $db->con()->prepare("SELECT * from adicional where id = '$id_adicional'

          ");
                $consulta->execute();
                $list[$i]['listAdcional'][] = $consulta->fetchAll(PDO::FETCH_ASSOC);
            }
            $i++;
        }
        echo json_encode(array("list" => $list));
    }
);

$app->get(
    '/enviarNotificacaoPush/:msg',
    function ($msg) use ($app, $db) {

        define('API_ACCESS_KEY', 'AIzaSyBDfCYJcII07JYVcpkIDLc9inOSmUZEYDs');
        $registrationIds = array("uaifoodmg-d21e3");
        // prep the bundle
        $msg = array
            (
            'message' => 'here is a message. message',
            'title' => 'This is a title. title',
            'subtitle' => 'This is a subtitle. subtitle',
            'tickerText' => 'Ticker text here...Ticker text here...Ticker text here',
            'vibrate' => 1,
            'sound' => 1,
            'largeIcon' => 'large_icon',
            'smallIcon' => 'small_icon',
        );
        $fields = array
            (
            'registration_ids' => $registrationIds,
            'data' => $msg,
        );

        $headers = array
            (
            'Authorization: key=' . API_ACCESS_KEY,
            'Content-Type: application/json',
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://android.googleapis.com/gcm/send');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
        $result = curl_exec($ch);
        curl_close($ch);
        echo $result;

    }
);

// ------------------------------------------------------------------
$app->post(
    '/login',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $login = (isset($data->login)) ? $data->login : "";
        $senha = (isset($data->senha)) ? $data->senha : "";

        if ($login == "admin" && $senha == "denis14031988") {
            $consulta = $db->con()->prepare("SELECT * FROM empresa
       where id = 12

       ");
        } else {
            $consulta = $db->con()->prepare("SELECT * FROM empresa
       where email = '$login' and senha = '$senha' and ativo = 'true'

       ");
        }

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        if (count($list) > 0) {
            $_SESSION['logado'] = true;
        }
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/loginSistemaGeral',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";

        $consulta = $db->con()->prepare("SELECT * FROM usuario
     where usuario = '$login' and senha = '$senha' and funcao = 'rootgeral'

     ");

        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/logOut',
    function () use ($app, $db) {

        $_SESSION['logado'] = false;

    }
);

$app->post(
    '/loginEmailFacebook',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";

        $consulta = $db->con()->prepare("SELECT * FROM cliente where
     email = '$login'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/loginCliente',
    function () use ($app, $db) {

        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";

        $consulta = $db->con()->prepare("SELECT * FROM cliente where
     email = '$login' and senha = '$senha'

     ");
        $consulta->execute();
        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

        echo json_encode(array("list" => $list));

    }
);

$app->get(
    '/logOut',
    function () use ($app, $db) {

        $_SESSION['logado'] = false;

    }
);

function auth()
{
    if (isset($_SESSION['logado'])) {
        return true;
    } else {
        //     header("Location: ../login.html");

    }
}

$app->post(
    '/imprimirPedidoIfood',
    function () use ($app, $db) {
        $impressaoProducao = array();
        $dados = json_decode($app->request()->getBody());
        $id = (isset($dados->id)) ? $dados->id : "";
        $referencia_ifood = (isset($dados->referencia_ifood)) ? $dados->referencia_ifood : "";
        $tipo = (isset($dados->tipo)) ? $dados->tipo : "";
        $id_empresa = (isset($dados->id_empresa)) ? $dados->id_empresa : "";
        $modelo = (isset($dados->modelo)) ? $dados->modelo : "";
        $impressora = (isset($dados->impressora)) ? $dados->impressora : "";
        $tamanho_papel = (isset($dados->tamanho_papel)) ? $dados->tamanho_papel : "";
        $imprimirCabecalho = (isset($dados->imprimirCabecalho)) ? $dados->imprimirCabecalho : "";
        $data = (isset($dados->data_pedido)) ? $dados->data_pedido : "";
        $data = date('d/m/Y H:i:s', strtotime($data));
        $numero_pedido = (isset($dados->numero_pedido)) ? $dados->numero_pedido : "";
        $empresa = (isset($dados->empresa)) ? $dados->empresa : "";
        $tipo_pedido = (isset($dados->origem_pedido)) ? $dados->origem_pedido : "";
        $nome = (isset($dados->nome)) ? $dados->nome : "";
        $telefone = (isset($dados->telefone)) ? $dados->telefone : "";
        $retira_local = (isset($dados->retira_local)) ? $dados->retira_local : "";
        $endereco = (isset($dados->endereco)) ? $dados->endereco : "";
        $endereco = sanitizeString($endereco);
        $numero = (isset($dados->numero)) ? $dados->numero : "";
        $complemento = (isset($dados->complemento)) ? $dados->complemento : "";
        $bairro = (isset($dados->bairro)) ? $dados->bairro : "";
        $bairro = sanitizeString($bairro);
        $forma_pagamento = (isset($dados->forma_pagamento)) ? $dados->forma_pagamento : "";
        $forma_pagamento = sanitizeString($forma_pagamento);
        $troco = (isset($dados->troco)) ? $dados->troco : "";
        $referencia = (isset($dados->referencia)) ? $dados->referencia : "";
        $desconto = (isset($dados->desconto)) ? $dados->desconto : "";
        $desconto_texto = asDollars($desconto);
        $taxa_entrega = (isset($dados->taxa_entrega)) ? $dados->taxa_entrega : "";
        $valor_total = (isset($dados->valor_total)) ? $dados->valor_total : "";
        $observacao = (isset($dados->observacao)) ? $dados->observacao : "";
        $observacao = sanitizeString($observacao);
        $troco = (isset($dados->troco)) ? $dados->troco : "";
        $tamanho_impressora = $tamanho_papel;
        $nome_impressora = $impressora;
        $localizador = (isset($dados->localizador)) ? $dados->localizador : "";
        $list = json_decode(json_encode($dados->produtos), true);
        $listaFormas = json_decode(json_encode($dados->listaFormas), true);
        $imprimir_producao = (isset($dados->imprimir_producao)) ? $dados->imprimir_producao : false;
        $espacoLinhas = 40;
        if ($tamanho_impressora == 58) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 120;
            $terceira_posicao = 290;
            $quebra_linha = 24;
            $posicao_centro = $quebra_linha + 7;
        } else if ($tamanho_impressora == 80) {
            $fonte = 40;
            $segunda_fonte = 16;
            $primeira_posicao = 150;
            $segunda_posicao = 210;
            $terceira_posicao = 430;
            $quebra_linha = 19;
            $posicao_centro = $quebra_linha + 5;
        } else if ($tamanho_impressora == 60) {
            $fonte = 28;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 35;
            $posicao_centro = $quebra_linha + 10;
        } else if ($tamanho_impressora == 70) {
            $fonte = 36;
            $segunda_fonte = 10;
            $primeira_posicao = 50;
            $segunda_posicao = 130;
            $terceira_posicao = 460;
            $espacoLinhas = 30;
            $quebra_linha = 40;
            $posicao_centro = $quebra_linha + 8;
        }

        $posicao = 10;
        $handle = printer_open($nome_impressora);
        printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);
        printer_start_doc($handle, "Print");
        printer_start_page($handle);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        $centro_linha = ($posicao_centro) - strlen("DOCUMENTO NÃO FISCAL");
        $centro_linha = $centro_linha;
        $espaco_vazio = "";
        for ($ii = 0; $ii < $centro_linha; $ii++) {
            $espaco_vazio = " " . $espaco_vazio;
        }

        if ($imprimir_producao == true) {
            printer_draw_text($handle, utf8_decode($espaco_vazio . "               PRODUÇÃO"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $centro_linha = ($posicao_centro) - strlen($empresa);
            $centro_linha = $centro_linha;
            $espaco_vazio = "";
            for ($ii = 0; $ii < $centro_linha; $ii++) {
                $espaco_vazio = " " . $espaco_vazio;
            }
            printer_draw_text($handle, strtoupper(utf8_decode($espaco_vazio . $empresa)), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
        } else {
            printer_draw_text($handle, utf8_decode($espaco_vazio . "DOCUMENTO NÃO FISCAL"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $centro_linha = ($posicao_centro) - strlen($empresa);
            $centro_linha = $centro_linha;
            $espaco_vazio = "";
            for ($ii = 0; $ii < $centro_linha; $ii++) {
                $espaco_vazio = " " . $espaco_vazio;
            }
            printer_draw_text($handle, strtoupper(utf8_decode($espaco_vazio . $empresa)), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        printer_draw_text($handle, "Data:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "$data", $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Pedido:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        if (strlen("$id - $nome") > $quebra_linha) {
            $temp = str_split("$id - $nome", $quebra_linha - 1);
            for ($a = 0; $a < count($temp); $a++) {
                printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
        } else {
            printer_draw_text($handle, utf8_decode("$id - $nome"), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }

        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "Origem:", 10, $posicao);
        $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
        printer_select_font($handle, $font);
        printer_draw_text($handle, "IFOOD", $segunda_posicao, $posicao);
        $posicao = $posicao + $espacoLinhas;
        if ($imprimir_producao != true) {

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Localizador:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $localizador, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            $endereco_temp = "";
            if ($telefone != null && $telefone != '') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Telefone:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "$telefone", $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($retira_local == 1) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen("Pedido sera retirado no local") > $quebra_linha) {
                    $temp = str_split("Pedido sera retirado no local", $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode("Pedido sera retirado no local"), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {

                $endereco = utf8_decode($endereco . " " . $numero);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($endereco) > $quebra_linha) {
                    $temp = str_split($endereco, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($endereco), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                if ($complemento != '' && $complemento != null && $complemento != 'null') {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Compl:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($complemento) > $quebra_linha) {
                        $temp = str_split($complemento, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($complemento), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Bairro:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($bairro) > $quebra_linha) {
                    $temp = str_split($bairro, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($bairro), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Referencia:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($referencia) > $quebra_linha) {
                    $temp = str_split($referencia, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($referencia), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            if ($troco != '') {
                $troco_para = asDollars($troco);
                $troco = $troco - $valor_total + $desconto;
                $troco = asDollars($troco);
                $sub_total = asDollars($valor_total);
                if (!isset($porcentagem_garcom)) {
                    $porcentagem_garcom = 0;
                }
                $valor_total = asDollars($valor_total - $desconto + $porcentagem_garcom);
                if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Troco para:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($troco_para) > $quebra_linha) {
                        $temp = str_split($troco_para, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($troco_para), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }
            } else {
                if (!isset($porcentagem_garcom)) {
                    $porcentagem_garcom = 0;
                }
                $sub_total = asDollars($valor_total);
                $valor_total = asDollars($valor_total - $desconto + $porcentagem_garcom);
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Taxa Ent:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $taxa_entrega, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($desconto != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Desconto:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($desconto_texto), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($porcentagem_garcom != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("% Garçom:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($porcentagem_garcom), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($sub_total != $valor_total) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Sub-Total:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($sub_total), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($observacao != '' && $observacao != null) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao) > $quebra_linha) {
                    $temp = str_split($observacao, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            foreach ($listaFormas as $item) {
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
                if ($item['prepaid'] == true) {
                    $item['name'] = $item['name'] . ' - Pagamento Online';
                    $forma_pagamento = $forma_pagamento . " - Pagamento Online";
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($item['name']) > $quebra_linha) {
                    $temp = str_split($item['name'], $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                        if ($a == count($temp) - 1) {
                            printer_draw_text($handle, utf8_decode(asDollars($item['value'])), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }

                } else {
                    printer_draw_text($handle, utf8_decode($item['name']), 10, $posicao);
                    printer_draw_text($handle, utf8_decode(asDollars($item['value'])), $terceira_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            if ($item['troco_para']) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "TROCO PARA:", 10, $posicao);
                printer_draw_text($handle, utf8_decode(asDollars($item['troco_para'])), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($item['troco']) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "TROCO:", 10, $posicao);
                printer_draw_text($handle, utf8_decode(asDollars($item['troco'])), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;
        }
        foreach ($list as $item) {
            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }

            $quantidade = $item['quantidade'];
            $nome_produto = $item['nome'];
            $nome_produto = sanitizeString($nome_produto);
            $valor_produto = $item['valor'];
            $valor_total_produto = $valor_produto * $quantidade;
            $valor_total_produto = asDollars($valor_total_produto);
            $valor_produto = asDollars($valor_produto);
            $observacao_produto = $item['observacao_produto'];

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen($quantidade . "-" . $nome_produto) > $quebra_linha) {
                $temp = str_split($quantidade . " - " . $nome_produto, $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                    if ($a == count($temp) - 1) {
                        printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                    }
                    $posicao = $posicao + $espacoLinhas;
                }

            } else {
                printer_draw_text($handle, utf8_decode($quantidade . " - " . $nome_produto), 10, $posicao);
                printer_draw_text($handle, utf8_decode($valor_total_produto), $terceira_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            foreach ($item['adicional'] as $item2) {
                $descricao = $item2['descricao'];
                $quantidade_adicional = $item2['quantidade'];
                $descricao = sanitizeString($descricao);
                if ($item2['valor'] != '0') {
                    $valor_adicional = $item2['valor'];
                    $valor_total_adicional = $valor_adicional;
                    $valor_adicional = asDollars($valor_adicional);
                    $valor_total_adicional = asDollars($valor_total_adicional);
                }
                for ($ab = 0; $ab < (floatval($quantidade_adicional)); $ab++) {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen("-" . $descricao) > $quebra_linha) {
                        $temp = str_split("-" . $descricao, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode("-" . $descricao), 10, $posicao);
                        if ($item2['valor'] != '0') {
                            printer_draw_text($handle, utf8_decode($valor_adicional), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }
                }
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
            }

            if ($observacao_produto != "") {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao_produto) > $quebra_linha) {
                    $temp = str_split($observacao_produto, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao_produto), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("---------------------------------------------------------------------------------------------------------------"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }
        if ($id_empresa != 10) {
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $terceira_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

        }

        if ($posicao >= 1400) {
            printer_end_page($handle);
            printer_start_page($handle);
            $posicao = 0;
        }

        printer_delete_font($font);
        printer_end_page($handle);
        printer_end_doc($handle);
        printer_close($handle);

        if ($id_empresa == 10 && $retira_local != 1) {
            $posicao = 10;
            $handle = printer_open($nome_impressora);
            printer_set_option($handle, PRINTER_MODE, "RAW", PRINTER_FORMAT_CUSTOM);
            printer_start_doc($handle, "Print");
            printer_start_page($handle);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            $centro_linha = ($posicao_centro) - strlen("2º VIA");
            $centro_linha = $centro_linha;
            $espaco_vazio = "";
            for ($ii = 0; $ii < $centro_linha; $ii++) {
                $espaco_vazio = " " . $espaco_vazio;
            }

            printer_draw_text($handle, utf8_decode($espaco_vazio . "2º VIA"), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            printer_draw_text($handle, "Data:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "$data", $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Pedido:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            if (strlen("$numero_pedido - $nome") > $quebra_linha) {
                $temp = str_split("$numero_pedido - $nome", $quebra_linha - 1);
                for ($a = 0; $a < count($temp); $a++) {
                    printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                printer_draw_text($handle, utf8_decode("$numero_pedido - $nome"), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($tipo_pedido == 'app') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Origem:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "IFOOD", $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $endereco_temp = "";
            if ($telefone != null && $telefone != '') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "Telefone:", 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, "$telefone", $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            if ($retira_local == 1) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Atenção:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen("Pedido sera retirado no local") > $quebra_linha) {
                    $temp = str_split("Pedido sera retirado no local", $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode("Pedido sera retirado no local"), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {

                $endereco = utf8_decode($endereco . " " . $numero);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Endereço:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($endereco) > $quebra_linha) {
                    $temp = str_split($endereco, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($endereco), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                if ($complemento != '' && $complemento != null && $complemento != 'null') {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Compl:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($complemento) > $quebra_linha) {
                        $temp = str_split($complemento, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($complemento), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Bairro:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($bairro) > $quebra_linha) {
                    $temp = str_split($bairro, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($bairro), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Referencia:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($referencia) > $quebra_linha) {
                    $temp = str_split($referencia, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($referencia), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            /* $font = printer_create_font($GLOBALS['nomeFonte'],$fonte,$segunda_fonte,$GLOBALS['fontBold'],false,false,false,0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Pagamento:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'],$fonte,$segunda_fonte,$GLOBALS['fontNormal'],false,false,false,0);
            printer_select_font($handle, $font);
            if(strlen($forma_pagamento) > $quebra_linha){
            $temp = str_split($forma_pagamento, $quebra_linha - 1);
            for($a = 0; $a < count($temp); $a++ ){
            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            }
            }else{
            printer_draw_text($handle, utf8_decode($forma_pagamento), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            }  */

            foreach ($listaFormas as $item) {
                if ($posicao >= 1400) {
                    printer_end_page($handle);
                    printer_start_page($handle);
                    $posicao = 0;
                }
                if ($item['prepaid'] == true) {
                    $item['name'] = $item['name'] . ' - Pagamento Online';
                    $forma_pagamento = $forma_pagamento . " - Pagamento Online";
                }

                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($item['name']) > $quebra_linha) {
                    $temp = str_split($item['name'], $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), 10, $posicao);
                        if ($a == count($temp) - 1) {
                            printer_draw_text($handle, utf8_decode(asDollars($item['value'])), $terceira_posicao, $posicao);
                        }
                        $posicao = $posicao + $espacoLinhas;
                    }

                } else {
                    printer_draw_text($handle, utf8_decode($item['name']), 10, $posicao);
                    printer_draw_text($handle, utf8_decode(asDollars($item['value'])), $terceira_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            if ($troco != '') {
                //   $troco_para = asDollars($troco);
                //    $troco = $troco - $valor_total + $desconto;
                //   $troco = asDollars($troco);
                //   $sub_total = asDollars($valor_total);
                if (!isset($porcentagem_garcom)) {
                    $porcentagem_garcom = 0;
                }
                //   $valor_total = asDollars($valor_total  - $desconto + $porcentagem_garcom);
                if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Troco para:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    if (strlen($troco_para) > $quebra_linha) {
                        $temp = str_split($troco_para, $quebra_linha - 1);
                        for ($a = 0; $a < count($temp); $a++) {
                            printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                            $posicao = $posicao + $espacoLinhas;
                        }
                    } else {
                        printer_draw_text($handle, utf8_decode($troco_para), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                }
            } else {
                if (!isset($porcentagem_garcom)) {
                    $porcentagem_garcom = 0;
                }
                //  $sub_total = asDollars($valor_total);
                //  $valor_total = asDollars($valor_total - $desconto + $porcentagem_garcom);
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, "Taxa Ent:", 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, $taxa_entrega, $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($desconto != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Desconto:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($desconto_texto), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($porcentagem_garcom != '0') {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("% Garçom:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($porcentagem_garcom), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }
            if ($sub_total != $valor_total) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Sub-Total:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode($sub_total), $segunda_posicao, $posicao);
                $posicao = $posicao + $espacoLinhas;
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("Valor Total:"), 10, $posicao);
            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode($valor_total), $segunda_posicao, $posicao);
            $posicao = $posicao + $espacoLinhas;
            if ($troco != '') {
                if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Valor troco:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode($troco), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            } else {
                if ($forma_pagamento == "Dinheiro" || $forma_pagamento == "DINHEIRO") {
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("Valor troco:"), 10, $posicao);
                    $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                    printer_select_font($handle, $font);
                    printer_draw_text($handle, utf8_decode("SEM TROCO"), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            if ($observacao != '' && $observacao != null) {
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
                printer_select_font($handle, $font);
                printer_draw_text($handle, utf8_decode("Observação:"), 10, $posicao);
                $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontNormal'], false, false, false, 0);
                printer_select_font($handle, $font);
                if (strlen($observacao) > $quebra_linha) {
                    $temp = str_split($observacao, $quebra_linha - 1);
                    for ($a = 0; $a < count($temp); $a++) {
                        printer_draw_text($handle, utf8_decode($temp[$a]), $segunda_posicao, $posicao);
                        $posicao = $posicao + $espacoLinhas;
                    }
                } else {
                    printer_draw_text($handle, utf8_decode($observacao), $segunda_posicao, $posicao);
                    $posicao = $posicao + $espacoLinhas;
                }
            }

            $font = printer_create_font($GLOBALS['nomeFonte'], $fonte, $segunda_fonte, $GLOBALS['fontBold'], false, false, false, 0);
            printer_select_font($handle, $font);
            printer_draw_text($handle, utf8_decode("========================================================================="), 10, $posicao);
            $posicao = $posicao + $espacoLinhas;

            if ($posicao >= 1400) {
                printer_end_page($handle);
                printer_start_page($handle);
                $posicao = 0;
            }

            printer_delete_font($font);
            printer_end_page($handle);
            printer_end_doc($handle);
            printer_close($handle);
            echo json_encode("ok");

        } else {
            echo json_encode("ok");
        }
    }
);

// API GERENCIAL

$app->post(
    '/loginAdmin',
    function () use ($app) {
        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $list = array();
        $listaBancos = retornarListaBancoDeDados();

        foreach ($listaBancos as $banco) {
            if (count($list) == 0) {
                $dbTemp = new criarConexao($banco);
                if ($dbTemp->con() != null) {
                    $consulta = $dbTemp->con()->prepare("SELECT * FROM usuario
         where usuario = '$login' and senha = '$senha' and funcao <> 'entregador' and ativo = 'true'");
                    $consulta->execute();
                    $list = $consulta->fetchAll(PDO::FETCH_ASSOC);
                } else {
                    $list = array();
                }
            }
        }
        echo json_encode(array("list" => $list));

    }
);

$app->post(
    '/loginNovo',
    function () use ($app) {
        $data = json_decode($app->request()->getBody());
        $login = (isset($data->email)) ? $data->email : "";
        $senha = (isset($data->senha)) ? $data->senha : "";
        $cnpj = (isset($data->cnpj)) ? $data->cnpj : "";
        $list = array();
        $listaBancos = retornarListaBancoDeDados();

        foreach ($listaBancos as $banco) {
            try {
                if (count($list) == 0) {
                    $dbTemp = new criarConexao($banco);
                    if ($dbTemp->con() != null) {
                        $consulta = $dbTemp->con()->prepare("SELECT usuario.* FROM usuario
          inner join empresa on usuario.id_empresa = empresa.id
       where usuario.usuario = '$login' and usuario.senha = '$senha'
        and usuario.funcao <> 'entregador' and usuario.ativo = 'true'
        and empresa.cnpj = '$cnpj' ");
                        $consulta->execute();
                        $list = $consulta->fetchAll(PDO::FETCH_ASSOC);

                    } else {
                        $list = array();
                    }
                }
            } catch (PDOException $e) {
                return null;
            }
        }
        echo json_encode(array("list" => $list));

    }
);

$app->run();
